
USBd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df0  08006df0  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df8  08006df8  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dfc  08006dfc  00016dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c2c  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001d28  20001d28  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d125  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002976  00000000  00000000  0002d294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b38  00000000  00000000  0002fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000844  00000000  00000000  00030748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022556  00000000  00000000  00030f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e256  00000000  00000000  000534e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c3837  00000000  00000000  00061738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c60  00000000  00000000  00124f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00127bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d80 	.word	0x08006d80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006d80 	.word	0x08006d80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 f938 	bl	800073c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f806 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f86e 	bl	80005b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004d4:	f005 ff34 	bl	8006340 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x14>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f006 fc1c 	bl	8006d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800053c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800054c:	2304      	movs	r3, #4
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000550:	23a8      	movs	r3, #168	; 0xa8
 8000552:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000554:	2302      	movs	r3, #2
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000558:	2307      	movs	r3, #7
 800055a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fead 	bl	80022c0 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800056c:	f000 f848 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000574:	2302      	movs	r3, #2
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000586:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2105      	movs	r1, #5
 800058e:	4618      	mov	r0, r3
 8000590:	f002 f90e 	bl	80027b0 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800059a:	f000 f831 	bl	8000600 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3750      	adds	r7, #80	; 0x50
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b10      	ldr	r3, [pc, #64]	; (80005fc <MX_GPIO_Init+0x4c>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <MX_GPIO_Init+0x4c>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_GPIO_Init+0x4c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	603b      	str	r3, [r7, #0]
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_GPIO_Init+0x4c>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <MX_GPIO_Init+0x4c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_GPIO_Init+0x4c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	e7fe      	b.n	8000608 <Error_Handler+0x8>
	...

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <HAL_MspInit+0x4c>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <HAL_MspInit+0x4c>)
 800061c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000620:	6453      	str	r3, [r2, #68]	; 0x44
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_MspInit+0x4c>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <HAL_MspInit+0x4c>)
 8000634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <HAL_MspInit+0x4c>)
 8000638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063c:	6413      	str	r3, [r2, #64]	; 0x40
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_MspInit+0x4c>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000646:	603b      	str	r3, [r7, #0]
 8000648:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800064a:	2007      	movs	r0, #7
 800064c:	f000 f9dc 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800

0800065c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <NMI_Handler+0x4>

08000662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <MemManage_Handler+0x4>

0800066e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <UsageFault_Handler+0x4>

0800067a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a8:	f000 f89a 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <OTG_FS_IRQHandler+0x10>)
 80006b6:	f000 fcd5 	bl	8001064 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200015fc 	.word	0x200015fc

080006c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <SystemInit+0x20>)
 80006ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <SystemInit+0x20>)
 80006d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000720 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006ec:	480d      	ldr	r0, [pc, #52]	; (8000724 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006ee:	490e      	ldr	r1, [pc, #56]	; (8000728 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000704:	4c0b      	ldr	r4, [pc, #44]	; (8000734 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000712:	f7ff ffd7 	bl	80006c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000716:	f006 fb0f 	bl	8006d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800071a:	f7ff fed3 	bl	80004c4 <main>
  bx  lr    
 800071e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000720:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000728:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 800072c:	08006e00 	.word	0x08006e00
  ldr r2, =_sbss
 8000730:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000734:	20001d28 	.word	0x20001d28

08000738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000738:	e7fe      	b.n	8000738 <ADC_IRQHandler>
	...

0800073c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000740:	4b0e      	ldr	r3, [pc, #56]	; (800077c <HAL_Init+0x40>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <HAL_Init+0x40>)
 8000746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_Init+0x40>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_Init+0x40>)
 8000752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_Init+0x40>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_Init+0x40>)
 800075e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000764:	2003      	movs	r0, #3
 8000766:	f000 f94f 	bl	8000a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800076a:	2000      	movs	r0, #0
 800076c:	f000 f808 	bl	8000780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000770:	f7ff ff4c 	bl	800060c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000774:	2300      	movs	r3, #0
}
 8000776:	4618      	mov	r0, r3
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023c00 	.word	0x40023c00

08000780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_InitTick+0x54>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_InitTick+0x58>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	4619      	mov	r1, r3
 8000792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000796:	fbb3 f3f1 	udiv	r3, r3, r1
 800079a:	fbb2 f3f3 	udiv	r3, r2, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f967 	bl	8000a72 <HAL_SYSTICK_Config>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00e      	b.n	80007cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2b0f      	cmp	r3, #15
 80007b2:	d80a      	bhi.n	80007ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b4:	2200      	movs	r2, #0
 80007b6:	6879      	ldr	r1, [r7, #4]
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007bc:	f000 f92f 	bl	8000a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c0:	4a06      	ldr	r2, [pc, #24]	; (80007dc <HAL_InitTick+0x5c>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e000      	b.n	80007cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	; (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008
 8000804:	20000118 	.word	0x20000118

08000808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000118 	.word	0x20000118

08000820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff ffee 	bl	8000808 <HAL_GetTick>
 800082c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000838:	d005      	beq.n	8000846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_Delay+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000846:	bf00      	nop
 8000848:	f7ff ffde 	bl	8000808 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <HAL_Delay+0x28>
  {
  }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008

08000868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800087e:	68ba      	ldr	r2, [r7, #8]
 8000880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089a:	4a04      	ldr	r2, [pc, #16]	; (80008ac <__NVIC_SetPriorityGrouping+0x44>)
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	60d3      	str	r3, [r2, #12]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_GetPriorityGrouping+0x18>)
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	0a1b      	lsrs	r3, r3, #8
 80008ba:	f003 0307 	and.w	r3, r3, #7
}
 80008be:	4618      	mov	r0, r3
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db0b      	blt.n	80008f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	f003 021f 	and.w	r2, r3, #31
 80008e4:	4907      	ldr	r1, [pc, #28]	; (8000904 <__NVIC_EnableIRQ+0x38>)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	095b      	lsrs	r3, r3, #5
 80008ec:	2001      	movs	r0, #1
 80008ee:	fa00 f202 	lsl.w	r2, r0, r2
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	2b00      	cmp	r3, #0
 800091a:	db0a      	blt.n	8000932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	490c      	ldr	r1, [pc, #48]	; (8000954 <__NVIC_SetPriority+0x4c>)
 8000922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000926:	0112      	lsls	r2, r2, #4
 8000928:	b2d2      	uxtb	r2, r2
 800092a:	440b      	add	r3, r1
 800092c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000930:	e00a      	b.n	8000948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4908      	ldr	r1, [pc, #32]	; (8000958 <__NVIC_SetPriority+0x50>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	f003 030f 	and.w	r3, r3, #15
 800093e:	3b04      	subs	r3, #4
 8000940:	0112      	lsls	r2, r2, #4
 8000942:	b2d2      	uxtb	r2, r2
 8000944:	440b      	add	r3, r1
 8000946:	761a      	strb	r2, [r3, #24]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000e100 	.word	0xe000e100
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800095c:	b480      	push	{r7}
 800095e:	b089      	sub	sp, #36	; 0x24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	f1c3 0307 	rsb	r3, r3, #7
 8000976:	2b04      	cmp	r3, #4
 8000978:	bf28      	it	cs
 800097a:	2304      	movcs	r3, #4
 800097c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3304      	adds	r3, #4
 8000982:	2b06      	cmp	r3, #6
 8000984:	d902      	bls.n	800098c <NVIC_EncodePriority+0x30>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3b03      	subs	r3, #3
 800098a:	e000      	b.n	800098e <NVIC_EncodePriority+0x32>
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43da      	mvns	r2, r3
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	401a      	ands	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	fa01 f303 	lsl.w	r3, r1, r3
 80009ae:	43d9      	mvns	r1, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b4:	4313      	orrs	r3, r2
         );
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3724      	adds	r7, #36	; 0x24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d4:	d301      	bcc.n	80009da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00f      	b.n	80009fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <SysTick_Config+0x40>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b01      	subs	r3, #1
 80009e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e2:	210f      	movs	r1, #15
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e8:	f7ff ff8e 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <SysTick_Config+0x40>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SysTick_Config+0x40>)
 80009f4:	2207      	movs	r2, #7
 80009f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	e000e010 	.word	0xe000e010

08000a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff ff29 	bl	8000868 <__NVIC_SetPriorityGrouping>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b086      	sub	sp, #24
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	607a      	str	r2, [r7, #4]
 8000a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff3e 	bl	80008b0 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff8e 	bl	800095c <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff31 	bl	80008cc <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa2 	bl	80009c4 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
 8000aa6:	e16b      	b.n	8000d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	f040 815a 	bne.w	8000d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0303 	and.w	r3, r3, #3
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d005      	beq.n	8000ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d130      	bne.n	8000b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	68da      	ldr	r2, [r3, #12]
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b14:	2201      	movs	r2, #1
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4013      	ands	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	091b      	lsrs	r3, r3, #4
 8000b2a:	f003 0201 	and.w	r2, r3, #1
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d017      	beq.n	8000b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	2203      	movs	r2, #3
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	69ba      	ldr	r2, [r7, #24]
 8000b60:	4013      	ands	r3, r2
 8000b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	69ba      	ldr	r2, [r7, #24]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 0303 	and.w	r3, r3, #3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d123      	bne.n	8000bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	08da      	lsrs	r2, r3, #3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	f003 0307 	and.w	r3, r3, #7
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	691a      	ldr	r2, [r3, #16]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	08da      	lsrs	r2, r3, #3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3208      	adds	r2, #8
 8000bca:	69b9      	ldr	r1, [r7, #24]
 8000bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	2203      	movs	r2, #3
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0203 	and.w	r2, r3, #3
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 80b4 	beq.w	8000d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b60      	ldr	r3, [pc, #384]	; (8000d98 <HAL_GPIO_Init+0x30c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a5f      	ldr	r2, [pc, #380]	; (8000d98 <HAL_GPIO_Init+0x30c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <HAL_GPIO_Init+0x30c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2e:	4a5b      	ldr	r2, [pc, #364]	; (8000d9c <HAL_GPIO_Init+0x310>)
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3302      	adds	r3, #2
 8000c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a52      	ldr	r2, [pc, #328]	; (8000da0 <HAL_GPIO_Init+0x314>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d02b      	beq.n	8000cb2 <HAL_GPIO_Init+0x226>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a51      	ldr	r2, [pc, #324]	; (8000da4 <HAL_GPIO_Init+0x318>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d025      	beq.n	8000cae <HAL_GPIO_Init+0x222>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a50      	ldr	r2, [pc, #320]	; (8000da8 <HAL_GPIO_Init+0x31c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d01f      	beq.n	8000caa <HAL_GPIO_Init+0x21e>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a4f      	ldr	r2, [pc, #316]	; (8000dac <HAL_GPIO_Init+0x320>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d019      	beq.n	8000ca6 <HAL_GPIO_Init+0x21a>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a4e      	ldr	r2, [pc, #312]	; (8000db0 <HAL_GPIO_Init+0x324>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d013      	beq.n	8000ca2 <HAL_GPIO_Init+0x216>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a4d      	ldr	r2, [pc, #308]	; (8000db4 <HAL_GPIO_Init+0x328>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00d      	beq.n	8000c9e <HAL_GPIO_Init+0x212>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a4c      	ldr	r2, [pc, #304]	; (8000db8 <HAL_GPIO_Init+0x32c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x20e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <HAL_GPIO_Init+0x330>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_Init+0x20a>
 8000c92:	2307      	movs	r3, #7
 8000c94:	e00e      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000c96:	2308      	movs	r3, #8
 8000c98:	e00c      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	e00a      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	e008      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	e006      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e004      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e002      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_GPIO_Init+0x228>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	69fa      	ldr	r2, [r7, #28]
 8000cb6:	f002 0203 	and.w	r2, r2, #3
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	4093      	lsls	r3, r2
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc4:	4935      	ldr	r1, [pc, #212]	; (8000d9c <HAL_GPIO_Init+0x310>)
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	089b      	lsrs	r3, r3, #2
 8000cca:	3302      	adds	r3, #2
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000cd4:	689b      	ldr	r3, [r3, #8]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cf6:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d003      	beq.n	8000d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d20:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4013      	ands	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d003      	beq.n	8000d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d4a:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <HAL_GPIO_Init+0x334>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	61fb      	str	r3, [r7, #28]
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b0f      	cmp	r3, #15
 8000d84:	f67f ae90 	bls.w	8000aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3724      	adds	r7, #36	; 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40013800 	.word	0x40013800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400
 8000da8:	40020800 	.word	0x40020800
 8000dac:	40020c00 	.word	0x40020c00
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40021400 	.word	0x40021400
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40021c00 	.word	0x40021c00
 8000dc0:	40013c00 	.word	0x40013c00

08000dc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc6:	b08f      	sub	sp, #60	; 0x3c
 8000dc8:	af0a      	add	r7, sp, #40	; 0x28
 8000dca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e10f      	b.n	8000ff6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d106      	bne.n	8000df6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f005 fc85 	bl	8006700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d102      	bne.n	8000e10 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 ffd8 	bl	8002dca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	687e      	ldr	r6, [r7, #4]
 8000e22:	466d      	mov	r5, sp
 8000e24:	f106 0410 	add.w	r4, r6, #16
 8000e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e34:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e38:	1d33      	adds	r3, r6, #4
 8000e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f001 feaf 	bl	8002ba0 <USB_CoreInit>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d005      	beq.n	8000e54 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e0d0      	b.n	8000ff6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 ffc6 	bl	8002dec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e04a      	b.n	8000efc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e66:	7bfa      	ldrb	r2, [r7, #15]
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4413      	add	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	333d      	adds	r3, #61	; 0x3d
 8000e76:	2201      	movs	r2, #1
 8000e78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4413      	add	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	333c      	adds	r3, #60	; 0x3c
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	b298      	uxth	r0, r3
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3344      	adds	r3, #68	; 0x44
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3340      	adds	r3, #64	; 0x40
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3348      	adds	r3, #72	; 0x48
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ece:	7bfa      	ldrb	r2, [r7, #15]
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	334c      	adds	r3, #76	; 0x4c
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	440b      	add	r3, r1
 8000ef0:	3354      	adds	r3, #84	; 0x54
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3af      	bcc.n	8000e66 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e044      	b.n	8000f96 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f64:	7bfa      	ldrb	r2, [r7, #15]
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	3301      	adds	r3, #1
 8000f94:	73fb      	strb	r3, [r7, #15]
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d3b5      	bcc.n	8000f0c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	603b      	str	r3, [r7, #0]
 8000fa6:	687e      	ldr	r6, [r7, #4]
 8000fa8:	466d      	mov	r5, sp
 8000faa:	f106 0410 	add.w	r4, r6, #16
 8000fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fba:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fbe:	1d33      	adds	r3, r6, #4
 8000fc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fc2:	6838      	ldr	r0, [r7, #0]
 8000fc4:	f001 ff5e 	bl	8002e84 <USB_DevInit>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00d      	b.n	8000ff6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 f8ad 	bl	800414e <USB_DevDisconnect>

  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ffe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_PCD_Start+0x1c>
 8001016:	2302      	movs	r3, #2
 8001018:	e020      	b.n	800105c <HAL_PCD_Start+0x5e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2201      	movs	r2, #1
 800101e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	2b01      	cmp	r3, #1
 8001028:	d109      	bne.n	800103e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001036:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 feb0 	bl	8002da8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f003 f85d 	bl	800410c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b08d      	sub	sp, #52	; 0x34
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f003 f91b 	bl	80042b6 <USB_GetMode>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	f040 848a 	bne.w	800199c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f003 f87f 	bl	8004190 <USB_ReadInterrupts>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 8480 	beq.w	800199a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	0a1b      	lsrs	r3, r3, #8
 80010a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 f86c 	bl	8004190 <USB_ReadInterrupts>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d107      	bne.n	80010d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f002 0202 	and.w	r2, r2, #2
 80010d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 f85a 	bl	8004190 <USB_ReadInterrupts>
 80010dc:	4603      	mov	r3, r0
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b10      	cmp	r3, #16
 80010e4:	d161      	bne.n	80011aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699a      	ldr	r2, [r3, #24]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0210 	bic.w	r2, r2, #16
 80010f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f003 020f 	and.w	r2, r3, #15
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	3304      	adds	r3, #4
 8001114:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	0c5b      	lsrs	r3, r3, #17
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	2b02      	cmp	r3, #2
 8001120:	d124      	bne.n	800116c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001128:	4013      	ands	r3, r2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d035      	beq.n	800119a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001138:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	6a38      	ldr	r0, [r7, #32]
 8001142:	f002 fe91 	bl	8003e68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001152:	441a      	add	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	6a1a      	ldr	r2, [r3, #32]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	091b      	lsrs	r3, r3, #4
 8001160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001164:	441a      	add	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	621a      	str	r2, [r3, #32]
 800116a:	e016      	b.n	800119a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	0c5b      	lsrs	r3, r3, #17
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	2b06      	cmp	r3, #6
 8001176:	d110      	bne.n	800119a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800117e:	2208      	movs	r2, #8
 8001180:	4619      	mov	r1, r3
 8001182:	6a38      	ldr	r0, [r7, #32]
 8001184:	f002 fe70 	bl	8003e68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001194:	441a      	add	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	699a      	ldr	r2, [r3, #24]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f042 0210 	orr.w	r2, r2, #16
 80011a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ffee 	bl	8004190 <USB_ReadInterrupts>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011be:	f040 80a7 	bne.w	8001310 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fff3 	bl	80041b6 <USB_ReadDevAllOutEpInterrupt>
 80011d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011d2:	e099      	b.n	8001308 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 808e 	beq.w	80012fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f817 	bl	800421e <USB_ReadDevOutEPInterrupt>
 80011f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d00c      	beq.n	8001216 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	015a      	lsls	r2, r3, #5
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	4413      	add	r3, r2
 8001204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001208:	461a      	mov	r2, r3
 800120a:	2301      	movs	r3, #1
 800120c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800120e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 fec3 	bl	8001f9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	015a      	lsls	r2, r3, #5
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800122c:	461a      	mov	r2, r3
 800122e:	2308      	movs	r3, #8
 8001230:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 ff99 	bl	800216c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	015a      	lsls	r2, r3, #5
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	4413      	add	r3, r2
 800124c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001250:	461a      	mov	r2, r3
 8001252:	2310      	movs	r3, #16
 8001254:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d030      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001268:	2b80      	cmp	r3, #128	; 0x80
 800126a:	d109      	bne.n	8001280 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001282:	4613      	mov	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	3304      	adds	r3, #4
 8001294:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	78db      	ldrb	r3, [r3, #3]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d108      	bne.n	80012b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2200      	movs	r2, #0
 80012a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f005 fb2e 	bl	800690c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	015a      	lsls	r2, r3, #5
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012bc:	461a      	mov	r2, r3
 80012be:	2302      	movs	r3, #2
 80012c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f003 0320 	and.w	r3, r3, #32
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	015a      	lsls	r2, r3, #5
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d8:	461a      	mov	r2, r3
 80012da:	2320      	movs	r3, #32
 80012dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d009      	beq.n	80012fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	015a      	lsls	r2, r3, #5
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f4:	461a      	mov	r2, r3
 80012f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	3301      	adds	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001304:	085b      	lsrs	r3, r3, #1
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130a:	2b00      	cmp	r3, #0
 800130c:	f47f af62 	bne.w	80011d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 ff3b 	bl	8004190 <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001324:	f040 80db 	bne.w	80014de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f002 ff5c 	bl	80041ea <USB_ReadDevAllInEpInterrupt>
 8001332:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001338:	e0cd      	b.n	80014d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80c2 	beq.w	80014ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f002 ff82 	bl	800425a <USB_ReadDevInEPInterrupt>
 8001356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d057      	beq.n	8001412 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	2201      	movs	r2, #1
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	43db      	mvns	r3, r3
 800137c:	69f9      	ldr	r1, [r7, #28]
 800137e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001382:	4013      	ands	r3, r2
 8001384:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	4413      	add	r3, r2
 800138e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001392:	461a      	mov	r2, r3
 8001394:	2301      	movs	r3, #1
 8001396:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d132      	bne.n	8001406 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013a0:	6879      	ldr	r1, [r7, #4]
 80013a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a4:	4613      	mov	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4413      	add	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	334c      	adds	r3, #76	; 0x4c
 80013b0:	6819      	ldr	r1, [r3, #0]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4403      	add	r3, r0
 80013c0:	3348      	adds	r3, #72	; 0x48
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4419      	add	r1, r3
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ca:	4613      	mov	r3, r2
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	4413      	add	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4403      	add	r3, r0
 80013d4:	334c      	adds	r3, #76	; 0x4c
 80013d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d113      	bne.n	8001406 <HAL_PCD_IRQHandler+0x3a2>
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3354      	adds	r3, #84	; 0x54
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d108      	bne.n	8001406 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013fe:	461a      	mov	r2, r3
 8001400:	2101      	movs	r1, #1
 8001402:	f002 ff89 	bl	8004318 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f005 f9f8 	bl	8006802 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001428:	461a      	mov	r2, r3
 800142a:	2308      	movs	r3, #8
 800142c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	4413      	add	r3, r2
 8001440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001444:	461a      	mov	r2, r3
 8001446:	2310      	movs	r3, #16
 8001448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001460:	461a      	mov	r2, r3
 8001462:	2340      	movs	r3, #64	; 0x40
 8001464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d023      	beq.n	80014b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001472:	6a38      	ldr	r0, [r7, #32]
 8001474:	f001 fe6a 	bl	800314c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	3338      	adds	r3, #56	; 0x38
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	3304      	adds	r3, #4
 800148a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	78db      	ldrb	r3, [r3, #3]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d108      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f005 fa45 	bl	8006930 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014b2:	461a      	mov	r2, r3
 80014b4:	2302      	movs	r3, #2
 80014b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 fcdb 	bl	8001e80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	3301      	adds	r3, #1
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	085b      	lsrs	r3, r3, #1
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f af2e 	bne.w	800133a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f002 fe54 	bl	8004190 <USB_ReadInterrupts>
 80014e8:	4603      	mov	r3, r0
 80014ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014f2:	d122      	bne.n	800153a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800150e:	2b01      	cmp	r3, #1
 8001510:	d108      	bne.n	8001524 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fec3 	bl	80022a8 <HAL_PCDEx_LPM_Callback>
 8001522:	e002      	b.n	800152a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f005 f9e3 	bl	80068f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fe26 	bl	8004190 <USB_ReadInterrupts>
 8001544:	4603      	mov	r3, r0
 8001546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800154e:	d112      	bne.n	8001576 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f005 f99f 	bl	80068a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001574:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fe08 	bl	8004190 <USB_ReadInterrupts>
 8001580:	4603      	mov	r3, r0
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158a:	f040 80b7 	bne.w	80016fc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	69fa      	ldr	r2, [r7, #28]
 8001598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2110      	movs	r1, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fdcf 	bl	800314c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b2:	e046      	b.n	8001642 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	015a      	lsls	r2, r3, #5
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c0:	461a      	mov	r2, r3
 80015c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d8:	0151      	lsls	r1, r2, #5
 80015da:	69fa      	ldr	r2, [r7, #28]
 80015dc:	440a      	add	r2, r1
 80015de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	015a      	lsls	r2, r3, #5
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	4413      	add	r3, r2
 80015f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015f4:	461a      	mov	r2, r3
 80015f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800160c:	0151      	lsls	r1, r2, #5
 800160e:	69fa      	ldr	r2, [r7, #28]
 8001610:	440a      	add	r2, r1
 8001612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800161a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	0151      	lsls	r1, r2, #5
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	440a      	add	r2, r1
 8001632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800163a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	3301      	adds	r3, #1
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001648:	429a      	cmp	r2, r3
 800164a:	d3b3      	bcc.n	80015b4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800165e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001664:	2b00      	cmp	r3, #0
 8001666:	d016      	beq.n	8001696 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001678:	f043 030b 	orr.w	r3, r3, #11
 800167c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001688:	69fa      	ldr	r2, [r7, #28]
 800168a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800168e:	f043 030b 	orr.w	r3, r3, #11
 8001692:	6453      	str	r3, [r2, #68]	; 0x44
 8001694:	e015      	b.n	80016c2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016bc:	f043 030b 	orr.w	r3, r3, #11
 80016c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69fa      	ldr	r2, [r7, #28]
 80016cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016e6:	461a      	mov	r2, r3
 80016e8:	f002 fe16 	bl	8004318 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f002 fd45 	bl	8004190 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001710:	d124      	bne.n	800175c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f002 fddb 	bl	80042d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fd90 	bl	8003246 <USB_GetDevSpeed>
 8001726:	4603      	mov	r3, r0
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681c      	ldr	r4, [r3, #0]
 8001732:	f001 fa29 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8001736:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4620      	mov	r0, r4
 8001742:	f001 fa8f 	bl	8002c64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f005 f883 	bl	8006852 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800175a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 fd15 	bl	8004190 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b08      	cmp	r3, #8
 800176e:	d10a      	bne.n	8001786 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f005 f860 	bl	8006836 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	695a      	ldr	r2, [r3, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f002 0208 	and.w	r2, r2, #8
 8001784:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fd00 	bl	8004190 <USB_ReadInterrupts>
 8001790:	4603      	mov	r3, r0
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	2b80      	cmp	r3, #128	; 0x80
 8001798:	d122      	bne.n	80017e0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e014      	b.n	80017d6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b0:	4613      	mov	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d105      	bne.n	80017d0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fb27 	bl	8001e1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	3301      	adds	r3, #1
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3e5      	bcc.n	80017ac <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 fcd3 	bl	8004190 <USB_ReadInterrupts>
 80017ea:	4603      	mov	r3, r0
 80017ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f4:	d13b      	bne.n	800186e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017f6:	2301      	movs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
 80017fa:	e02b      	b.n	8001854 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	015a      	lsls	r2, r3, #5
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	4413      	add	r3, r2
 8001804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	4613      	mov	r3, r2
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3340      	adds	r3, #64	; 0x40
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d115      	bne.n	800184e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001822:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001824:	2b00      	cmp	r3, #0
 8001826:	da12      	bge.n	800184e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	333f      	adds	r3, #63	; 0x3f
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 fae8 	bl	8001e1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	3301      	adds	r3, #1
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185a:	429a      	cmp	r2, r3
 800185c:	d3ce      	bcc.n	80017fc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800186c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f002 fc8c 	bl	8004190 <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001882:	d155      	bne.n	8001930 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001884:	2301      	movs	r3, #1
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
 8001888:	e045      	b.n	8001916 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	015a      	lsls	r2, r3, #5
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	4413      	add	r3, r2
 8001892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189e:	4613      	mov	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d12e      	bne.n	8001910 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da2b      	bge.n	8001910 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80018c4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80018e2:	6a3b      	ldr	r3, [r7, #32]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80018ea:	6a3b      	ldr	r3, [r7, #32]
 80018ec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6053      	str	r3, [r2, #4]
            break;
 800190e:	e007      	b.n	8001920 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	3301      	adds	r3, #1
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191c:	429a      	cmp	r2, r3
 800191e:	d3b4      	bcc.n	800188a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800192e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 fc2b 	bl	8004190 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001944:	d10a      	bne.n	800195c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f005 f804 	bl	8006954 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800195a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fc15 	bl	8004190 <USB_ReadInterrupts>
 8001966:	4603      	mov	r3, r0
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d115      	bne.n	800199c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f004 fff4 	bl	8006970 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	e000      	b.n	800199c <HAL_PCD_IRQHandler+0x938>
      return;
 800199a:	bf00      	nop
    }
  }
}
 800199c:	3734      	adds	r7, #52	; 0x34
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}

080019a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_PCD_SetAddress+0x1a>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e013      	b.n	80019e4 <HAL_PCD_SetAddress+0x42>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fb73 	bl	80040c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	4608      	mov	r0, r1
 80019f6:	4611      	mov	r1, r2
 80019f8:	461a      	mov	r2, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	70fb      	strb	r3, [r7, #3]
 80019fe:	460b      	mov	r3, r1
 8001a00:	803b      	strh	r3, [r7, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da0f      	bge.n	8001a32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	f003 020f 	and.w	r2, r3, #15
 8001a18:	4613      	mov	r3, r2
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	3338      	adds	r3, #56	; 0x38
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	705a      	strb	r2, [r3, #1]
 8001a30:	e00f      	b.n	8001a52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 020f 	and.w	r2, r3, #15
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	3304      	adds	r3, #4
 8001a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 030f 	and.w	r3, r3, #15
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a5e:	883a      	ldrh	r2, [r7, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	78ba      	ldrb	r2, [r7, #2]
 8001a68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a7c:	78bb      	ldrb	r3, [r7, #2]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_PCD_EP_Open+0xaa>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e00e      	b.n	8001ab4 <HAL_PCD_EP_Open+0xc8>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f001 fbf3 	bl	8003290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	da0f      	bge.n	8001af0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	f003 020f 	and.w	r2, r3, #15
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	4413      	add	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	3338      	adds	r3, #56	; 0x38
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	705a      	strb	r2, [r3, #1]
 8001aee:	e00f      	b.n	8001b10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	f003 020f 	and.w	r2, r3, #15
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	3304      	adds	r3, #4
 8001b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_PCD_EP_Close+0x6e>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e00e      	b.n	8001b48 <HAL_PCD_EP_Close+0x8c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 fc31 	bl	80033a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b60:	7afb      	ldrb	r3, [r7, #11]
 8001b62:	f003 020f 	and.w	r2, r3, #15
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bac:	7afb      	ldrb	r3, [r7, #11]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	6979      	ldr	r1, [r7, #20]
 8001bc4:	f001 ff10 	bl	80039e8 <USB_EP0StartXfer>
 8001bc8:	e008      	b.n	8001bdc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	6979      	ldr	r1, [r7, #20]
 8001bd8:	f001 fcbe 	bl	8003558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bf2:	78fb      	ldrb	r3, [r7, #3]
 8001bf4:	f003 020f 	and.w	r2, r3, #15
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001c08:	681b      	ldr	r3, [r3, #0]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	60f8      	str	r0, [r7, #12]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	460b      	mov	r3, r1
 8001c24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3338      	adds	r3, #56	; 0x38
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	3304      	adds	r3, #4
 8001c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2201      	movs	r2, #1
 8001c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d102      	bne.n	8001c70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c70:	7afb      	ldrb	r3, [r7, #11]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	f001 feae 	bl	80039e8 <USB_EP0StartXfer>
 8001c8c:	e008      	b.n	8001ca0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	f001 fc5c 	bl	8003558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d901      	bls.n	8001cc8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e050      	b.n	8001d6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	da0f      	bge.n	8001cf0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3338      	adds	r3, #56	; 0x38
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	705a      	strb	r2, [r3, #1]
 8001cee:	e00d      	b.n	8001d0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf0:	78fa      	ldrb	r2, [r7, #3]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	3304      	adds	r3, #4
 8001d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_PCD_EP_SetStall+0x82>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e01e      	b.n	8001d6a <HAL_PCD_EP_SetStall+0xc0>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f002 f8ec 	bl	8003f18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f002 fadc 	bl	8004318 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	f003 020f 	and.w	r2, r3, #15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d901      	bls.n	8001d90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e042      	b.n	8001e16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0f      	bge.n	8001db8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3338      	adds	r3, #56	; 0x38
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	705a      	strb	r2, [r3, #1]
 8001db6:	e00f      	b.n	8001dd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 030f 	and.w	r3, r3, #15
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_PCD_EP_ClrStall+0x86>
 8001df4:	2302      	movs	r3, #2
 8001df6:	e00e      	b.n	8001e16 <HAL_PCD_EP_ClrStall+0xa4>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68f9      	ldr	r1, [r7, #12]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f002 f8f4 	bl	8003ff4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0c      	bge.n	8001e4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 020f 	and.w	r2, r3, #15
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	3338      	adds	r3, #56	; 0x38
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	3304      	adds	r3, #4
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e00c      	b.n	8001e66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 020f 	and.w	r2, r3, #15
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68f9      	ldr	r1, [r7, #12]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 ff13 	bl	8003c98 <USB_EPStopXfer>
 8001e72:	4603      	mov	r3, r0
 8001e74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001e76:	7afb      	ldrb	r3, [r7, #11]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	; 0x28
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3338      	adds	r3, #56	; 0x38
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a1a      	ldr	r2, [r3, #32]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d901      	bls.n	8001eb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e06c      	b.n	8001f92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	699a      	ldr	r2, [r3, #24]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d902      	bls.n	8001ed4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	3303      	adds	r3, #3
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001edc:	e02b      	b.n	8001f36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d902      	bls.n	8001efa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3303      	adds	r3, #3
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6919      	ldr	r1, [r3, #16]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4603      	mov	r3, r0
 8001f18:	6978      	ldr	r0, [r7, #20]
 8001f1a:	f001 ff67 	bl	8003dec <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	441a      	add	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	441a      	add	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	015a      	lsls	r2, r3, #5
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d809      	bhi.n	8001f60 <PCD_WriteEmptyTxFifo+0xe0>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6a1a      	ldr	r2, [r3, #32]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d203      	bcs.n	8001f60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1be      	bne.n	8001ede <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d811      	bhi.n	8001f90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	2201      	movs	r2, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	6939      	ldr	r1, [r7, #16]
 8001f88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	333c      	adds	r3, #60	; 0x3c
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d17b      	bne.n	80020ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d015      	beq.n	8002008 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4a61      	ldr	r2, [pc, #388]	; (8002164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	f240 80b9 	bls.w	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80b3 	beq.w	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002004:	6093      	str	r3, [r2, #8]
 8002006:	e0a7      	b.n	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	2320      	movs	r3, #32
 8002022:	6093      	str	r3, [r2, #8]
 8002024:	e098      	b.n	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 8093 	bne.w	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d90f      	bls.n	800205a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	015a      	lsls	r2, r3, #5
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4413      	add	r3, r2
 800204c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002050:	461a      	mov	r2, r3
 8002052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002056:	6093      	str	r3, [r2, #8]
 8002058:	e07e      	b.n	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	69da      	ldr	r2, [r3, #28]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	0159      	lsls	r1, r3, #5
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	440b      	add	r3, r1
 800207c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	1ad2      	subs	r2, r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d114      	bne.n	80020bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6818      	ldr	r0, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020a4:	461a      	mov	r2, r3
 80020a6:	2101      	movs	r1, #1
 80020a8:	f002 f936 	bl	8004318 <USB_EP0_OutStart>
 80020ac:	e006      	b.n	80020bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	441a      	add	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f004 fb82 	bl	80067cc <HAL_PCD_DataOutStageCallback>
 80020c8:	e046      	b.n	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	4a26      	ldr	r2, [pc, #152]	; (8002168 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d124      	bne.n	800211c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	015a      	lsls	r2, r3, #5
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e8:	461a      	mov	r2, r3
 80020ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ee:	6093      	str	r3, [r2, #8]
 80020f0:	e032      	b.n	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002108:	461a      	mov	r2, r3
 800210a:	2320      	movs	r3, #32
 800210c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4619      	mov	r1, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f004 fb59 	bl	80067cc <HAL_PCD_DataOutStageCallback>
 800211a:	e01d      	b.n	8002158 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d114      	bne.n	800214c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d108      	bne.n	800214c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002144:	461a      	mov	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	f002 f8e6 	bl	8004318 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	4619      	mov	r1, r3
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f004 fb3a 	bl	80067cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	4f54300a 	.word	0x4f54300a
 8002168:	4f54310a 	.word	0x4f54310a

0800216c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	333c      	adds	r3, #60	; 0x3c
 8002184:	3304      	adds	r3, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d90e      	bls.n	80021c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b8:	461a      	mov	r2, r3
 80021ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f004 faf1 	bl	80067a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d90c      	bls.n	80021e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021e0:	461a      	mov	r2, r3
 80021e2:	2101      	movs	r1, #1
 80021e4:	f002 f898 	bl	8004318 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	4f54300a 	.word	0x4f54300a

080021f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
 8002204:	4613      	mov	r3, r2
 8002206:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d107      	bne.n	8002226 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002216:	883b      	ldrh	r3, [r7, #0]
 8002218:	0419      	lsls	r1, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	430a      	orrs	r2, r1
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
 8002224:	e028      	b.n	8002278 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	0c1b      	lsrs	r3, r3, #16
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	4413      	add	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e00d      	b.n	8002256 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	3340      	adds	r3, #64	; 0x40
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	0c1b      	lsrs	r3, r3, #16
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	3301      	adds	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	3b01      	subs	r3, #1
 800225c:	429a      	cmp	r2, r3
 800225e:	d3ec      	bcc.n	800223a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002260:	883b      	ldrh	r3, [r7, #0]
 8002262:	0418      	lsls	r0, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	3b01      	subs	r3, #1
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	4302      	orrs	r2, r0
 8002270:	3340      	adds	r3, #64	; 0x40
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e267      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d075      	beq.n	80023ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022de:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d00c      	beq.n	8002304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ea:	4b85      	ldr	r3, [pc, #532]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d112      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f6:	4b82      	ldr	r3, [pc, #520]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d10b      	bne.n	800231c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002304:	4b7e      	ldr	r3, [pc, #504]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d05b      	beq.n	80023c8 <HAL_RCC_OscConfig+0x108>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d157      	bne.n	80023c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e242      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002324:	d106      	bne.n	8002334 <HAL_RCC_OscConfig+0x74>
 8002326:	4b76      	ldr	r3, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b70      	ldr	r3, [pc, #448]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6f      	ldr	r2, [pc, #444]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b6d      	ldr	r3, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a6c      	ldr	r2, [pc, #432]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xb0>
 8002358:	4b69      	ldr	r3, [pc, #420]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a68      	ldr	r2, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a65      	ldr	r2, [pc, #404]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7fe fa46 	bl	8000808 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fa42 	bl	8000808 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e207      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xc0>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe fa32 	bl	8000808 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fa2e 	bl	8000808 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1f3      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b51      	ldr	r3, [pc, #324]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0xe8>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d063      	beq.n	800249e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b47      	ldr	r3, [pc, #284]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ee:	4b44      	ldr	r3, [pc, #272]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b41      	ldr	r3, [pc, #260]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1c7      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4937      	ldr	r1, [pc, #220]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e03a      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d020      	beq.n	8002472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b34      	ldr	r3, [pc, #208]	; (8002504 <HAL_RCC_OscConfig+0x244>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe f9e7 	bl	8000808 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243e:	f7fe f9e3 	bl	8000808 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e1a8      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	4b2b      	ldr	r3, [pc, #172]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4925      	ldr	r1, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_OscConfig+0x244>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fe f9c6 	bl	8000808 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002480:	f7fe f9c2 	bl	8000808 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b02      	cmp	r3, #2
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e187      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d036      	beq.n	8002518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <HAL_RCC_OscConfig+0x248>)
 80024b4:	2201      	movs	r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b8:	f7fe f9a6 	bl	8000808 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024c0:	f7fe f9a2 	bl	8000808 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e167      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_RCC_OscConfig+0x240>)
 80024d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x200>
 80024de:	e01b      	b.n	8002518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_OscConfig+0x248>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e6:	f7fe f98f 	bl	8000808 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ec:	e00e      	b.n	800250c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe f98b 	bl	8000808 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d907      	bls.n	800250c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e150      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
 8002500:	40023800 	.word	0x40023800
 8002504:	42470000 	.word	0x42470000
 8002508:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250c:	4b88      	ldr	r3, [pc, #544]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ea      	bne.n	80024ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8097 	beq.w	8002654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a7c      	ldr	r2, [pc, #496]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b7a      	ldr	r3, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b77      	ldr	r3, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b74      	ldr	r3, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a73      	ldr	r2, [pc, #460]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe f94b 	bl	8000808 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe f947 	bl	8000808 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e10c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCC_OscConfig+0x474>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x2ea>
 800259c:	4b64      	ldr	r3, [pc, #400]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a63      	ldr	r2, [pc, #396]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	e01c      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x30c>
 80025b2:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	4a5e      	ldr	r2, [pc, #376]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6713      	str	r3, [r2, #112]	; 0x70
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c2:	4a5b      	ldr	r2, [pc, #364]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ca:	e00b      	b.n	80025e4 <HAL_RCC_OscConfig+0x324>
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a57      	ldr	r2, [pc, #348]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	4b55      	ldr	r3, [pc, #340]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a54      	ldr	r2, [pc, #336]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe f90c 	bl	8000808 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f2:	e00a      	b.n	800260a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f4:	f7fe f908 	bl	8000808 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002602:	4293      	cmp	r3, r2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0cb      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800260c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ee      	beq.n	80025f4 <HAL_RCC_OscConfig+0x334>
 8002616:	e014      	b.n	8002642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe f8f6 	bl	8000808 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe f8f2 	bl	8000808 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0b5      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ee      	bne.n	8002620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d105      	bne.n	8002654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 800264e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002652:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 80a1 	beq.w	80027a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b08      	cmp	r3, #8
 8002668:	d05c      	beq.n	8002724 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d141      	bne.n	80026f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe f8c6 	bl	8000808 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe f8c2 	bl	8000808 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e087      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	4b27      	ldr	r3, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69da      	ldr	r2, [r3, #28]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	061b      	lsls	r3, r3, #24
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe f89b 	bl	8000808 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe f897 	bl	8000808 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e05c      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x416>
 80026f4:	e054      	b.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_RCC_OscConfig+0x478>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe f884 	bl	8000808 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002704:	f7fe f880 	bl	8000808 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e045      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_RCC_OscConfig+0x470>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x444>
 8002722:	e03d      	b.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d107      	bne.n	800273c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e038      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
 8002738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x4ec>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d028      	beq.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d121      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d11a      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800276c:	4013      	ands	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002774:	4293      	cmp	r3, r2
 8002776:	d111      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	085b      	lsrs	r3, r3, #1
 8002784:	3b01      	subs	r3, #1
 8002786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0cc      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d90c      	bls.n	80027ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d2:	4b65      	ldr	r3, [pc, #404]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b63      	ldr	r3, [pc, #396]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0b8      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002804:	4b59      	ldr	r3, [pc, #356]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002828:	4b50      	ldr	r3, [pc, #320]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	494d      	ldr	r1, [pc, #308]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	4313      	orrs	r3, r2
 8002838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d044      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	4b47      	ldr	r3, [pc, #284]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d119      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e07f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d003      	beq.n	800286e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800286a:	2b03      	cmp	r3, #3
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e06f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287e:	4b3b      	ldr	r3, [pc, #236]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e067      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0203 	bic.w	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4934      	ldr	r1, [pc, #208]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028a0:	f7fd ffb2 	bl	8000808 <HAL_GetTick>
 80028a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	e00a      	b.n	80028be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a8:	f7fd ffae 	bl	8000808 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e04f      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	4b2b      	ldr	r3, [pc, #172]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 020c 	and.w	r2, r3, #12
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1eb      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d20c      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e032      	b.n	800295e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002904:	4b19      	ldr	r3, [pc, #100]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4916      	ldr	r1, [pc, #88]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	4313      	orrs	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b00      	cmp	r3, #0
 8002920:	d009      	beq.n	8002936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	490e      	ldr	r1, [pc, #56]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002936:	f000 f821 	bl	800297c <HAL_RCC_GetSysClockFreq>
 800293a:	4602      	mov	r2, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	490a      	ldr	r1, [pc, #40]	; (8002970 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	5ccb      	ldrb	r3, [r1, r3]
 800294a:	fa22 f303 	lsr.w	r3, r2, r3
 800294e:	4a09      	ldr	r2, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1c8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd ff12 	bl	8000780 <HAL_InitTick>

  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40023c00 	.word	0x40023c00
 800296c:	40023800 	.word	0x40023800
 8002970:	08006de0 	.word	0x08006de0
 8002974:	20000000 	.word	0x20000000
 8002978:	20000004 	.word	0x20000004

0800297c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b094      	sub	sp, #80	; 0x50
 8002982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	647b      	str	r3, [r7, #68]	; 0x44
 8002988:	2300      	movs	r3, #0
 800298a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800298c:	2300      	movs	r3, #0
 800298e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002994:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 030c 	and.w	r3, r3, #12
 800299c:	2b08      	cmp	r3, #8
 800299e:	d00d      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x40>
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	f200 80e1 	bhi.w	8002b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x34>
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d003      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ae:	e0db      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b0:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029b4:	e0db      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80029b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ba:	e0d8      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029bc:	4b6f      	ldr	r3, [pc, #444]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d063      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d2:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	099b      	lsrs	r3, r3, #6
 80029d8:	2200      	movs	r2, #0
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
 80029dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	633b      	str	r3, [r7, #48]	; 0x30
 80029e6:	2300      	movs	r3, #0
 80029e8:	637b      	str	r3, [r7, #52]	; 0x34
 80029ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029ee:	4622      	mov	r2, r4
 80029f0:	462b      	mov	r3, r5
 80029f2:	f04f 0000 	mov.w	r0, #0
 80029f6:	f04f 0100 	mov.w	r1, #0
 80029fa:	0159      	lsls	r1, r3, #5
 80029fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a00:	0150      	lsls	r0, r2, #5
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4621      	mov	r1, r4
 8002a08:	1a51      	subs	r1, r2, r1
 8002a0a:	6139      	str	r1, [r7, #16]
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a20:	4659      	mov	r1, fp
 8002a22:	018b      	lsls	r3, r1, #6
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	018a      	lsls	r2, r1, #6
 8002a2e:	4651      	mov	r1, sl
 8002a30:	ebb2 0801 	subs.w	r8, r2, r1
 8002a34:	4659      	mov	r1, fp
 8002a36:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	4623      	mov	r3, r4
 8002a54:	eb18 0303 	adds.w	r3, r8, r3
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	eb49 0303 	adc.w	r3, r9, r3
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	024b      	lsls	r3, r1, #9
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a78:	4621      	mov	r1, r4
 8002a7a:	024a      	lsls	r2, r1, #9
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a82:	2200      	movs	r2, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a8c:	f7fd fb9c 	bl	80001c8 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a98:	e058      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aaa:	623b      	str	r3, [r7, #32]
 8002aac:	2300      	movs	r3, #0
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab4:	4642      	mov	r2, r8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0159      	lsls	r1, r3, #5
 8002ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac6:	0150      	lsls	r0, r2, #5
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4641      	mov	r1, r8
 8002ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aec:	ebb2 040a 	subs.w	r4, r2, sl
 8002af0:	eb63 050b 	sbc.w	r5, r3, fp
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	00eb      	lsls	r3, r5, #3
 8002afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b02:	00e2      	lsls	r2, r4, #3
 8002b04:	4614      	mov	r4, r2
 8002b06:	461d      	mov	r5, r3
 8002b08:	4643      	mov	r3, r8
 8002b0a:	18e3      	adds	r3, r4, r3
 8002b0c:	603b      	str	r3, [r7, #0]
 8002b0e:	464b      	mov	r3, r9
 8002b10:	eb45 0303 	adc.w	r3, r5, r3
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b22:	4629      	mov	r1, r5
 8002b24:	028b      	lsls	r3, r1, #10
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	028a      	lsls	r2, r1, #10
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	61fa      	str	r2, [r7, #28]
 8002b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b40:	f7fd fb42 	bl	80001c8 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3750      	adds	r7, #80	; 0x50
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	007a1200 	.word	0x007a1200

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	f107 001c 	add.w	r0, r7, #28
 8002bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d122      	bne.n	8002bfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f001 fbee 	bl	80043d4 <USB_CoreReset>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	e01a      	b.n	8002c34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f001 fbe2 	bl	80043d4 <USB_CoreReset>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
 8002c26:	e005      	b.n	8002c34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d10b      	bne.n	8002c52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f043 0206 	orr.w	r2, r3, #6
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c5e:	b004      	add	sp, #16
 8002c60:	4770      	bx	lr
	...

08002c64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d165      	bne.n	8002d44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4a41      	ldr	r2, [pc, #260]	; (8002d80 <USB_SetTurnaroundTime+0x11c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d906      	bls.n	8002c8e <USB_SetTurnaroundTime+0x2a>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <USB_SetTurnaroundTime+0x120>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d202      	bcs.n	8002c8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002c88:	230f      	movs	r3, #15
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e062      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4a3c      	ldr	r2, [pc, #240]	; (8002d84 <USB_SetTurnaroundTime+0x120>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d306      	bcc.n	8002ca4 <USB_SetTurnaroundTime+0x40>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4a3b      	ldr	r2, [pc, #236]	; (8002d88 <USB_SetTurnaroundTime+0x124>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d202      	bcs.n	8002ca4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c9e:	230e      	movs	r3, #14
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e057      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4a38      	ldr	r2, [pc, #224]	; (8002d88 <USB_SetTurnaroundTime+0x124>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d306      	bcc.n	8002cba <USB_SetTurnaroundTime+0x56>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <USB_SetTurnaroundTime+0x128>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d202      	bcs.n	8002cba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002cb4:	230d      	movs	r3, #13
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e04c      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4a33      	ldr	r2, [pc, #204]	; (8002d8c <USB_SetTurnaroundTime+0x128>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d306      	bcc.n	8002cd0 <USB_SetTurnaroundTime+0x6c>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4a32      	ldr	r2, [pc, #200]	; (8002d90 <USB_SetTurnaroundTime+0x12c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d802      	bhi.n	8002cd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002cca:	230c      	movs	r3, #12
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	e041      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <USB_SetTurnaroundTime+0x12c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d906      	bls.n	8002ce6 <USB_SetTurnaroundTime+0x82>
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4a2e      	ldr	r2, [pc, #184]	; (8002d94 <USB_SetTurnaroundTime+0x130>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d802      	bhi.n	8002ce6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ce0:	230b      	movs	r3, #11
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e036      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <USB_SetTurnaroundTime+0x130>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d906      	bls.n	8002cfc <USB_SetTurnaroundTime+0x98>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <USB_SetTurnaroundTime+0x134>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d802      	bhi.n	8002cfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002cf6:	230a      	movs	r3, #10
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	e02b      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4a26      	ldr	r2, [pc, #152]	; (8002d98 <USB_SetTurnaroundTime+0x134>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d906      	bls.n	8002d12 <USB_SetTurnaroundTime+0xae>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a25      	ldr	r2, [pc, #148]	; (8002d9c <USB_SetTurnaroundTime+0x138>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d202      	bcs.n	8002d12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d0c:	2309      	movs	r3, #9
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e020      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <USB_SetTurnaroundTime+0x138>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d306      	bcc.n	8002d28 <USB_SetTurnaroundTime+0xc4>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	; (8002da0 <USB_SetTurnaroundTime+0x13c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002d22:	2308      	movs	r3, #8
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e015      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <USB_SetTurnaroundTime+0x13c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d906      	bls.n	8002d3e <USB_SetTurnaroundTime+0xda>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <USB_SetTurnaroundTime+0x140>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d202      	bcs.n	8002d3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002d38:	2307      	movs	r3, #7
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e00a      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002d3e:	2306      	movs	r3, #6
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e007      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002d4a:	2309      	movs	r3, #9
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e001      	b.n	8002d54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002d50:	2309      	movs	r3, #9
 8002d52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	029b      	lsls	r3, r3, #10
 8002d68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	00d8acbf 	.word	0x00d8acbf
 8002d84:	00e4e1c0 	.word	0x00e4e1c0
 8002d88:	00f42400 	.word	0x00f42400
 8002d8c:	01067380 	.word	0x01067380
 8002d90:	011a499f 	.word	0x011a499f
 8002d94:	01312cff 	.word	0x01312cff
 8002d98:	014ca43f 	.word	0x014ca43f
 8002d9c:	016e3600 	.word	0x016e3600
 8002da0:	01a6ab1f 	.word	0x01a6ab1f
 8002da4:	01e84800 	.word	0x01e84800

08002da8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f023 0201 	bic.w	r2, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d115      	bne.n	8002e3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7fd fd00 	bl	8000820 <HAL_Delay>
      ms++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3301      	adds	r3, #1
 8002e24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f001 fa45 	bl	80042b6 <USB_GetMode>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d01e      	beq.n	8002e70 <USB_SetCurrentMode+0x84>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b31      	cmp	r3, #49	; 0x31
 8002e36:	d9f0      	bls.n	8002e1a <USB_SetCurrentMode+0x2e>
 8002e38:	e01a      	b.n	8002e70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d115      	bne.n	8002e6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f7fd fce7 	bl	8000820 <HAL_Delay>
      ms++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f001 fa2c 	bl	80042b6 <USB_GetMode>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <USB_SetCurrentMode+0x84>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b31      	cmp	r3, #49	; 0x31
 8002e68:	d9f0      	bls.n	8002e4c <USB_SetCurrentMode+0x60>
 8002e6a:	e001      	b.n	8002e70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e005      	b.n	8002e7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b32      	cmp	r3, #50	; 0x32
 8002e74:	d101      	bne.n	8002e7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e84:	b084      	sub	sp, #16
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e009      	b.n	8002eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	3340      	adds	r3, #64	; 0x40
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	2200      	movs	r2, #0
 8002eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b0e      	cmp	r3, #14
 8002ebc:	d9f2      	bls.n	8002ea4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d11c      	bne.n	8002efe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
 8002efc:	e00b      	b.n	8002f16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2300      	movs	r3, #0
 8002f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f28:	4619      	mov	r1, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f30:	461a      	mov	r2, r3
 8002f32:	680b      	ldr	r3, [r1, #0]
 8002f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d10c      	bne.n	8002f56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d104      	bne.n	8002f4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f42:	2100      	movs	r1, #0
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f965 	bl	8003214 <USB_SetDevSpeed>
 8002f4a:	e008      	b.n	8002f5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f960 	bl	8003214 <USB_SetDevSpeed>
 8002f54:	e003      	b.n	8002f5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f56:	2103      	movs	r1, #3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f95b 	bl	8003214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f5e:	2110      	movs	r1, #16
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f8f3 	bl	800314c <USB_FlushTxFifo>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f91f 	bl	80031b4 <USB_FlushRxFifo>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	461a      	mov	r2, r3
 8002f88:	2300      	movs	r3, #0
 8002f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e043      	b.n	8003032 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc0:	d118      	bne.n	8002ff4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fda:	6013      	str	r3, [r2, #0]
 8002fdc:	e013      	b.n	8003006 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	015a      	lsls	r2, r3, #5
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fea:	461a      	mov	r2, r3
 8002fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e008      	b.n	8003006 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003000:	461a      	mov	r2, r3
 8003002:	2300      	movs	r3, #0
 8003004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	015a      	lsls	r2, r3, #5
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4413      	add	r3, r2
 800300e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003012:	461a      	mov	r2, r3
 8003014:	2300      	movs	r3, #0
 8003016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003024:	461a      	mov	r2, r3
 8003026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800302a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	3301      	adds	r3, #1
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	429a      	cmp	r2, r3
 8003038:	d3b7      	bcc.n	8002faa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e043      	b.n	80030c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003056:	d118      	bne.n	800308a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	e013      	b.n	800309c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	461a      	mov	r2, r3
 8003082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e008      	b.n	800309c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a8:	461a      	mov	r2, r3
 80030aa:	2300      	movs	r3, #0
 80030ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	461a      	mov	r2, r3
 80030bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	3301      	adds	r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3b7      	bcc.n	8003040 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f043 0210 	orr.w	r2, r3, #16
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <USB_DevInit+0x2c4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f043 0208 	orr.w	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d107      	bne.n	8003138 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003138:	7dfb      	ldrb	r3, [r7, #23]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003144:	b004      	add	sp, #16
 8003146:	4770      	bx	lr
 8003148:	803c3800 	.word	0x803c3800

0800314c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3301      	adds	r3, #1
 800315e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <USB_FlushTxFifo+0x64>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e01b      	b.n	80031a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	daf2      	bge.n	800315a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	019b      	lsls	r3, r3, #6
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3301      	adds	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a08      	ldr	r2, [pc, #32]	; (80031b0 <USB_FlushTxFifo+0x64>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e006      	b.n	80031a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d0f0      	beq.n	8003184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	00030d40 	.word	0x00030d40

080031b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <USB_FlushRxFifo+0x5c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e018      	b.n	8003204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	daf2      	bge.n	80031c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2210      	movs	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a08      	ldr	r2, [pc, #32]	; (8003210 <USB_FlushRxFifo+0x5c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e006      	b.n	8003204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d0f0      	beq.n	80031e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	00030d40 	.word	0x00030d40

08003214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	68f9      	ldr	r1, [r7, #12]
 8003230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 0306 	and.w	r3, r3, #6
 800325e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]
 800326a:	e00a      	b.n	8003282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d002      	beq.n	8003278 <USB_GetDevSpeed+0x32>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b06      	cmp	r3, #6
 8003276:	d102      	bne.n	800327e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003278:	2302      	movs	r3, #2
 800327a:	75fb      	strb	r3, [r7, #23]
 800327c:	e001      	b.n	8003282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800327e:	230f      	movs	r3, #15
 8003280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003282:	7dfb      	ldrb	r3, [r7, #23]
}
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d13a      	bne.n	8003322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	2101      	movs	r1, #1
 80032be:	fa01 f303 	lsl.w	r3, r1, r3
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	68f9      	ldr	r1, [r7, #12]
 80032c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d155      	bne.n	8003390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	791b      	ldrb	r3, [r3, #4]
 80032fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	059b      	lsls	r3, r3, #22
 8003306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003308:	4313      	orrs	r3, r2
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	0151      	lsls	r1, r2, #5
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	440a      	add	r2, r1
 8003312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	6013      	str	r3, [r2, #0]
 8003320:	e036      	b.n	8003390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003328:	69da      	ldr	r2, [r3, #28]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	2101      	movs	r1, #1
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	041b      	lsls	r3, r3, #16
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003340:	4313      	orrs	r3, r2
 8003342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11a      	bne.n	8003390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	791b      	ldrb	r3, [r3, #4]
 8003374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003376:	430b      	orrs	r3, r1
 8003378:	4313      	orrs	r3, r2
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	440a      	add	r2, r1
 8003382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800338e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	785b      	ldrb	r3, [r3, #1]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d161      	bne.n	8003480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d2:	d11f      	bne.n	8003414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	0151      	lsls	r1, r2, #5
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	440a      	add	r2, r1
 80033ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	0151      	lsls	r1, r2, #5
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	440a      	add	r2, r1
 800340a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800340e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	68f9      	ldr	r1, [r7, #12]
 8003430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003434:	4013      	ands	r3, r2
 8003436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	2101      	movs	r1, #1
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	68f9      	ldr	r1, [r7, #12]
 8003454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003458:	4013      	ands	r3, r2
 800345a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	0159      	lsls	r1, r3, #5
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	440b      	add	r3, r1
 8003472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003476:	4619      	mov	r1, r3
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <USB_DeactivateEndpoint+0x1b0>)
 800347a:	4013      	ands	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
 800347e:	e060      	b.n	8003542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003496:	d11f      	bne.n	80034d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f003 030f 	and.w	r3, r3, #15
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	041b      	lsls	r3, r3, #16
 80034f0:	43db      	mvns	r3, r3
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034f8:	4013      	ands	r3, r2
 80034fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f003 030f 	and.w	r3, r3, #15
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	041b      	lsls	r3, r3, #16
 8003514:	43db      	mvns	r3, r3
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800351c:	4013      	ands	r3, r2
 800351e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	0159      	lsls	r1, r3, #5
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	440b      	add	r3, r1
 8003536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353a:	4619      	mov	r1, r3
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <USB_DeactivateEndpoint+0x1b4>)
 800353e:	4013      	ands	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	ec337800 	.word	0xec337800
 8003554:	eff37800 	.word	0xeff37800

08003558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08a      	sub	sp, #40	; 0x28
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	4613      	mov	r3, r2
 8003564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 815c 	bne.w	8003832 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d132      	bne.n	80035e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	440a      	add	r2, r1
 8003598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800359c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80035a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80035a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	0151      	lsls	r1, r2, #5
 80035d8:	69fa      	ldr	r2, [r7, #28]
 80035da:	440a      	add	r2, r1
 80035dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035e0:	0cdb      	lsrs	r3, r3, #19
 80035e2:	04db      	lsls	r3, r3, #19
 80035e4:	6113      	str	r3, [r2, #16]
 80035e6:	e074      	b.n	80036d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003602:	0cdb      	lsrs	r3, r3, #19
 8003604:	04db      	lsls	r3, r3, #19
 8003606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	440a      	add	r2, r1
 800361e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800362a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003638:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6999      	ldr	r1, [r3, #24]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	440b      	add	r3, r1
 8003644:	1e59      	subs	r1, r3, #1
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	fbb1 f3f3 	udiv	r3, r1, r3
 800364e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003650:	4b9d      	ldr	r3, [pc, #628]	; (80038c8 <USB_EPStartXfer+0x370>)
 8003652:	400b      	ands	r3, r1
 8003654:	69b9      	ldr	r1, [r7, #24]
 8003656:	0148      	lsls	r0, r1, #5
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	4401      	add	r1, r0
 800365c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003660:	4313      	orrs	r3, r2
 8003662:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367a:	69b9      	ldr	r1, [r7, #24]
 800367c:	0148      	lsls	r0, r1, #5
 800367e:	69f9      	ldr	r1, [r7, #28]
 8003680:	4401      	add	r1, r0
 8003682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003686:	4313      	orrs	r3, r2
 8003688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	791b      	ldrb	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d11f      	bne.n	80036d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	0151      	lsls	r1, r2, #5
 80036a4:	69fa      	ldr	r2, [r7, #28]
 80036a6:	440a      	add	r2, r1
 80036a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	0151      	lsls	r1, r2, #5
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	440a      	add	r2, r1
 80036c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036d2:	79fb      	ldrb	r3, [r7, #7]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d14b      	bne.n	8003770 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	791b      	ldrb	r3, [r3, #4]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d128      	bne.n	800374e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d110      	bne.n	800372e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	0151      	lsls	r1, r2, #5
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	440a      	add	r2, r1
 8003722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e00f      	b.n	800374e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	0151      	lsls	r1, r2, #5
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	440a      	add	r2, r1
 8003744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	440a      	add	r2, r1
 8003764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e133      	b.n	80039d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	440a      	add	r2, r1
 8003786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800378a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800378e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	791b      	ldrb	r3, [r3, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d015      	beq.n	80037c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 811b 	beq.w	80039d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037be:	4313      	orrs	r3, r2
 80037c0:	634b      	str	r3, [r1, #52]	; 0x34
 80037c2:	e109      	b.n	80039d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d110      	bne.n	80037f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69ba      	ldr	r2, [r7, #24]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037f2:	6013      	str	r3, [r2, #0]
 80037f4:	e00f      	b.n	8003816 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	440a      	add	r2, r1
 800380c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003814:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6919      	ldr	r1, [r3, #16]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	781a      	ldrb	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	b298      	uxth	r0, r3
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fade 	bl	8003dec <USB_WritePacket>
 8003830:	e0d2      	b.n	80039d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800384c:	0cdb      	lsrs	r3, r3, #19
 800384e:	04db      	lsls	r3, r3, #19
 8003850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800386c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d126      	bne.n	80038cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003894:	69b9      	ldr	r1, [r7, #24]
 8003896:	0148      	lsls	r0, r1, #5
 8003898:	69f9      	ldr	r1, [r7, #28]
 800389a:	4401      	add	r1, r0
 800389c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038a0:	4313      	orrs	r3, r2
 80038a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038c2:	6113      	str	r3, [r2, #16]
 80038c4:	e03a      	b.n	800393c <USB_EPStartXfer+0x3e4>
 80038c6:	bf00      	nop
 80038c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	1e5a      	subs	r2, r3, #1
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	8afa      	ldrh	r2, [r7, #22]
 80038e8:	fb03 f202 	mul.w	r2, r3, r2
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	04d9      	lsls	r1, r3, #19
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <USB_EPStartXfer+0x48c>)
 8003904:	400b      	ands	r3, r1
 8003906:	69b9      	ldr	r1, [r7, #24]
 8003908:	0148      	lsls	r0, r1, #5
 800390a:	69f9      	ldr	r1, [r7, #28]
 800390c:	4401      	add	r1, r0
 800390e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	0148      	lsls	r0, r1, #5
 8003930:	69f9      	ldr	r1, [r7, #28]
 8003932:	4401      	add	r1, r0
 8003934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003938:	4313      	orrs	r3, r2
 800393a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10d      	bne.n	800395e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6919      	ldr	r1, [r3, #16]
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	460a      	mov	r2, r1
 800395c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	791b      	ldrb	r3, [r3, #4]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d128      	bne.n	80039b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d110      	bne.n	8003998 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	0151      	lsls	r1, r2, #5
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	440a      	add	r2, r1
 800398c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	e00f      	b.n	80039b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3720      	adds	r7, #32
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	1ff80000 	.word	0x1ff80000

080039e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	785b      	ldrb	r3, [r3, #1]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 80ce 	bne.w	8003ba6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d132      	bne.n	8003a78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	0151      	lsls	r1, r2, #5
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	440a      	add	r2, r1
 8003a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	0151      	lsls	r1, r2, #5
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	440a      	add	r2, r1
 8003a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	015a      	lsls	r2, r3, #5
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	0151      	lsls	r1, r2, #5
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	440a      	add	r2, r1
 8003a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a70:	0cdb      	lsrs	r3, r3, #19
 8003a72:	04db      	lsls	r3, r3, #19
 8003a74:	6113      	str	r3, [r2, #16]
 8003a76:	e04e      	b.n	8003b16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	0151      	lsls	r1, r2, #5
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a92:	0cdb      	lsrs	r3, r3, #19
 8003a94:	04db      	lsls	r3, r3, #19
 8003a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	0151      	lsls	r1, r2, #5
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	440a      	add	r2, r1
 8003aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003aba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	699a      	ldr	r2, [r3, #24]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d903      	bls.n	8003ad0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b06:	6939      	ldr	r1, [r7, #16]
 8003b08:	0148      	lsls	r0, r1, #5
 8003b0a:	6979      	ldr	r1, [r7, #20]
 8003b0c:	4401      	add	r1, r0
 8003b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d11e      	bne.n	8003b5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	461a      	mov	r2, r3
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e097      	b.n	8003c8a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	0151      	lsls	r1, r2, #5
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	440a      	add	r2, r1
 8003b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8083 	beq.w	8003c8a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	6979      	ldr	r1, [r7, #20]
 8003b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	634b      	str	r3, [r1, #52]	; 0x34
 8003ba4:	e071      	b.n	8003c8a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	0151      	lsls	r1, r2, #5
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	440a      	add	r2, r1
 8003bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bc0:	0cdb      	lsrs	r3, r3, #19
 8003bc2:	04db      	lsls	r3, r3, #19
 8003bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003be8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c38:	6939      	ldr	r1, [r7, #16]
 8003c3a:	0148      	lsls	r0, r1, #5
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	4401      	add	r1, r0
 8003c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c44:	4313      	orrs	r3, r2
 8003c46:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10d      	bne.n	8003c6a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	460a      	mov	r2, r1
 8003c68:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	371c      	adds	r7, #28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d14a      	bne.n	8003d4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cce:	f040 8086 	bne.w	8003dde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	7812      	ldrb	r2, [r2, #0]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	015a      	lsls	r2, r3, #5
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4413      	add	r3, r2
 8003d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	7812      	ldrb	r2, [r2, #0]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d902      	bls.n	8003d30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d2e:	e056      	b.n	8003dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d48:	d0e7      	beq.n	8003d1a <USB_EPStopXfer+0x82>
 8003d4a:	e048      	b.n	8003dde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d64:	d13b      	bne.n	8003dde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	015a      	lsls	r2, r3, #5
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4413      	add	r3, r2
 8003d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	0151      	lsls	r1, r2, #5
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	440a      	add	r2, r1
 8003da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	3301      	adds	r3, #1
 8003db2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d902      	bls.n	8003dc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8003dc2:	e00c      	b.n	8003dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ddc:	d0e7      	beq.n	8003dae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b089      	sub	sp, #36	; 0x24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	4611      	mov	r1, r2
 8003df8:	461a      	mov	r2, r3
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	71fb      	strb	r3, [r7, #7]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d123      	bne.n	8003e5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e12:	88bb      	ldrh	r3, [r7, #4]
 8003e14:	3303      	adds	r3, #3
 8003e16:	089b      	lsrs	r3, r3, #2
 8003e18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	e018      	b.n	8003e52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	031a      	lsls	r2, r3, #12
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4413      	add	r3, r2
 8003e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	3301      	adds	r3, #1
 8003e38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	3301      	adds	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d3e2      	bcc.n	8003e20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3724      	adds	r7, #36	; 0x24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b08b      	sub	sp, #44	; 0x2c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003e8e:	2300      	movs	r3, #0
 8003e90:	623b      	str	r3, [r7, #32]
 8003e92:	e014      	b.n	8003ebe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	3301      	adds	r3, #1
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	623b      	str	r3, [r7, #32]
 8003ebe:	6a3a      	ldr	r2, [r7, #32]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d3e6      	bcc.n	8003e94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003ec6:	8bfb      	ldrh	r3, [r7, #30]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01e      	beq.n	8003f0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f107 0310 	add.w	r3, r7, #16
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	701a      	strb	r2, [r3, #0]
      i++;
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	3301      	adds	r3, #1
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003efe:	8bfb      	ldrh	r3, [r7, #30]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f04:	8bfb      	ldrh	r3, [r7, #30]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1ea      	bne.n	8003ee0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	372c      	adds	r7, #44	; 0x2c
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	785b      	ldrb	r3, [r3, #1]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d12c      	bne.n	8003f8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	db12      	blt.n	8003f6c <USB_EPSetStall+0x54>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00f      	beq.n	8003f6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	0151      	lsls	r1, r2, #5
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	440a      	add	r2, r1
 8003f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	0151      	lsls	r1, r2, #5
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	440a      	add	r2, r1
 8003f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	e02b      	b.n	8003fe6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db12      	blt.n	8003fc6 <USB_EPSetStall+0xae>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00f      	beq.n	8003fc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	0151      	lsls	r1, r2, #5
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	440a      	add	r2, r1
 8003fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fe4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d128      	bne.n	8004062 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	015a      	lsls	r2, r3, #5
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	0151      	lsls	r1, r2, #5
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	440a      	add	r2, r1
 8004026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800402a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800402e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	791b      	ldrb	r3, [r3, #4]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d003      	beq.n	8004040 <USB_EPClearStall+0x4c>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	791b      	ldrb	r3, [r3, #4]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d138      	bne.n	80040b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	0151      	lsls	r1, r2, #5
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	440a      	add	r2, r1
 8004056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	e027      	b.n	80040b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800407c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	791b      	ldrb	r3, [r3, #4]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d003      	beq.n	8004092 <USB_EPClearStall+0x9e>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	791b      	ldrb	r3, [r3, #4]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d10f      	bne.n	80040b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	0151      	lsls	r1, r2, #5
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	440a      	add	r2, r1
 80040a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80040e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fa:	4313      	orrs	r3, r2
 80040fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413a:	f023 0302 	bic.w	r3, r3, #2
 800413e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417c:	f043 0302 	orr.w	r3, r3, #2
 8004180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041a8:	68fb      	ldr	r3, [r7, #12]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	4013      	ands	r3, r2
 80041d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	0c1b      	lsrs	r3, r3, #16
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	b29b      	uxth	r3, r3
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800424c:	68bb      	ldr	r3, [r7, #8]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800425a:	b480      	push	{r7}
 800425c:	b087      	sub	sp, #28
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800427c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	b2db      	uxtb	r3, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042a8:	68bb      	ldr	r3, [r7, #8]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0301 	and.w	r3, r3, #1
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b085      	sub	sp, #20
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042f0:	f023 0307 	bic.w	r3, r3, #7
 80042f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	460b      	mov	r3, r1
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	333c      	adds	r3, #60	; 0x3c
 800432e:	3304      	adds	r3, #4
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <USB_EP0_OutStart+0xb8>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d90a      	bls.n	8004352 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800434c:	d101      	bne.n	8004352 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e037      	b.n	80043c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800436c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004380:	f043 0318 	orr.w	r3, r3, #24
 8004384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004394:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004398:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800439a:	7afb      	ldrb	r3, [r7, #11]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10f      	bne.n	80043c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80043be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	371c      	adds	r7, #28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	4f54300a 	.word	0x4f54300a

080043d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a13      	ldr	r2, [pc, #76]	; (8004438 <USB_CoreReset+0x64>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e01b      	b.n	800442a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	daf2      	bge.n	80043e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f043 0201 	orr.w	r2, r3, #1
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3301      	adds	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <USB_CoreReset+0x64>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e006      	b.n	800442a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d0f0      	beq.n	800440a <USB_CoreReset+0x36>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	00030d40 	.word	0x00030d40

0800443c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004448:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800444c:	f002 fc28 	bl	8006ca0 <USBD_static_malloc>
 8004450:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	32b0      	adds	r2, #176	; 0xb0
 8004462:	2100      	movs	r1, #0
 8004464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004468:	2302      	movs	r3, #2
 800446a:	e0d4      	b.n	8004616 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800446c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004470:	2100      	movs	r1, #0
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f002 fc58 	bl	8006d28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	32b0      	adds	r2, #176	; 0xb0
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	32b0      	adds	r2, #176	; 0xb0
 8004492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7c1b      	ldrb	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d138      	bne.n	8004516 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80044a4:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <USBD_CDC_Init+0x1e4>)
 80044a6:	7819      	ldrb	r1, [r3, #0]
 80044a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ac:	2202      	movs	r2, #2
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f002 fad3 	bl	8006a5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80044b4:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <USBD_CDC_Init+0x1e4>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f003 020f 	and.w	r2, r3, #15
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	440b      	add	r3, r1
 80044c8:	3324      	adds	r3, #36	; 0x24
 80044ca:	2201      	movs	r2, #1
 80044cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80044ce:	4b55      	ldr	r3, [pc, #340]	; (8004624 <USBD_CDC_Init+0x1e8>)
 80044d0:	7819      	ldrb	r1, [r3, #0]
 80044d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044d6:	2202      	movs	r2, #2
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f002 fabe 	bl	8006a5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80044de:	4b51      	ldr	r3, [pc, #324]	; (8004624 <USBD_CDC_Init+0x1e8>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f003 020f 	and.w	r2, r3, #15
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80044f6:	2201      	movs	r2, #1
 80044f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80044fa:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <USBD_CDC_Init+0x1ec>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	f003 020f 	and.w	r2, r3, #15
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3326      	adds	r3, #38	; 0x26
 8004510:	2210      	movs	r2, #16
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	e035      	b.n	8004582 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004516:	4b42      	ldr	r3, [pc, #264]	; (8004620 <USBD_CDC_Init+0x1e4>)
 8004518:	7819      	ldrb	r1, [r3, #0]
 800451a:	2340      	movs	r3, #64	; 0x40
 800451c:	2202      	movs	r2, #2
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f002 fa9b 	bl	8006a5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004524:	4b3e      	ldr	r3, [pc, #248]	; (8004620 <USBD_CDC_Init+0x1e4>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f003 020f 	and.w	r2, r3, #15
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	3324      	adds	r3, #36	; 0x24
 800453a:	2201      	movs	r2, #1
 800453c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800453e:	4b39      	ldr	r3, [pc, #228]	; (8004624 <USBD_CDC_Init+0x1e8>)
 8004540:	7819      	ldrb	r1, [r3, #0]
 8004542:	2340      	movs	r3, #64	; 0x40
 8004544:	2202      	movs	r2, #2
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f002 fa87 	bl	8006a5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800454c:	4b35      	ldr	r3, [pc, #212]	; (8004624 <USBD_CDC_Init+0x1e8>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	f003 020f 	and.w	r2, r3, #15
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004564:	2201      	movs	r2, #1
 8004566:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004568:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <USBD_CDC_Init+0x1ec>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3326      	adds	r3, #38	; 0x26
 800457e:	2210      	movs	r2, #16
 8004580:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004582:	4b29      	ldr	r3, [pc, #164]	; (8004628 <USBD_CDC_Init+0x1ec>)
 8004584:	7819      	ldrb	r1, [r3, #0]
 8004586:	2308      	movs	r3, #8
 8004588:	2203      	movs	r2, #3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f002 fa65 	bl	8006a5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <USBD_CDC_Init+0x1ec>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 020f 	and.w	r2, r3, #15
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3324      	adds	r3, #36	; 0x24
 80045a6:	2201      	movs	r2, #1
 80045a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	33b0      	adds	r3, #176	; 0xb0
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80045e0:	2302      	movs	r3, #2
 80045e2:	e018      	b.n	8004616 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	7c1b      	ldrb	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10a      	bne.n	8004602 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80045ec:	4b0d      	ldr	r3, [pc, #52]	; (8004624 <USBD_CDC_Init+0x1e8>)
 80045ee:	7819      	ldrb	r1, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f002 fb1c 	bl	8006c38 <USBD_LL_PrepareReceive>
 8004600:	e008      	b.n	8004614 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <USBD_CDC_Init+0x1e8>)
 8004604:	7819      	ldrb	r1, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800460c:	2340      	movs	r3, #64	; 0x40
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f002 fb12 	bl	8006c38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000093 	.word	0x20000093
 8004624:	20000094 	.word	0x20000094
 8004628:	20000095 	.word	0x20000095

0800462c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004638:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <USBD_CDC_DeInit+0xf8>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f002 fa31 	bl	8006aa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004644:	4b37      	ldr	r3, [pc, #220]	; (8004724 <USBD_CDC_DeInit+0xf8>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 020f 	and.w	r2, r3, #15
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3324      	adds	r3, #36	; 0x24
 800465a:	2200      	movs	r2, #0
 800465c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800465e:	4b32      	ldr	r3, [pc, #200]	; (8004728 <USBD_CDC_DeInit+0xfc>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f002 fa1e 	bl	8006aa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800466a:	4b2f      	ldr	r3, [pc, #188]	; (8004728 <USBD_CDC_DeInit+0xfc>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	f003 020f 	and.w	r2, r3, #15
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004682:	2200      	movs	r2, #0
 8004684:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <USBD_CDC_DeInit+0x100>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f002 fa0a 	bl	8006aa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004692:	4b26      	ldr	r3, [pc, #152]	; (800472c <USBD_CDC_DeInit+0x100>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3324      	adds	r3, #36	; 0x24
 80046a8:	2200      	movs	r2, #0
 80046aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80046ac:	4b1f      	ldr	r3, [pc, #124]	; (800472c <USBD_CDC_DeInit+0x100>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f003 020f 	and.w	r2, r3, #15
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	3326      	adds	r3, #38	; 0x26
 80046c2:	2200      	movs	r2, #0
 80046c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	32b0      	adds	r2, #176	; 0xb0
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01f      	beq.n	8004718 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	33b0      	adds	r3, #176	; 0xb0
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	32b0      	adds	r2, #176	; 0xb0
 80046f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f002 fade 	bl	8006cbc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	32b0      	adds	r2, #176	; 0xb0
 800470a:	2100      	movs	r1, #0
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	20000093 	.word	0x20000093
 8004728:	20000094 	.word	0x20000094
 800472c:	20000095 	.word	0x20000095

08004730 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	32b0      	adds	r2, #176	; 0xb0
 8004744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004748:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800474e:	2300      	movs	r3, #0
 8004750:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800475c:	2303      	movs	r3, #3
 800475e:	e0bf      	b.n	80048e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004768:	2b00      	cmp	r3, #0
 800476a:	d050      	beq.n	800480e <USBD_CDC_Setup+0xde>
 800476c:	2b20      	cmp	r3, #32
 800476e:	f040 80af 	bne.w	80048d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	88db      	ldrh	r3, [r3, #6]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d03a      	beq.n	80047f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b25b      	sxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	da1b      	bge.n	80047bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	33b0      	adds	r3, #176	; 0xb0
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800479a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	88d2      	ldrh	r2, [r2, #6]
 80047a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	88db      	ldrh	r3, [r3, #6]
 80047a6:	2b07      	cmp	r3, #7
 80047a8:	bf28      	it	cs
 80047aa:	2307      	movcs	r3, #7
 80047ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	89fa      	ldrh	r2, [r7, #14]
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 fd43 	bl	8006240 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80047ba:	e090      	b.n	80048de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	785a      	ldrb	r2, [r3, #1]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	88db      	ldrh	r3, [r3, #6]
 80047ca:	2b3f      	cmp	r3, #63	; 0x3f
 80047cc:	d803      	bhi.n	80047d6 <USBD_CDC_Setup+0xa6>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	88db      	ldrh	r3, [r3, #6]
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	e000      	b.n	80047d8 <USBD_CDC_Setup+0xa8>
 80047d6:	2240      	movs	r2, #64	; 0x40
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80047de:	6939      	ldr	r1, [r7, #16]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80047e6:	461a      	mov	r2, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f001 fd55 	bl	8006298 <USBD_CtlPrepareRx>
      break;
 80047ee:	e076      	b.n	80048de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	33b0      	adds	r3, #176	; 0xb0
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	7850      	ldrb	r0, [r2, #1]
 8004806:	2200      	movs	r2, #0
 8004808:	6839      	ldr	r1, [r7, #0]
 800480a:	4798      	blx	r3
      break;
 800480c:	e067      	b.n	80048de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	785b      	ldrb	r3, [r3, #1]
 8004812:	2b0b      	cmp	r3, #11
 8004814:	d851      	bhi.n	80048ba <USBD_CDC_Setup+0x18a>
 8004816:	a201      	add	r2, pc, #4	; (adr r2, 800481c <USBD_CDC_Setup+0xec>)
 8004818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481c:	0800484d 	.word	0x0800484d
 8004820:	080048c9 	.word	0x080048c9
 8004824:	080048bb 	.word	0x080048bb
 8004828:	080048bb 	.word	0x080048bb
 800482c:	080048bb 	.word	0x080048bb
 8004830:	080048bb 	.word	0x080048bb
 8004834:	080048bb 	.word	0x080048bb
 8004838:	080048bb 	.word	0x080048bb
 800483c:	080048bb 	.word	0x080048bb
 8004840:	080048bb 	.word	0x080048bb
 8004844:	08004877 	.word	0x08004877
 8004848:	080048a1 	.word	0x080048a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b03      	cmp	r3, #3
 8004856:	d107      	bne.n	8004868 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004858:	f107 030a 	add.w	r3, r7, #10
 800485c:	2202      	movs	r2, #2
 800485e:	4619      	mov	r1, r3
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f001 fced 	bl	8006240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004866:	e032      	b.n	80048ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f001 fc77 	bl	800615e <USBD_CtlError>
            ret = USBD_FAIL;
 8004870:	2303      	movs	r3, #3
 8004872:	75fb      	strb	r3, [r7, #23]
          break;
 8004874:	e02b      	b.n	80048ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b03      	cmp	r3, #3
 8004880:	d107      	bne.n	8004892 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004882:	f107 030d 	add.w	r3, r7, #13
 8004886:	2201      	movs	r2, #1
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 fcd8 	bl	8006240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004890:	e01d      	b.n	80048ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f001 fc62 	bl	800615e <USBD_CtlError>
            ret = USBD_FAIL;
 800489a:	2303      	movs	r3, #3
 800489c:	75fb      	strb	r3, [r7, #23]
          break;
 800489e:	e016      	b.n	80048ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d00f      	beq.n	80048cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fc55 	bl	800615e <USBD_CtlError>
            ret = USBD_FAIL;
 80048b4:	2303      	movs	r3, #3
 80048b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80048b8:	e008      	b.n	80048cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f001 fc4e 	bl	800615e <USBD_CtlError>
          ret = USBD_FAIL;
 80048c2:	2303      	movs	r3, #3
 80048c4:	75fb      	strb	r3, [r7, #23]
          break;
 80048c6:	e002      	b.n	80048ce <USBD_CDC_Setup+0x19e>
          break;
 80048c8:	bf00      	nop
 80048ca:	e008      	b.n	80048de <USBD_CDC_Setup+0x1ae>
          break;
 80048cc:	bf00      	nop
      }
      break;
 80048ce:	e006      	b.n	80048de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f001 fc43 	bl	800615e <USBD_CtlError>
      ret = USBD_FAIL;
 80048d8:	2303      	movs	r3, #3
 80048da:	75fb      	strb	r3, [r7, #23]
      break;
 80048dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80048fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	32b0      	adds	r2, #176	; 0xb0
 8004906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800490e:	2303      	movs	r3, #3
 8004910:	e065      	b.n	80049de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	32b0      	adds	r2, #176	; 0xb0
 800491c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004920:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3318      	adds	r3, #24
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02f      	beq.n	800499c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	3318      	adds	r3, #24
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	f003 010f 	and.w	r1, r3, #15
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	460b      	mov	r3, r1
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	440b      	add	r3, r1
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4403      	add	r3, r0
 8004964:	3348      	adds	r3, #72	; 0x48
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	fbb2 f1f3 	udiv	r1, r2, r3
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004972:	2b00      	cmp	r3, #0
 8004974:	d112      	bne.n	800499c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	3318      	adds	r3, #24
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800498e:	78f9      	ldrb	r1, [r7, #3]
 8004990:	2300      	movs	r3, #0
 8004992:	2200      	movs	r2, #0
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f002 f92e 	bl	8006bf6 <USBD_LL_Transmit>
 800499a:	e01f      	b.n	80049dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	33b0      	adds	r3, #176	; 0xb0
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d010      	beq.n	80049dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	33b0      	adds	r3, #176	; 0xb0
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	460b      	mov	r3, r1
 80049f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	32b0      	adds	r2, #176	; 0xb0
 80049fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	32b0      	adds	r2, #176	; 0xb0
 8004a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e01a      	b.n	8004a4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004a18:	78fb      	ldrb	r3, [r7, #3]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f002 f92c 	bl	8006c7a <USBD_LL_GetRxDataSize>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	33b0      	adds	r3, #176	; 0xb0
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4413      	add	r3, r2
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	32b0      	adds	r2, #176	; 0xb0
 8004a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e025      	b.n	8004ac4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	33b0      	adds	r3, #176	; 0xb0
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01a      	beq.n	8004ac2 <USBD_CDC_EP0_RxReady+0x6c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004a92:	2bff      	cmp	r3, #255	; 0xff
 8004a94:	d015      	beq.n	8004ac2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	33b0      	adds	r3, #176	; 0xb0
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004aae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	22ff      	movs	r2, #255	; 0xff
 8004abe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004ad4:	2182      	movs	r1, #130	; 0x82
 8004ad6:	4818      	ldr	r0, [pc, #96]	; (8004b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ad8:	f000 fd09 	bl	80054ee <USBD_GetEpDesc>
 8004adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4815      	ldr	r0, [pc, #84]	; (8004b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ae2:	f000 fd04 	bl	80054ee <USBD_GetEpDesc>
 8004ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ae8:	2181      	movs	r1, #129	; 0x81
 8004aea:	4813      	ldr	r0, [pc, #76]	; (8004b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004aec:	f000 fcff 	bl	80054ee <USBD_GetEpDesc>
 8004af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2210      	movs	r2, #16
 8004afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d006      	beq.n	8004b12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b0c:	711a      	strb	r2, [r3, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b20:	711a      	strb	r2, [r3, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2243      	movs	r2, #67	; 0x43
 8004b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b2c:	4b02      	ldr	r3, [pc, #8]	; (8004b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000050 	.word	0x20000050

08004b3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004b44:	2182      	movs	r1, #130	; 0x82
 8004b46:	4818      	ldr	r0, [pc, #96]	; (8004ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b48:	f000 fcd1 	bl	80054ee <USBD_GetEpDesc>
 8004b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004b4e:	2101      	movs	r1, #1
 8004b50:	4815      	ldr	r0, [pc, #84]	; (8004ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b52:	f000 fccc 	bl	80054ee <USBD_GetEpDesc>
 8004b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004b58:	2181      	movs	r1, #129	; 0x81
 8004b5a:	4813      	ldr	r0, [pc, #76]	; (8004ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004b5c:	f000 fcc7 	bl	80054ee <USBD_GetEpDesc>
 8004b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d006      	beq.n	8004b82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2200      	movs	r2, #0
 8004b78:	711a      	strb	r2, [r3, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f042 0202 	orr.w	r2, r2, #2
 8004b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d006      	beq.n	8004b96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	711a      	strb	r2, [r3, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f042 0202 	orr.w	r2, r2, #2
 8004b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2243      	movs	r2, #67	; 0x43
 8004b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004b9c:	4b02      	ldr	r3, [pc, #8]	; (8004ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20000050 	.word	0x20000050

08004bac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bb4:	2182      	movs	r1, #130	; 0x82
 8004bb6:	4818      	ldr	r0, [pc, #96]	; (8004c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bb8:	f000 fc99 	bl	80054ee <USBD_GetEpDesc>
 8004bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	4815      	ldr	r0, [pc, #84]	; (8004c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bc2:	f000 fc94 	bl	80054ee <USBD_GetEpDesc>
 8004bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004bc8:	2181      	movs	r1, #129	; 0x81
 8004bca:	4813      	ldr	r0, [pc, #76]	; (8004c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004bcc:	f000 fc8f 	bl	80054ee <USBD_GetEpDesc>
 8004bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2210      	movs	r2, #16
 8004bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d006      	beq.n	8004bf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bec:	711a      	strb	r2, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c00:	711a      	strb	r2, [r3, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2243      	movs	r2, #67	; 0x43
 8004c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000050 	.word	0x20000050

08004c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b083      	sub	sp, #12
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	220a      	movs	r2, #10
 8004c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004c2a:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e009      	b.n	8004c64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	33b0      	adds	r3, #176	; 0xb0
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	32b0      	adds	r2, #176	; 0xb0
 8004c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e008      	b.n	8004ca8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	32b0      	adds	r2, #176	; 0xb0
 8004cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ccc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e004      	b.n	8004ce2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	32b0      	adds	r2, #176	; 0xb0
 8004d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	32b0      	adds	r2, #176	; 0xb0
 8004d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e018      	b.n	8004d50 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7c1b      	ldrb	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <USBD_CDC_ReceivePacket+0x68>)
 8004d28:	7819      	ldrb	r1, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 ff7f 	bl	8006c38 <USBD_LL_PrepareReceive>
 8004d3a:	e008      	b.n	8004d4e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004d3c:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <USBD_CDC_ReceivePacket+0x68>)
 8004d3e:	7819      	ldrb	r1, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004d46:	2340      	movs	r3, #64	; 0x40
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 ff75 	bl	8006c38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000094 	.word	0x20000094

08004d5c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	4613      	mov	r3, r2
 8004d68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e01f      	b.n	8004db4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	79fa      	ldrb	r2, [r7, #7]
 8004da6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f001 fdef 	bl	800698c <USBD_LL_Init>
 8004dae:	4603      	mov	r3, r0
 8004db0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e025      	b.n	8004e20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	32ae      	adds	r2, #174	; 0xae
 8004de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00f      	beq.n	8004e10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	32ae      	adds	r2, #174	; 0xae
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	f107 020e 	add.w	r2, r7, #14
 8004e04:	4610      	mov	r0, r2
 8004e06:	4798      	blx	r3
 8004e08:	4602      	mov	r2, r0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 fdf7 	bl	8006a24 <USBD_LL_Start>
 8004e36:	4603      	mov	r3, r0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004e48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
 8004e80:	4603      	mov	r3, r0
 8004e82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	460b      	mov	r3, r1
 8004e98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	78fa      	ldrb	r2, [r7, #3]
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b084      	sub	sp, #16
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f001 f908 	bl	80060ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004ee8:	461a      	mov	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d01a      	beq.n	8004f34 <USBD_LL_SetupStage+0x72>
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d822      	bhi.n	8004f48 <USBD_LL_SetupStage+0x86>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <USBD_LL_SetupStage+0x4a>
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d00a      	beq.n	8004f20 <USBD_LL_SetupStage+0x5e>
 8004f0a:	e01d      	b.n	8004f48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fb5f 	bl	80055d8 <USBD_StdDevReq>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e020      	b.n	8004f62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 fbc7 	bl	80056bc <USBD_StdItfReq>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]
      break;
 8004f32:	e016      	b.n	8004f62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fc29 	bl	8005794 <USBD_StdEPReq>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
      break;
 8004f46:	e00c      	b.n	8004f62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004f4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fdc4 	bl	8006ae4 <USBD_LL_StallEP>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f60:	bf00      	nop
  }

  return ret;
 8004f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	460b      	mov	r3, r1
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004f7e:	7afb      	ldrb	r3, [r7, #11]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d16e      	bne.n	8005062 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004f8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	f040 8098 	bne.w	80050c8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d913      	bls.n	8004fcc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	1ad2      	subs	r2, r2, r3
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	bf28      	it	cs
 8004fbe:	4613      	movcs	r3, r2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f001 f984 	bl	80062d2 <USBD_CtlContinueRx>
 8004fca:	e07d      	b.n	80050c8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d014      	beq.n	8005004 <USBD_LL_DataOutStage+0x98>
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d81d      	bhi.n	800501a <USBD_LL_DataOutStage+0xae>
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <USBD_LL_DataOutStage+0x7c>
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d003      	beq.n	8004fee <USBD_LL_DataOutStage+0x82>
 8004fe6:	e018      	b.n	800501a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75bb      	strb	r3, [r7, #22]
            break;
 8004fec:	e018      	b.n	8005020 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 fa5e 	bl	80054ba <USBD_CoreFindIF>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75bb      	strb	r3, [r7, #22]
            break;
 8005002:	e00d      	b.n	8005020 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800500a:	b2db      	uxtb	r3, r3
 800500c:	4619      	mov	r1, r3
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fa60 	bl	80054d4 <USBD_CoreFindEP>
 8005014:	4603      	mov	r3, r0
 8005016:	75bb      	strb	r3, [r7, #22]
            break;
 8005018:	e002      	b.n	8005020 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	75bb      	strb	r3, [r7, #22]
            break;
 800501e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005020:	7dbb      	ldrb	r3, [r7, #22]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d119      	bne.n	800505a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d113      	bne.n	800505a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005032:	7dba      	ldrb	r2, [r7, #22]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	32ae      	adds	r2, #174	; 0xae
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005042:	7dba      	ldrb	r2, [r7, #22]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800504a:	7dba      	ldrb	r2, [r7, #22]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	32ae      	adds	r2, #174	; 0xae
 8005050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f001 f94a 	bl	80062f4 <USBD_CtlSendStatus>
 8005060:	e032      	b.n	80050c8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005062:	7afb      	ldrb	r3, [r7, #11]
 8005064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005068:	b2db      	uxtb	r3, r3
 800506a:	4619      	mov	r1, r3
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fa31 	bl	80054d4 <USBD_CoreFindEP>
 8005072:	4603      	mov	r3, r0
 8005074:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005076:	7dbb      	ldrb	r3, [r7, #22]
 8005078:	2bff      	cmp	r3, #255	; 0xff
 800507a:	d025      	beq.n	80050c8 <USBD_LL_DataOutStage+0x15c>
 800507c:	7dbb      	ldrb	r3, [r7, #22]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d122      	bne.n	80050c8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b03      	cmp	r3, #3
 800508c:	d117      	bne.n	80050be <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800508e:	7dba      	ldrb	r2, [r7, #22]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	32ae      	adds	r2, #174	; 0xae
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00f      	beq.n	80050be <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800509e:	7dba      	ldrb	r2, [r7, #22]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80050a6:	7dba      	ldrb	r2, [r7, #22]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	32ae      	adds	r2, #174	; 0xae
 80050ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	7afa      	ldrb	r2, [r7, #11]
 80050b4:	4611      	mov	r1, r2
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	4798      	blx	r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80050be:	7dfb      	ldrb	r3, [r7, #23]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
 80050c6:	e000      	b.n	80050ca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	460b      	mov	r3, r1
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80050e0:	7afb      	ldrb	r3, [r7, #11]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d16f      	bne.n	80051c6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3314      	adds	r3, #20
 80050ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d15a      	bne.n	80051ac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d914      	bls.n	800512c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	1ad2      	subs	r2, r2, r3
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	461a      	mov	r2, r3
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f001 f8ac 	bl	8006276 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800511e:	2300      	movs	r3, #0
 8005120:	2200      	movs	r2, #0
 8005122:	2100      	movs	r1, #0
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f001 fd87 	bl	8006c38 <USBD_LL_PrepareReceive>
 800512a:	e03f      	b.n	80051ac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	429a      	cmp	r2, r3
 8005136:	d11c      	bne.n	8005172 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005140:	429a      	cmp	r2, r3
 8005142:	d316      	bcc.n	8005172 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800514e:	429a      	cmp	r2, r3
 8005150:	d20f      	bcs.n	8005172 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005152:	2200      	movs	r2, #0
 8005154:	2100      	movs	r1, #0
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f001 f88d 	bl	8006276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005164:	2300      	movs	r3, #0
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f001 fd64 	bl	8006c38 <USBD_LL_PrepareReceive>
 8005170:	e01c      	b.n	80051ac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b03      	cmp	r3, #3
 800517c:	d10f      	bne.n	800519e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f001 fc9f 	bl	8006ae4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f001 f8b7 	bl	800631a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d03a      	beq.n	800522c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f7ff fe42 	bl	8004e40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80051c4:	e032      	b.n	800522c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80051c6:	7afb      	ldrb	r3, [r7, #11]
 80051c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	4619      	mov	r1, r3
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f97f 	bl	80054d4 <USBD_CoreFindEP>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051da:	7dfb      	ldrb	r3, [r7, #23]
 80051dc:	2bff      	cmp	r3, #255	; 0xff
 80051de:	d025      	beq.n	800522c <USBD_LL_DataInStage+0x15a>
 80051e0:	7dfb      	ldrb	r3, [r7, #23]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d122      	bne.n	800522c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d11c      	bne.n	800522c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80051f2:	7dfa      	ldrb	r2, [r7, #23]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	32ae      	adds	r2, #174	; 0xae
 80051f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d014      	beq.n	800522c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005202:	7dfa      	ldrb	r2, [r7, #23]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800520a:	7dfa      	ldrb	r2, [r7, #23]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	32ae      	adds	r2, #174	; 0xae
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	7afa      	ldrb	r2, [r7, #11]
 8005218:	4611      	mov	r1, r2
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	4798      	blx	r3
 800521e:	4603      	mov	r3, r0
 8005220:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005222:	7dbb      	ldrb	r3, [r7, #22]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005228:	7dbb      	ldrb	r3, [r7, #22]
 800522a:	e000      	b.n	800522e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d014      	beq.n	800529c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6852      	ldr	r2, [r2, #4]
 800528a:	b2d2      	uxtb	r2, r2
 800528c:	4611      	mov	r1, r2
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	4798      	blx	r3
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005298:	2303      	movs	r3, #3
 800529a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800529c:	2340      	movs	r3, #64	; 0x40
 800529e:	2200      	movs	r2, #0
 80052a0:	2100      	movs	r1, #0
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 fbd9 	bl	8006a5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2240      	movs	r2, #64	; 0x40
 80052b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	2200      	movs	r2, #0
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f001 fbcb 	bl	8006a5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2240      	movs	r2, #64	; 0x40
 80052ce:	621a      	str	r2, [r3, #32]

  return ret;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	78fa      	ldrb	r2, [r7, #3]
 80052ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005308:	b2da      	uxtb	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2204      	movs	r2, #4
 8005314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b04      	cmp	r3, #4
 8005338:	d106      	bne.n	8005348 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005340:	b2da      	uxtb	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b082      	sub	sp, #8
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b03      	cmp	r3, #3
 8005368:	d110      	bne.n	800538c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00b      	beq.n	800538c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	32ae      	adds	r2, #174	; 0xae
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e01c      	b.n	80053f2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d115      	bne.n	80053f0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	32ae      	adds	r2, #174	; 0xae
 80053ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00b      	beq.n	80053f0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	32ae      	adds	r2, #174	; 0xae
 80053e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	4611      	mov	r1, r2
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	460b      	mov	r3, r1
 8005404:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	32ae      	adds	r2, #174	; 0xae
 8005410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005418:	2303      	movs	r3, #3
 800541a:	e01c      	b.n	8005456 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b03      	cmp	r3, #3
 8005426:	d115      	bne.n	8005454 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	32ae      	adds	r2, #174	; 0xae
 8005432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	32ae      	adds	r2, #174	; 0xae
 8005446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	4611      	mov	r1, r2
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00e      	beq.n	80054b0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6852      	ldr	r2, [r2, #4]
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	4611      	mov	r1, r2
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80054ac:	2303      	movs	r3, #3
 80054ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	460b      	mov	r3, r1
 80054c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr

080054d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80054e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	885b      	ldrh	r3, [r3, #2]
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	429a      	cmp	r2, r3
 8005514:	d920      	bls.n	8005558 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800551e:	e013      	b.n	8005548 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005520:	f107 030a 	add.w	r3, r7, #10
 8005524:	4619      	mov	r1, r3
 8005526:	6978      	ldr	r0, [r7, #20]
 8005528:	f000 f81b 	bl	8005562 <USBD_GetNextDesc>
 800552c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	785b      	ldrb	r3, [r3, #1]
 8005532:	2b05      	cmp	r3, #5
 8005534:	d108      	bne.n	8005548 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	789b      	ldrb	r3, [r3, #2]
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	429a      	cmp	r2, r3
 8005542:	d008      	beq.n	8005556 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	885b      	ldrh	r3, [r3, #2]
 800554c:	b29a      	uxth	r2, r3
 800554e:	897b      	ldrh	r3, [r7, #10]
 8005550:	429a      	cmp	r2, r3
 8005552:	d8e5      	bhi.n	8005520 <USBD_GetEpDesc+0x32>
 8005554:	e000      	b.n	8005558 <USBD_GetEpDesc+0x6a>
          break;
 8005556:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005558:	693b      	ldr	r3, [r7, #16]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	881a      	ldrh	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	4413      	add	r3, r2
 800557c:	b29a      	uxth	r2, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800558e:	68fb      	ldr	r3, [r7, #12]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	3301      	adds	r3, #1
 80055b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80055ba:	8a3b      	ldrh	r3, [r7, #16]
 80055bc:	021b      	lsls	r3, r3, #8
 80055be:	b21a      	sxth	r2, r3
 80055c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	b21b      	sxth	r3, r3
 80055c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80055ca:	89fb      	ldrh	r3, [r7, #14]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d005      	beq.n	80055fe <USBD_StdDevReq+0x26>
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d857      	bhi.n	80056a6 <USBD_StdDevReq+0xce>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00f      	beq.n	800561a <USBD_StdDevReq+0x42>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d153      	bne.n	80056a6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	32ae      	adds	r2, #174	; 0xae
 8005608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e04a      	b.n	80056b0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b09      	cmp	r3, #9
 8005620:	d83b      	bhi.n	800569a <USBD_StdDevReq+0xc2>
 8005622:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <USBD_StdDevReq+0x50>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800567d 	.word	0x0800567d
 800562c:	08005691 	.word	0x08005691
 8005630:	0800569b 	.word	0x0800569b
 8005634:	08005687 	.word	0x08005687
 8005638:	0800569b 	.word	0x0800569b
 800563c:	0800565b 	.word	0x0800565b
 8005640:	08005651 	.word	0x08005651
 8005644:	0800569b 	.word	0x0800569b
 8005648:	08005673 	.word	0x08005673
 800564c:	08005665 	.word	0x08005665
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fa3c 	bl	8005ad0 <USBD_GetDescriptor>
          break;
 8005658:	e024      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fba1 	bl	8005da4 <USBD_SetAddress>
          break;
 8005662:	e01f      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005664:	6839      	ldr	r1, [r7, #0]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fbe0 	bl	8005e2c <USBD_SetConfig>
 800566c:	4603      	mov	r3, r0
 800566e:	73fb      	strb	r3, [r7, #15]
          break;
 8005670:	e018      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fc83 	bl	8005f80 <USBD_GetConfig>
          break;
 800567a:	e013      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fcb4 	bl	8005fec <USBD_GetStatus>
          break;
 8005684:	e00e      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fce3 	bl	8006054 <USBD_SetFeature>
          break;
 800568e:	e009      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005690:	6839      	ldr	r1, [r7, #0]
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fd07 	bl	80060a6 <USBD_ClrFeature>
          break;
 8005698:	e004      	b.n	80056a4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800569a:	6839      	ldr	r1, [r7, #0]
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fd5e 	bl	800615e <USBD_CtlError>
          break;
 80056a2:	bf00      	nop
      }
      break;
 80056a4:	e004      	b.n	80056b0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd58 	bl	800615e <USBD_CtlError>
      break;
 80056ae:	bf00      	nop
  }

  return ret;
 80056b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop

080056bc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d005      	beq.n	80056e2 <USBD_StdItfReq+0x26>
 80056d6:	2b40      	cmp	r3, #64	; 0x40
 80056d8:	d852      	bhi.n	8005780 <USBD_StdItfReq+0xc4>
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <USBD_StdItfReq+0x26>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d14e      	bne.n	8005780 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d840      	bhi.n	8005772 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	889b      	ldrh	r3, [r3, #4]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d836      	bhi.n	8005768 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	889b      	ldrh	r3, [r3, #4]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff fed9 	bl	80054ba <USBD_CoreFindIF>
 8005708:	4603      	mov	r3, r0
 800570a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2bff      	cmp	r3, #255	; 0xff
 8005710:	d01d      	beq.n	800574e <USBD_StdItfReq+0x92>
 8005712:	7bbb      	ldrb	r3, [r7, #14]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005718:	7bba      	ldrb	r2, [r7, #14]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	32ae      	adds	r2, #174	; 0xae
 800571e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00f      	beq.n	8005748 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005728:	7bba      	ldrb	r2, [r7, #14]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005730:	7bba      	ldrb	r2, [r7, #14]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	32ae      	adds	r2, #174	; 0xae
 8005736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	6839      	ldr	r1, [r7, #0]
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	4798      	blx	r3
 8005742:	4603      	mov	r3, r0
 8005744:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005746:	e004      	b.n	8005752 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005748:	2303      	movs	r3, #3
 800574a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800574c:	e001      	b.n	8005752 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800574e:	2303      	movs	r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	88db      	ldrh	r3, [r3, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d110      	bne.n	800577c <USBD_StdItfReq+0xc0>
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10d      	bne.n	800577c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fdc7 	bl	80062f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005766:	e009      	b.n	800577c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005768:	6839      	ldr	r1, [r7, #0]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fcf7 	bl	800615e <USBD_CtlError>
          break;
 8005770:	e004      	b.n	800577c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005772:	6839      	ldr	r1, [r7, #0]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 fcf2 	bl	800615e <USBD_CtlError>
          break;
 800577a:	e000      	b.n	800577e <USBD_StdItfReq+0xc2>
          break;
 800577c:	bf00      	nop
      }
      break;
 800577e:	e004      	b.n	800578a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fceb 	bl	800615e <USBD_CtlError>
      break;
 8005788:	bf00      	nop
  }

  return ret;
 800578a:	7bfb      	ldrb	r3, [r7, #15]
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	889b      	ldrh	r3, [r3, #4]
 80057a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d007      	beq.n	80057c4 <USBD_StdEPReq+0x30>
 80057b4:	2b40      	cmp	r3, #64	; 0x40
 80057b6:	f200 817f 	bhi.w	8005ab8 <USBD_StdEPReq+0x324>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02a      	beq.n	8005814 <USBD_StdEPReq+0x80>
 80057be:	2b20      	cmp	r3, #32
 80057c0:	f040 817a 	bne.w	8005ab8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80057c4:	7bbb      	ldrb	r3, [r7, #14]
 80057c6:	4619      	mov	r1, r3
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff fe83 	bl	80054d4 <USBD_CoreFindEP>
 80057ce:	4603      	mov	r3, r0
 80057d0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057d2:	7b7b      	ldrb	r3, [r7, #13]
 80057d4:	2bff      	cmp	r3, #255	; 0xff
 80057d6:	f000 8174 	beq.w	8005ac2 <USBD_StdEPReq+0x32e>
 80057da:	7b7b      	ldrb	r3, [r7, #13]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8170 	bne.w	8005ac2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80057e2:	7b7a      	ldrb	r2, [r7, #13]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80057ea:	7b7a      	ldrb	r2, [r7, #13]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	32ae      	adds	r2, #174	; 0xae
 80057f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8163 	beq.w	8005ac2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80057fc:	7b7a      	ldrb	r2, [r7, #13]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	32ae      	adds	r2, #174	; 0xae
 8005802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
 800580e:	4603      	mov	r3, r0
 8005810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005812:	e156      	b.n	8005ac2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b03      	cmp	r3, #3
 800581a:	d008      	beq.n	800582e <USBD_StdEPReq+0x9a>
 800581c:	2b03      	cmp	r3, #3
 800581e:	f300 8145 	bgt.w	8005aac <USBD_StdEPReq+0x318>
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 809b 	beq.w	800595e <USBD_StdEPReq+0x1ca>
 8005828:	2b01      	cmp	r3, #1
 800582a:	d03c      	beq.n	80058a6 <USBD_StdEPReq+0x112>
 800582c:	e13e      	b.n	8005aac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d002      	beq.n	8005840 <USBD_StdEPReq+0xac>
 800583a:	2b03      	cmp	r3, #3
 800583c:	d016      	beq.n	800586c <USBD_StdEPReq+0xd8>
 800583e:	e02c      	b.n	800589a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005840:	7bbb      	ldrb	r3, [r7, #14]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00d      	beq.n	8005862 <USBD_StdEPReq+0xce>
 8005846:	7bbb      	ldrb	r3, [r7, #14]
 8005848:	2b80      	cmp	r3, #128	; 0x80
 800584a:	d00a      	beq.n	8005862 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f001 f947 	bl	8006ae4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005856:	2180      	movs	r1, #128	; 0x80
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f001 f943 	bl	8006ae4 <USBD_LL_StallEP>
 800585e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005860:	e020      	b.n	80058a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fc7a 	bl	800615e <USBD_CtlError>
              break;
 800586a:	e01b      	b.n	80058a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	885b      	ldrh	r3, [r3, #2]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10e      	bne.n	8005892 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005874:	7bbb      	ldrb	r3, [r7, #14]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00b      	beq.n	8005892 <USBD_StdEPReq+0xfe>
 800587a:	7bbb      	ldrb	r3, [r7, #14]
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	d008      	beq.n	8005892 <USBD_StdEPReq+0xfe>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	88db      	ldrh	r3, [r3, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d104      	bne.n	8005892 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005888:	7bbb      	ldrb	r3, [r7, #14]
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 f929 	bl	8006ae4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fd2e 	bl	80062f4 <USBD_CtlSendStatus>

              break;
 8005898:	e004      	b.n	80058a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fc5e 	bl	800615e <USBD_CtlError>
              break;
 80058a2:	bf00      	nop
          }
          break;
 80058a4:	e107      	b.n	8005ab6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d002      	beq.n	80058b8 <USBD_StdEPReq+0x124>
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d016      	beq.n	80058e4 <USBD_StdEPReq+0x150>
 80058b6:	e04b      	b.n	8005950 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80058b8:	7bbb      	ldrb	r3, [r7, #14]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00d      	beq.n	80058da <USBD_StdEPReq+0x146>
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	2b80      	cmp	r3, #128	; 0x80
 80058c2:	d00a      	beq.n	80058da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f001 f90b 	bl	8006ae4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ce:	2180      	movs	r1, #128	; 0x80
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 f907 	bl	8006ae4 <USBD_LL_StallEP>
 80058d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80058d8:	e040      	b.n	800595c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fc3e 	bl	800615e <USBD_CtlError>
              break;
 80058e2:	e03b      	b.n	800595c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	885b      	ldrh	r3, [r3, #2]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d136      	bne.n	800595a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80058ec:	7bbb      	ldrb	r3, [r7, #14]
 80058ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	4619      	mov	r1, r3
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 f911 	bl	8006b22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fcf7 	bl	80062f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7ff fde2 	bl	80054d4 <USBD_CoreFindEP>
 8005910:	4603      	mov	r3, r0
 8005912:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005914:	7b7b      	ldrb	r3, [r7, #13]
 8005916:	2bff      	cmp	r3, #255	; 0xff
 8005918:	d01f      	beq.n	800595a <USBD_StdEPReq+0x1c6>
 800591a:	7b7b      	ldrb	r3, [r7, #13]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11c      	bne.n	800595a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005920:	7b7a      	ldrb	r2, [r7, #13]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005928:	7b7a      	ldrb	r2, [r7, #13]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	32ae      	adds	r2, #174	; 0xae
 800592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005938:	7b7a      	ldrb	r2, [r7, #13]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32ae      	adds	r2, #174	; 0xae
 800593e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	6839      	ldr	r1, [r7, #0]
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	4798      	blx	r3
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800594e:	e004      	b.n	800595a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005950:	6839      	ldr	r1, [r7, #0]
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fc03 	bl	800615e <USBD_CtlError>
              break;
 8005958:	e000      	b.n	800595c <USBD_StdEPReq+0x1c8>
              break;
 800595a:	bf00      	nop
          }
          break;
 800595c:	e0ab      	b.n	8005ab6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d002      	beq.n	8005970 <USBD_StdEPReq+0x1dc>
 800596a:	2b03      	cmp	r3, #3
 800596c:	d032      	beq.n	80059d4 <USBD_StdEPReq+0x240>
 800596e:	e097      	b.n	8005aa0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <USBD_StdEPReq+0x1f2>
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d004      	beq.n	8005986 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fbed 	bl	800615e <USBD_CtlError>
                break;
 8005984:	e091      	b.n	8005aaa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598a:	2b00      	cmp	r3, #0
 800598c:	da0b      	bge.n	80059a6 <USBD_StdEPReq+0x212>
 800598e:	7bbb      	ldrb	r3, [r7, #14]
 8005990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3310      	adds	r3, #16
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4413      	add	r3, r2
 80059a2:	3304      	adds	r3, #4
 80059a4:	e00b      	b.n	80059be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80059ac:	4613      	mov	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	4413      	add	r3, r2
 80059bc:	3304      	adds	r3, #4
 80059be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2202      	movs	r2, #2
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fc37 	bl	8006240 <USBD_CtlSendData>
              break;
 80059d2:	e06a      	b.n	8005aaa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80059d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da11      	bge.n	8005a00 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	f003 020f 	and.w	r2, r3, #15
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	440b      	add	r3, r1
 80059ee:	3324      	adds	r3, #36	; 0x24
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d117      	bne.n	8005a26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fbb0 	bl	800615e <USBD_CtlError>
                  break;
 80059fe:	e054      	b.n	8005aaa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005a00:	7bbb      	ldrb	r3, [r7, #14]
 8005a02:	f003 020f 	and.w	r2, r3, #15
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fb9d 	bl	800615e <USBD_CtlError>
                  break;
 8005a24:	e041      	b.n	8005aaa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	da0b      	bge.n	8005a46 <USBD_StdEPReq+0x2b2>
 8005a2e:	7bbb      	ldrb	r3, [r7, #14]
 8005a30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	3310      	adds	r3, #16
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	3304      	adds	r3, #4
 8005a44:	e00b      	b.n	8005a5e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <USBD_StdEPReq+0x2d8>
 8005a66:	7bbb      	ldrb	r3, [r7, #14]
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d103      	bne.n	8005a74 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e00e      	b.n	8005a92 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f001 f871 	bl	8006b60 <USBD_LL_IsStallEP>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2201      	movs	r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e002      	b.n	8005a92 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2202      	movs	r2, #2
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 fbd1 	bl	8006240 <USBD_CtlSendData>
              break;
 8005a9e:	e004      	b.n	8005aaa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fb5b 	bl	800615e <USBD_CtlError>
              break;
 8005aa8:	bf00      	nop
          }
          break;
 8005aaa:	e004      	b.n	8005ab6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fb55 	bl	800615e <USBD_CtlError>
          break;
 8005ab4:	bf00      	nop
      }
      break;
 8005ab6:	e005      	b.n	8005ac4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005ab8:	6839      	ldr	r1, [r7, #0]
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fb4f 	bl	800615e <USBD_CtlError>
      break;
 8005ac0:	e000      	b.n	8005ac4 <USBD_StdEPReq+0x330>
      break;
 8005ac2:	bf00      	nop
  }

  return ret;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005ada:	2300      	movs	r3, #0
 8005adc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	885b      	ldrh	r3, [r3, #2]
 8005aea:	0a1b      	lsrs	r3, r3, #8
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	f200 8128 	bhi.w	8005d46 <USBD_GetDescriptor+0x276>
 8005af6:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <USBD_GetDescriptor+0x2c>)
 8005af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005d47 	.word	0x08005d47
 8005b0c:	08005d47 	.word	0x08005d47
 8005b10:	08005ce7 	.word	0x08005ce7
 8005b14:	08005d13 	.word	0x08005d13
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	7c12      	ldrb	r2, [r2, #16]
 8005b24:	f107 0108 	add.w	r1, r7, #8
 8005b28:	4610      	mov	r0, r2
 8005b2a:	4798      	blx	r3
 8005b2c:	60f8      	str	r0, [r7, #12]
      break;
 8005b2e:	e112      	b.n	8005d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	7c1b      	ldrb	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f107 0208 	add.w	r2, r7, #8
 8005b44:	4610      	mov	r0, r2
 8005b46:	4798      	blx	r3
 8005b48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	2202      	movs	r2, #2
 8005b50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005b52:	e100      	b.n	8005d56 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	f107 0208 	add.w	r2, r7, #8
 8005b60:	4610      	mov	r0, r2
 8005b62:	4798      	blx	r3
 8005b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e0f2      	b.n	8005d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	885b      	ldrh	r3, [r3, #2]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	f200 80ac 	bhi.w	8005cd4 <USBD_GetDescriptor+0x204>
 8005b7c:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <USBD_GetDescriptor+0xb4>)
 8005b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b82:	bf00      	nop
 8005b84:	08005b9d 	.word	0x08005b9d
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005c05 	.word	0x08005c05
 8005b90:	08005c39 	.word	0x08005c39
 8005b94:	08005c6d 	.word	0x08005c6d
 8005b98:	08005ca1 	.word	0x08005ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4798      	blx	r3
 8005bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bbe:	e091      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 facb 	bl	800615e <USBD_CtlError>
            err++;
 8005bc8:	7afb      	ldrb	r3, [r7, #11]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005bce:	e089      	b.n	8005ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	7c12      	ldrb	r2, [r2, #16]
 8005be8:	f107 0108 	add.w	r1, r7, #8
 8005bec:	4610      	mov	r0, r2
 8005bee:	4798      	blx	r3
 8005bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bf2:	e077      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bf4:	6839      	ldr	r1, [r7, #0]
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fab1 	bl	800615e <USBD_CtlError>
            err++;
 8005bfc:	7afb      	ldrb	r3, [r7, #11]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	72fb      	strb	r3, [r7, #11]
          break;
 8005c02:	e06f      	b.n	8005ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00b      	beq.n	8005c28 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	7c12      	ldrb	r2, [r2, #16]
 8005c1c:	f107 0108 	add.w	r1, r7, #8
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
 8005c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c26:	e05d      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa97 	bl	800615e <USBD_CtlError>
            err++;
 8005c30:	7afb      	ldrb	r3, [r7, #11]
 8005c32:	3301      	adds	r3, #1
 8005c34:	72fb      	strb	r3, [r7, #11]
          break;
 8005c36:	e055      	b.n	8005ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	7c12      	ldrb	r2, [r2, #16]
 8005c50:	f107 0108 	add.w	r1, r7, #8
 8005c54:	4610      	mov	r0, r2
 8005c56:	4798      	blx	r3
 8005c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c5a:	e043      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa7d 	bl	800615e <USBD_CtlError>
            err++;
 8005c64:	7afb      	ldrb	r3, [r7, #11]
 8005c66:	3301      	adds	r3, #1
 8005c68:	72fb      	strb	r3, [r7, #11]
          break;
 8005c6a:	e03b      	b.n	8005ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7c12      	ldrb	r2, [r2, #16]
 8005c84:	f107 0108 	add.w	r1, r7, #8
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8e:	e029      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa63 	bl	800615e <USBD_CtlError>
            err++;
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9e:	e021      	b.n	8005ce4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	7c12      	ldrb	r2, [r2, #16]
 8005cb8:	f107 0108 	add.w	r1, r7, #8
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cc2:	e00f      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa49 	bl	800615e <USBD_CtlError>
            err++;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005cd2:	e007      	b.n	8005ce4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa41 	bl	800615e <USBD_CtlError>
          err++;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005ce2:	bf00      	nop
      }
      break;
 8005ce4:	e037      	b.n	8005d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	7c1b      	ldrb	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf6:	f107 0208 	add.w	r2, r7, #8
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	4798      	blx	r3
 8005cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d00:	e029      	b.n	8005d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa2a 	bl	800615e <USBD_CtlError>
        err++;
 8005d0a:	7afb      	ldrb	r3, [r7, #11]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8005d10:	e021      	b.n	8005d56 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	7c1b      	ldrb	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10d      	bne.n	8005d36 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d22:	f107 0208 	add.w	r2, r7, #8
 8005d26:	4610      	mov	r0, r2
 8005d28:	4798      	blx	r3
 8005d2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	2207      	movs	r2, #7
 8005d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d34:	e00f      	b.n	8005d56 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005d36:	6839      	ldr	r1, [r7, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fa10 	bl	800615e <USBD_CtlError>
        err++;
 8005d3e:	7afb      	ldrb	r3, [r7, #11]
 8005d40:	3301      	adds	r3, #1
 8005d42:	72fb      	strb	r3, [r7, #11]
      break;
 8005d44:	e007      	b.n	8005d56 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fa08 	bl	800615e <USBD_CtlError>
      err++;
 8005d4e:	7afb      	ldrb	r3, [r7, #11]
 8005d50:	3301      	adds	r3, #1
 8005d52:	72fb      	strb	r3, [r7, #11]
      break;
 8005d54:	bf00      	nop
  }

  if (err != 0U)
 8005d56:	7afb      	ldrb	r3, [r7, #11]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11e      	bne.n	8005d9a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	88db      	ldrh	r3, [r3, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d016      	beq.n	8005d92 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00e      	beq.n	8005d88 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88da      	ldrh	r2, [r3, #6]
 8005d6e:	893b      	ldrh	r3, [r7, #8]
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bf28      	it	cs
 8005d74:	4613      	movcs	r3, r2
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005d7a:	893b      	ldrh	r3, [r7, #8]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	68f9      	ldr	r1, [r7, #12]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fa5d 	bl	8006240 <USBD_CtlSendData>
 8005d86:	e009      	b.n	8005d9c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f9e7 	bl	800615e <USBD_CtlError>
 8005d90:	e004      	b.n	8005d9c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 faae 	bl	80062f4 <USBD_CtlSendStatus>
 8005d98:	e000      	b.n	8005d9c <USBD_GetDescriptor+0x2cc>
    return;
 8005d9a:	bf00      	nop
  }
}
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop

08005da4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	889b      	ldrh	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d131      	bne.n	8005e1a <USBD_SetAddress+0x76>
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	88db      	ldrh	r3, [r3, #6]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d12d      	bne.n	8005e1a <USBD_SetAddress+0x76>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	885b      	ldrh	r3, [r3, #2]
 8005dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc4:	d829      	bhi.n	8005e1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	885b      	ldrh	r3, [r3, #2]
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d104      	bne.n	8005de8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 f9bc 	bl	800615e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de6:	e01d      	b.n	8005e24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	7bfa      	ldrb	r2, [r7, #15]
 8005dec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fedf 	bl	8006bb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa7a 	bl	80062f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0e:	e009      	b.n	8005e24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e18:	e004      	b.n	8005e24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f99e 	bl	800615e <USBD_CtlError>
  }
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	885b      	ldrh	r3, [r3, #2]
 8005e3e:	b2da      	uxtb	r2, r3
 8005e40:	4b4e      	ldr	r3, [pc, #312]	; (8005f7c <USBD_SetConfig+0x150>)
 8005e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005e44:	4b4d      	ldr	r3, [pc, #308]	; (8005f7c <USBD_SetConfig+0x150>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d905      	bls.n	8005e58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f985 	bl	800615e <USBD_CtlError>
    return USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e08c      	b.n	8005f72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d002      	beq.n	8005e6a <USBD_SetConfig+0x3e>
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d029      	beq.n	8005ebc <USBD_SetConfig+0x90>
 8005e68:	e075      	b.n	8005f56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005e6a:	4b44      	ldr	r3, [pc, #272]	; (8005f7c <USBD_SetConfig+0x150>)
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d020      	beq.n	8005eb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005e72:	4b42      	ldr	r3, [pc, #264]	; (8005f7c <USBD_SetConfig+0x150>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005e7c:	4b3f      	ldr	r3, [pc, #252]	; (8005f7c <USBD_SetConfig+0x150>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe ffe7 	bl	8004e56 <USBD_SetClassConfig>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d008      	beq.n	8005ea4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f962 	bl	800615e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ea2:	e065      	b.n	8005f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa25 	bl	80062f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2203      	movs	r2, #3
 8005eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005eb2:	e05d      	b.n	8005f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa1d 	bl	80062f4 <USBD_CtlSendStatus>
      break;
 8005eba:	e059      	b.n	8005f70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005ebc:	4b2f      	ldr	r3, [pc, #188]	; (8005f7c <USBD_SetConfig+0x150>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d112      	bne.n	8005eea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <USBD_SetConfig+0x150>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ed6:	4b29      	ldr	r3, [pc, #164]	; (8005f7c <USBD_SetConfig+0x150>)
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fe ffd6 	bl	8004e8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa06 	bl	80062f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ee8:	e042      	b.n	8005f70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005eea:	4b24      	ldr	r3, [pc, #144]	; (8005f7c <USBD_SetConfig+0x150>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d02a      	beq.n	8005f4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	4619      	mov	r1, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7fe ffc4 	bl	8004e8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005f06:	4b1d      	ldr	r3, [pc, #116]	; (8005f7c <USBD_SetConfig+0x150>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f10:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <USBD_SetConfig+0x150>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fe ff9d 	bl	8004e56 <USBD_SetClassConfig>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00f      	beq.n	8005f46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f918 	bl	800615e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7fe ffa9 	bl	8004e8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005f44:	e014      	b.n	8005f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9d4 	bl	80062f4 <USBD_CtlSendStatus>
      break;
 8005f4c:	e010      	b.n	8005f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9d0 	bl	80062f4 <USBD_CtlSendStatus>
      break;
 8005f54:	e00c      	b.n	8005f70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f900 	bl	800615e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <USBD_SetConfig+0x150>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7fe ff92 	bl	8004e8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6e:	bf00      	nop
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000011c 	.word	0x2000011c

08005f80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	88db      	ldrh	r3, [r3, #6]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d004      	beq.n	8005f9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f8e2 	bl	800615e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005f9a:	e023      	b.n	8005fe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	dc02      	bgt.n	8005fae <USBD_GetConfig+0x2e>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	dc03      	bgt.n	8005fb4 <USBD_GetConfig+0x34>
 8005fac:	e015      	b.n	8005fda <USBD_GetConfig+0x5a>
 8005fae:	2b03      	cmp	r3, #3
 8005fb0:	d00b      	beq.n	8005fca <USBD_GetConfig+0x4a>
 8005fb2:	e012      	b.n	8005fda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f93c 	bl	8006240 <USBD_CtlSendData>
        break;
 8005fc8:	e00c      	b.n	8005fe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f934 	bl	8006240 <USBD_CtlSendData>
        break;
 8005fd8:	e004      	b.n	8005fe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005fda:	6839      	ldr	r1, [r7, #0]
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f8be 	bl	800615e <USBD_CtlError>
        break;
 8005fe2:	bf00      	nop
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	2b02      	cmp	r3, #2
 8006002:	d81e      	bhi.n	8006042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	88db      	ldrh	r3, [r3, #6]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d004      	beq.n	8006016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f8a5 	bl	800615e <USBD_CtlError>
        break;
 8006014:	e01a      	b.n	800604c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f043 0202 	orr.w	r2, r3, #2
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	330c      	adds	r3, #12
 8006036:	2202      	movs	r2, #2
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f900 	bl	8006240 <USBD_CtlSendData>
      break;
 8006040:	e004      	b.n	800604c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f88a 	bl	800615e <USBD_CtlError>
      break;
 800604a:	bf00      	nop
  }
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	885b      	ldrh	r3, [r3, #2]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d107      	bne.n	8006076 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f940 	bl	80062f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006074:	e013      	b.n	800609e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	885b      	ldrh	r3, [r3, #2]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d10b      	bne.n	8006096 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	889b      	ldrh	r3, [r3, #4]
 8006082:	0a1b      	lsrs	r3, r3, #8
 8006084:	b29b      	uxth	r3, r3
 8006086:	b2da      	uxtb	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f930 	bl	80062f4 <USBD_CtlSendStatus>
}
 8006094:	e003      	b.n	800609e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f860 	bl	800615e <USBD_CtlError>
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d80b      	bhi.n	80060d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	885b      	ldrh	r3, [r3, #2]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d10c      	bne.n	80060e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f910 	bl	80062f4 <USBD_CtlSendStatus>
      }
      break;
 80060d4:	e004      	b.n	80060e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f840 	bl	800615e <USBD_CtlError>
      break;
 80060de:	e000      	b.n	80060e2 <USBD_ClrFeature+0x3c>
      break;
 80060e0:	bf00      	nop
  }
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	781a      	ldrb	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	781a      	ldrb	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3301      	adds	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff fa41 	bl	800559c <SWAPBYTE>
 800611a:	4603      	mov	r3, r0
 800611c:	461a      	mov	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff fa34 	bl	800559c <SWAPBYTE>
 8006134:	4603      	mov	r3, r0
 8006136:	461a      	mov	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fa27 	bl	800559c <SWAPBYTE>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	80da      	strh	r2, [r3, #6]
}
 8006156:	bf00      	nop
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b082      	sub	sp, #8
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006168:	2180      	movs	r1, #128	; 0x80
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fcba 	bl	8006ae4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006170:	2100      	movs	r1, #0
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fcb6 	bl	8006ae4 <USBD_LL_StallEP>
}
 8006178:	bf00      	nop
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d036      	beq.n	8006204 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f000 f836 	bl	800620c <USBD_GetLen>
 80061a0:	4603      	mov	r3, r0
 80061a2:	3301      	adds	r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	4413      	add	r3, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	7812      	ldrb	r2, [r2, #0]
 80061b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	3301      	adds	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	4413      	add	r3, r2
 80061c6:	2203      	movs	r2, #3
 80061c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80061ca:	7dfb      	ldrb	r3, [r7, #23]
 80061cc:	3301      	adds	r3, #1
 80061ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80061d0:	e013      	b.n	80061fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	4413      	add	r3, r2
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	7812      	ldrb	r2, [r2, #0]
 80061dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3301      	adds	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
    idx++;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	3301      	adds	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80061ea:	7dfb      	ldrb	r3, [r7, #23]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	4413      	add	r3, r2
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80061f4:	7dfb      	ldrb	r3, [r7, #23]
 80061f6:	3301      	adds	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e7      	bne.n	80061d2 <USBD_GetString+0x52>
 8006202:	e000      	b.n	8006206 <USBD_GetString+0x86>
    return;
 8006204:	bf00      	nop
  }
}
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800621c:	e005      	b.n	800622a <USBD_GetLen+0x1e>
  {
    len++;
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	3301      	adds	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	3301      	adds	r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f5      	bne.n	800621e <USBD_GetLen+0x12>
  }

  return len;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2202      	movs	r2, #2
 8006250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	2100      	movs	r1, #0
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fcc5 	bl	8006bf6 <USBD_LL_Transmit>

  return USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	2100      	movs	r1, #0
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fcb4 	bl	8006bf6 <USBD_LL_Transmit>

  return USBD_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2203      	movs	r2, #3
 80062a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	2100      	movs	r1, #0
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fcb8 	bl	8006c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	2100      	movs	r1, #0
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fca7 	bl	8006c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2204      	movs	r2, #4
 8006300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006304:	2300      	movs	r3, #0
 8006306:	2200      	movs	r2, #0
 8006308:	2100      	movs	r1, #0
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc73 	bl	8006bf6 <USBD_LL_Transmit>

  return USBD_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2205      	movs	r2, #5
 8006326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800632a:	2300      	movs	r3, #0
 800632c:	2200      	movs	r2, #0
 800632e:	2100      	movs	r1, #0
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc81 	bl	8006c38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006344:	2200      	movs	r2, #0
 8006346:	4912      	ldr	r1, [pc, #72]	; (8006390 <MX_USB_DEVICE_Init+0x50>)
 8006348:	4812      	ldr	r0, [pc, #72]	; (8006394 <MX_USB_DEVICE_Init+0x54>)
 800634a:	f7fe fd07 	bl	8004d5c <USBD_Init>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006354:	f7fa f954 	bl	8000600 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006358:	490f      	ldr	r1, [pc, #60]	; (8006398 <MX_USB_DEVICE_Init+0x58>)
 800635a:	480e      	ldr	r0, [pc, #56]	; (8006394 <MX_USB_DEVICE_Init+0x54>)
 800635c:	f7fe fd2e 	bl	8004dbc <USBD_RegisterClass>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006366:	f7fa f94b 	bl	8000600 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800636a:	490c      	ldr	r1, [pc, #48]	; (800639c <MX_USB_DEVICE_Init+0x5c>)
 800636c:	4809      	ldr	r0, [pc, #36]	; (8006394 <MX_USB_DEVICE_Init+0x54>)
 800636e:	f7fe fc65 	bl	8004c3c <USBD_CDC_RegisterInterface>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006378:	f7fa f942 	bl	8000600 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800637c:	4805      	ldr	r0, [pc, #20]	; (8006394 <MX_USB_DEVICE_Init+0x54>)
 800637e:	f7fe fd53 	bl	8004e28 <USBD_Start>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006388:	f7fa f93a 	bl	8000600 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800638c:	bf00      	nop
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200000ac 	.word	0x200000ac
 8006394:	20000120 	.word	0x20000120
 8006398:	20000018 	.word	0x20000018
 800639c:	20000098 	.word	0x20000098

080063a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063a4:	2200      	movs	r2, #0
 80063a6:	4905      	ldr	r1, [pc, #20]	; (80063bc <CDC_Init_FS+0x1c>)
 80063a8:	4805      	ldr	r0, [pc, #20]	; (80063c0 <CDC_Init_FS+0x20>)
 80063aa:	f7fe fc61 	bl	8004c70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063ae:	4905      	ldr	r1, [pc, #20]	; (80063c4 <CDC_Init_FS+0x24>)
 80063b0:	4803      	ldr	r0, [pc, #12]	; (80063c0 <CDC_Init_FS+0x20>)
 80063b2:	f7fe fc7f 	bl	8004cb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80063b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000bfc 	.word	0x20000bfc
 80063c0:	20000120 	.word	0x20000120
 80063c4:	200003fc 	.word	0x200003fc

080063c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80063cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	71fb      	strb	r3, [r7, #7]
 80063e4:	4613      	mov	r3, r2
 80063e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b23      	cmp	r3, #35	; 0x23
 80063ec:	d84a      	bhi.n	8006484 <CDC_Control_FS+0xac>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <CDC_Control_FS+0x1c>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006485 	.word	0x08006485
 80063f8:	08006485 	.word	0x08006485
 80063fc:	08006485 	.word	0x08006485
 8006400:	08006485 	.word	0x08006485
 8006404:	08006485 	.word	0x08006485
 8006408:	08006485 	.word	0x08006485
 800640c:	08006485 	.word	0x08006485
 8006410:	08006485 	.word	0x08006485
 8006414:	08006485 	.word	0x08006485
 8006418:	08006485 	.word	0x08006485
 800641c:	08006485 	.word	0x08006485
 8006420:	08006485 	.word	0x08006485
 8006424:	08006485 	.word	0x08006485
 8006428:	08006485 	.word	0x08006485
 800642c:	08006485 	.word	0x08006485
 8006430:	08006485 	.word	0x08006485
 8006434:	08006485 	.word	0x08006485
 8006438:	08006485 	.word	0x08006485
 800643c:	08006485 	.word	0x08006485
 8006440:	08006485 	.word	0x08006485
 8006444:	08006485 	.word	0x08006485
 8006448:	08006485 	.word	0x08006485
 800644c:	08006485 	.word	0x08006485
 8006450:	08006485 	.word	0x08006485
 8006454:	08006485 	.word	0x08006485
 8006458:	08006485 	.word	0x08006485
 800645c:	08006485 	.word	0x08006485
 8006460:	08006485 	.word	0x08006485
 8006464:	08006485 	.word	0x08006485
 8006468:	08006485 	.word	0x08006485
 800646c:	08006485 	.word	0x08006485
 8006470:	08006485 	.word	0x08006485
 8006474:	08006485 	.word	0x08006485
 8006478:	08006485 	.word	0x08006485
 800647c:	08006485 	.word	0x08006485
 8006480:	08006485 	.word	0x08006485
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006484:	bf00      	nop
  }

  return (USBD_OK);
 8006486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4805      	ldr	r0, [pc, #20]	; (80064b8 <CDC_Receive_FS+0x24>)
 80064a2:	f7fe fc07 	bl	8004cb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80064a6:	4804      	ldr	r0, [pc, #16]	; (80064b8 <CDC_Receive_FS+0x24>)
 80064a8:	f7fe fc22 	bl	8004cf0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80064ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20000120 	.word	0x20000120

080064bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80064ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	6039      	str	r1, [r7, #0]
 80064ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2212      	movs	r2, #18
 80064f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <USBD_FS_DeviceDescriptor+0x20>)
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	200000c8 	.word	0x200000c8

08006504 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	6039      	str	r1, [r7, #0]
 800650e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2204      	movs	r2, #4
 8006514:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	200000dc 	.word	0x200000dc

08006528 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	6039      	str	r1, [r7, #0]
 8006532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d105      	bne.n	8006546 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	4907      	ldr	r1, [pc, #28]	; (800655c <USBD_FS_ProductStrDescriptor+0x34>)
 800653e:	4808      	ldr	r0, [pc, #32]	; (8006560 <USBD_FS_ProductStrDescriptor+0x38>)
 8006540:	f7ff fe1e 	bl	8006180 <USBD_GetString>
 8006544:	e004      	b.n	8006550 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	4904      	ldr	r1, [pc, #16]	; (800655c <USBD_FS_ProductStrDescriptor+0x34>)
 800654a:	4805      	ldr	r0, [pc, #20]	; (8006560 <USBD_FS_ProductStrDescriptor+0x38>)
 800654c:	f7ff fe18 	bl	8006180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006550:	4b02      	ldr	r3, [pc, #8]	; (800655c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200013fc 	.word	0x200013fc
 8006560:	08006d98 	.word	0x08006d98

08006564 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	4603      	mov	r3, r0
 800656c:	6039      	str	r1, [r7, #0]
 800656e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	4904      	ldr	r1, [pc, #16]	; (8006584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006574:	4804      	ldr	r0, [pc, #16]	; (8006588 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006576:	f7ff fe03 	bl	8006180 <USBD_GetString>
  return USBD_StrDesc;
 800657a:	4b02      	ldr	r3, [pc, #8]	; (8006584 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	200013fc 	.word	0x200013fc
 8006588:	08006db0 	.word	0x08006db0

0800658c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	6039      	str	r1, [r7, #0]
 8006596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	221a      	movs	r2, #26
 800659c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800659e:	f000 f843 	bl	8006628 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80065a2:	4b02      	ldr	r3, [pc, #8]	; (80065ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	200000e0 	.word	0x200000e0

080065b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	6039      	str	r1, [r7, #0]
 80065ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d105      	bne.n	80065ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	4907      	ldr	r1, [pc, #28]	; (80065e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065c6:	4808      	ldr	r0, [pc, #32]	; (80065e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065c8:	f7ff fdda 	bl	8006180 <USBD_GetString>
 80065cc:	e004      	b.n	80065d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80065ce:	683a      	ldr	r2, [r7, #0]
 80065d0:	4904      	ldr	r1, [pc, #16]	; (80065e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80065d2:	4805      	ldr	r0, [pc, #20]	; (80065e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80065d4:	f7ff fdd4 	bl	8006180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80065d8:	4b02      	ldr	r3, [pc, #8]	; (80065e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	200013fc 	.word	0x200013fc
 80065e8:	08006dc4 	.word	0x08006dc4

080065ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	6039      	str	r1, [r7, #0]
 80065f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d105      	bne.n	800660a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	4907      	ldr	r1, [pc, #28]	; (8006620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006602:	4808      	ldr	r0, [pc, #32]	; (8006624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006604:	f7ff fdbc 	bl	8006180 <USBD_GetString>
 8006608:	e004      	b.n	8006614 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	4904      	ldr	r1, [pc, #16]	; (8006620 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800660e:	4805      	ldr	r0, [pc, #20]	; (8006624 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006610:	f7ff fdb6 	bl	8006180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006614:	4b02      	ldr	r3, [pc, #8]	; (8006620 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200013fc 	.word	0x200013fc
 8006624:	08006dd0 	.word	0x08006dd0

08006628 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800662e:	4b0f      	ldr	r3, [pc, #60]	; (800666c <Get_SerialNum+0x44>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <Get_SerialNum+0x48>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800663a:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <Get_SerialNum+0x4c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d009      	beq.n	8006662 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800664e:	2208      	movs	r2, #8
 8006650:	4909      	ldr	r1, [pc, #36]	; (8006678 <Get_SerialNum+0x50>)
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f814 	bl	8006680 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006658:	2204      	movs	r2, #4
 800665a:	4908      	ldr	r1, [pc, #32]	; (800667c <Get_SerialNum+0x54>)
 800665c:	68b8      	ldr	r0, [r7, #8]
 800665e:	f000 f80f 	bl	8006680 <IntToUnicode>
  }
}
 8006662:	bf00      	nop
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	1fff7a10 	.word	0x1fff7a10
 8006670:	1fff7a14 	.word	0x1fff7a14
 8006674:	1fff7a18 	.word	0x1fff7a18
 8006678:	200000e2 	.word	0x200000e2
 800667c:	200000f2 	.word	0x200000f2

08006680 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	4613      	mov	r3, r2
 800668c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]
 8006696:	e027      	b.n	80066e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	0f1b      	lsrs	r3, r3, #28
 800669c:	2b09      	cmp	r3, #9
 800669e:	d80b      	bhi.n	80066b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	0f1b      	lsrs	r3, r3, #28
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4619      	mov	r1, r3
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	440b      	add	r3, r1
 80066b0:	3230      	adds	r2, #48	; 0x30
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e00a      	b.n	80066ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0f1b      	lsrs	r3, r3, #28
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4619      	mov	r1, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	440b      	add	r3, r1
 80066c8:	3237      	adds	r2, #55	; 0x37
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	3301      	adds	r3, #1
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80066e2:	7dfb      	ldrb	r3, [r7, #23]
 80066e4:	3301      	adds	r3, #1
 80066e6:	75fb      	strb	r3, [r7, #23]
 80066e8:	7dfa      	ldrb	r2, [r7, #23]
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3d3      	bcc.n	8006698 <IntToUnicode+0x18>
  }
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	605a      	str	r2, [r3, #4]
 8006712:	609a      	str	r2, [r3, #8]
 8006714:	60da      	str	r2, [r3, #12]
 8006716:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006720:	d13a      	bne.n	8006798 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	4b1e      	ldr	r3, [pc, #120]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	4a1d      	ldr	r2, [pc, #116]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6313      	str	r3, [r2, #48]	; 0x30
 8006732:	4b1b      	ldr	r3, [pc, #108]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800673e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006744:	2302      	movs	r3, #2
 8006746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006748:	2300      	movs	r3, #0
 800674a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800674c:	2303      	movs	r3, #3
 800674e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006750:	230a      	movs	r3, #10
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006754:	f107 0314 	add.w	r3, r7, #20
 8006758:	4619      	mov	r1, r3
 800675a:	4812      	ldr	r0, [pc, #72]	; (80067a4 <HAL_PCD_MspInit+0xa4>)
 800675c:	f7fa f996 	bl	8000a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006760:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	4a0e      	ldr	r2, [pc, #56]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	6353      	str	r3, [r2, #52]	; 0x34
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
 8006770:	4b0b      	ldr	r3, [pc, #44]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 8006772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006774:	4a0a      	ldr	r2, [pc, #40]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 8006776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800677a:	6453      	str	r3, [r2, #68]	; 0x44
 800677c:	4b08      	ldr	r3, [pc, #32]	; (80067a0 <HAL_PCD_MspInit+0xa0>)
 800677e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006788:	2200      	movs	r2, #0
 800678a:	2100      	movs	r1, #0
 800678c:	2043      	movs	r0, #67	; 0x43
 800678e:	f7fa f946 	bl	8000a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006792:	2043      	movs	r0, #67	; 0x43
 8006794:	f7fa f95f 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006798:	bf00      	nop
 800679a:	3728      	adds	r7, #40	; 0x28
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40020000 	.word	0x40020000

080067a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067bc:	4619      	mov	r1, r3
 80067be:	4610      	mov	r0, r2
 80067c0:	f7fe fb7f 	bl	8004ec2 <USBD_LL_SetupStage>
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80067de:	78fa      	ldrb	r2, [r7, #3]
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	4619      	mov	r1, r3
 80067f6:	f7fe fbb9 	bl	8004f6c <USBD_LL_DataOutStage>
}
 80067fa:	bf00      	nop
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	334c      	adds	r3, #76	; 0x4c
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	4619      	mov	r1, r3
 800682a:	f7fe fc52 	bl	80050d2 <USBD_LL_DataInStage>
}
 800682e:	bf00      	nop
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fd86 	bl	8005356 <USBD_LL_SOF>
}
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b084      	sub	sp, #16
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d102      	bne.n	800686c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
 800686a:	e008      	b.n	800687e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d102      	bne.n	800687a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006874:	2301      	movs	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	e001      	b.n	800687e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800687a:	f7f9 fec1 	bl	8000600 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006884:	7bfa      	ldrb	r2, [r7, #15]
 8006886:	4611      	mov	r1, r2
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fd26 	bl	80052da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006894:	4618      	mov	r0, r3
 8006896:	f7fe fcce 	bl	8005236 <USBD_LL_Reset>
}
 800689a:	bf00      	nop
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fd21 	bl	80052fa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a1b      	ldr	r3, [r3, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <HAL_PCD_SuspendCallback+0x48>)
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	4a03      	ldr	r2, [pc, #12]	; (80068ec <HAL_PCD_SuspendCallback+0x48>)
 80068de:	f043 0306 	orr.w	r3, r3, #6
 80068e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80068e4:	bf00      	nop
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	e000ed00 	.word	0xe000ed00

080068f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fe fd11 	bl	8005326 <USBD_LL_Resume>
}
 8006904:	bf00      	nop
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f7fe fd69 	bl	80053fa <USBD_LL_IsoOUTIncomplete>
}
 8006928:	bf00      	nop
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	460b      	mov	r3, r1
 800693a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	4611      	mov	r1, r2
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fd25 	bl	8005396 <USBD_LL_IsoINIncomplete>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fd7b 	bl	800545e <USBD_LL_DevConnected>
}
 8006968:	bf00      	nop
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800697e:	4618      	mov	r0, r3
 8006980:	f7fe fd78 	bl	8005474 <USBD_LL_DevDisconnected>
}
 8006984:	bf00      	nop
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d13c      	bne.n	8006a16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800699c:	4a20      	ldr	r2, [pc, #128]	; (8006a20 <USBD_LL_Init+0x94>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a1e      	ldr	r2, [pc, #120]	; (8006a20 <USBD_LL_Init+0x94>)
 80069a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80069ac:	4b1c      	ldr	r3, [pc, #112]	; (8006a20 <USBD_LL_Init+0x94>)
 80069ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80069b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80069b4:	4b1a      	ldr	r3, [pc, #104]	; (8006a20 <USBD_LL_Init+0x94>)
 80069b6:	2204      	movs	r2, #4
 80069b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <USBD_LL_Init+0x94>)
 80069bc:	2202      	movs	r2, #2
 80069be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <USBD_LL_Init+0x94>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80069c6:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <USBD_LL_Init+0x94>)
 80069c8:	2202      	movs	r2, #2
 80069ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <USBD_LL_Init+0x94>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80069d2:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <USBD_LL_Init+0x94>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80069d8:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <USBD_LL_Init+0x94>)
 80069da:	2200      	movs	r2, #0
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80069de:	4b10      	ldr	r3, [pc, #64]	; (8006a20 <USBD_LL_Init+0x94>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	; (8006a20 <USBD_LL_Init+0x94>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80069ea:	480d      	ldr	r0, [pc, #52]	; (8006a20 <USBD_LL_Init+0x94>)
 80069ec:	f7fa f9ea 	bl	8000dc4 <HAL_PCD_Init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80069f6:	f7f9 fe03 	bl	8000600 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80069fa:	2180      	movs	r1, #128	; 0x80
 80069fc:	4808      	ldr	r0, [pc, #32]	; (8006a20 <USBD_LL_Init+0x94>)
 80069fe:	f7fb fc42 	bl	8002286 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006a02:	2240      	movs	r2, #64	; 0x40
 8006a04:	2100      	movs	r1, #0
 8006a06:	4806      	ldr	r0, [pc, #24]	; (8006a20 <USBD_LL_Init+0x94>)
 8006a08:	f7fb fbf6 	bl	80021f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006a0c:	2280      	movs	r2, #128	; 0x80
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4803      	ldr	r0, [pc, #12]	; (8006a20 <USBD_LL_Init+0x94>)
 8006a12:	f7fb fbf1 	bl	80021f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3708      	adds	r7, #8
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	200015fc 	.word	0x200015fc

08006a24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fa fadf 	bl	8000ffe <HAL_PCD_Start>
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 f942 	bl	8006cd0 <USBD_Get_USB_Status>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	4608      	mov	r0, r1
 8006a64:	4611      	mov	r1, r2
 8006a66:	461a      	mov	r2, r3
 8006a68:	4603      	mov	r3, r0
 8006a6a:	70fb      	strb	r3, [r7, #3]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70bb      	strb	r3, [r7, #2]
 8006a70:	4613      	mov	r3, r2
 8006a72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006a82:	78bb      	ldrb	r3, [r7, #2]
 8006a84:	883a      	ldrh	r2, [r7, #0]
 8006a86:	78f9      	ldrb	r1, [r7, #3]
 8006a88:	f7fa ffb0 	bl	80019ec <HAL_PCD_EP_Open>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f91c 	bl	8006cd0 <USBD_Get_USB_Status>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fa fff9 	bl	8001abc <HAL_PCD_EP_Close>
 8006aca:	4603      	mov	r3, r0
 8006acc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f8fd 	bl	8006cd0 <USBD_Get_USB_Status>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7fb f8d1 	bl	8001caa <HAL_PCD_EP_SetStall>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f8de 	bl	8006cd0 <USBD_Get_USB_Status>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fb f916 	bl	8001d72 <HAL_PCD_EP_ClrStall>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 f8bf 	bl	8006cd0 <USBD_Get_USB_Status>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006b72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	da0b      	bge.n	8006b94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4613      	mov	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	333e      	adds	r3, #62	; 0x3e
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	e00b      	b.n	8006bac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	440b      	add	r3, r1
 8006ba6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006baa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fa fee3 	bl	80019a2 <HAL_PCD_SetAddress>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 f874 	bl	8006cd0 <USBD_Get_USB_Status>
 8006be8:	4603      	mov	r3, r0
 8006bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b086      	sub	sp, #24
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	60f8      	str	r0, [r7, #12]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
 8006c02:	460b      	mov	r3, r1
 8006c04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c14:	7af9      	ldrb	r1, [r7, #11]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	f7fa fffc 	bl	8001c16 <HAL_PCD_EP_Transmit>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f853 	bl	8006cd0 <USBD_Get_USB_Status>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	607a      	str	r2, [r7, #4]
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	460b      	mov	r3, r1
 8006c46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006c56:	7af9      	ldrb	r1, [r7, #11]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	f7fa ff78 	bl	8001b50 <HAL_PCD_EP_Receive>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f832 	bl	8006cd0 <USBD_Get_USB_Status>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c70:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b082      	sub	sp, #8
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fa ffa8 	bl	8001be6 <HAL_PCD_EP_GetRxCount>
 8006c96:	4603      	mov	r3, r0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006ca8:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <USBD_static_malloc+0x18>)
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20001b08 	.word	0x20001b08

08006cbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d817      	bhi.n	8006d14 <USBD_Get_USB_Status+0x44>
 8006ce4:	a201      	add	r2, pc, #4	; (adr r2, 8006cec <USBD_Get_USB_Status+0x1c>)
 8006ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cea:	bf00      	nop
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d03 	.word	0x08006d03
 8006cf4:	08006d09 	.word	0x08006d09
 8006cf8:	08006d0f 	.word	0x08006d0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006d00:	e00b      	b.n	8006d1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d02:	2303      	movs	r3, #3
 8006d04:	73fb      	strb	r3, [r7, #15]
    break;
 8006d06:	e008      	b.n	8006d1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d0c:	e005      	b.n	8006d1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	73fb      	strb	r3, [r7, #15]
    break;
 8006d12:	e002      	b.n	8006d1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d14:	2303      	movs	r3, #3
 8006d16:	73fb      	strb	r3, [r7, #15]
    break;
 8006d18:	bf00      	nop
  }
  return usb_status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <memset>:
 8006d28:	4402      	add	r2, r0
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d100      	bne.n	8006d32 <memset+0xa>
 8006d30:	4770      	bx	lr
 8006d32:	f803 1b01 	strb.w	r1, [r3], #1
 8006d36:	e7f9      	b.n	8006d2c <memset+0x4>

08006d38 <__libc_init_array>:
 8006d38:	b570      	push	{r4, r5, r6, lr}
 8006d3a:	4d0d      	ldr	r5, [pc, #52]	; (8006d70 <__libc_init_array+0x38>)
 8006d3c:	4c0d      	ldr	r4, [pc, #52]	; (8006d74 <__libc_init_array+0x3c>)
 8006d3e:	1b64      	subs	r4, r4, r5
 8006d40:	10a4      	asrs	r4, r4, #2
 8006d42:	2600      	movs	r6, #0
 8006d44:	42a6      	cmp	r6, r4
 8006d46:	d109      	bne.n	8006d5c <__libc_init_array+0x24>
 8006d48:	4d0b      	ldr	r5, [pc, #44]	; (8006d78 <__libc_init_array+0x40>)
 8006d4a:	4c0c      	ldr	r4, [pc, #48]	; (8006d7c <__libc_init_array+0x44>)
 8006d4c:	f000 f818 	bl	8006d80 <_init>
 8006d50:	1b64      	subs	r4, r4, r5
 8006d52:	10a4      	asrs	r4, r4, #2
 8006d54:	2600      	movs	r6, #0
 8006d56:	42a6      	cmp	r6, r4
 8006d58:	d105      	bne.n	8006d66 <__libc_init_array+0x2e>
 8006d5a:	bd70      	pop	{r4, r5, r6, pc}
 8006d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d60:	4798      	blx	r3
 8006d62:	3601      	adds	r6, #1
 8006d64:	e7ee      	b.n	8006d44 <__libc_init_array+0xc>
 8006d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6a:	4798      	blx	r3
 8006d6c:	3601      	adds	r6, #1
 8006d6e:	e7f2      	b.n	8006d56 <__libc_init_array+0x1e>
 8006d70:	08006df8 	.word	0x08006df8
 8006d74:	08006df8 	.word	0x08006df8
 8006d78:	08006df8 	.word	0x08006df8
 8006d7c:	08006dfc 	.word	0x08006dfc

08006d80 <_init>:
 8006d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d82:	bf00      	nop
 8006d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d86:	bc08      	pop	{r3}
 8006d88:	469e      	mov	lr, r3
 8006d8a:	4770      	bx	lr

08006d8c <_fini>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	bf00      	nop
 8006d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d92:	bc08      	pop	{r3}
 8006d94:	469e      	mov	lr, r3
 8006d96:	4770      	bx	lr
