
USBd 0.2_CDC_libuse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008870  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a78  08008a78  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008a78  08008a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a80  08008a80  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a80  08008a80  00018a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a84  08008a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cbc  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000a00  20001db8  20001db8  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001377f  00000000  00000000  0002016f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003350  00000000  00000000  000338ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ee8  00000000  00000000  00036c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b4f  00000000  00000000  00037b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024366  00000000  00000000  00038677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001375b  00000000  00000000  0005c9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d2c7c  00000000  00000000  00070138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ce8  00000000  00000000  00142db4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00146a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080089e0 	.word	0x080089e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080089e0 	.word	0x080089e0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa80 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f80a 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f007 fca8 	bl	8007e38 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004e8:	f000 f86e 	bl	80005c8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8be 	bl	800066c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <main+0x1c>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f008 fa2e 	bl	8008964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000554:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000564:	2304      	movs	r3, #4
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000568:	23a8      	movs	r3, #168	; 0xa8
 800056a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000570:	2307      	movs	r3, #7
 8000572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	4618      	mov	r0, r3
 800057a:	f002 fc9b 	bl	8002eb4 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000584:	f000 f8ee 	bl	8000764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2302      	movs	r3, #2
 800058e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000594:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2105      	movs	r1, #5
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fefc 	bl	80033a4 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005b2:	f000 f8d7 	bl	8000764 <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	463b      	mov	r3, r7
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_ADC1_Init+0x98>)
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <MX_ADC1_Init+0x9c>)
 80005de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_ADC1_Init+0x98>)
 80005e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_ADC1_Init+0x98>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005fa:	4b19      	ldr	r3, [pc, #100]	; (8000660 <MX_ADC1_Init+0x98>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_ADC1_Init+0x98>)
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <MX_ADC1_Init+0xa0>)
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_ADC1_Init+0x98>)
 8000616:	2201      	movs	r2, #1
 8000618:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_ADC1_Init+0x98>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000628:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0x98>)
 800062a:	f000 fa6d 	bl	8000b08 <HAL_ADC_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000634:	f000 f896 	bl	8000764 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800063c:	2301      	movs	r3, #1
 800063e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000644:	463b      	mov	r3, r7
 8000646:	4619      	mov	r1, r3
 8000648:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_ADC1_Init+0x98>)
 800064a:	f000 fc3f 	bl	8000ecc <HAL_ADC_ConfigChannel>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000654:	f000 f886 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000118 	.word	0x20000118
 8000664:	40012000 	.word	0x40012000
 8000668:	0f000001 	.word	0x0f000001

0800066c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000670:	4b11      	ldr	r3, [pc, #68]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000672:	4a12      	ldr	r2, [pc, #72]	; (80006bc <MX_USART2_UART_Init+0x50>)
 8000674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800067c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068a:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000692:	220c      	movs	r2, #12
 8000694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f003 f89e 	bl	80037e4 <HAL_UART_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ae:	f000 f859 	bl	8000764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000160 	.word	0x20000160
 80006bc:	40004400 	.word	0x40004400

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b20      	ldr	r3, [pc, #128]	; (800075c <MX_GPIO_Init+0x9c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a1f      	ldr	r2, [pc, #124]	; (800075c <MX_GPIO_Init+0x9c>)
 80006e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b1d      	ldr	r3, [pc, #116]	; (800075c <MX_GPIO_Init+0x9c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <MX_GPIO_Init+0x9c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_GPIO_Init+0x9c>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_GPIO_Init+0x9c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_GPIO_Init+0x9c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <MX_GPIO_Init+0x9c>)
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	6313      	str	r3, [r2, #48]	; 0x30
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_GPIO_Init+0x9c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	f003 0308 	and.w	r3, r3, #8
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <MX_GPIO_Init+0xa0>)
 8000732:	f001 f929 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000736:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800073a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4619      	mov	r1, r3
 800074e:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_GPIO_Init+0xa0>)
 8000750:	f000 ff7e 	bl	8001650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000754:	bf00      	nop
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40020c00 	.word	0x40020c00

08000764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
}
 800076a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076c:	e7fe      	b.n	800076c <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_MspInit+0x4c>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079a:	4a08      	ldr	r2, [pc, #32]	; (80007bc <HAL_MspInit+0x4c>)
 800079c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a0:	6413      	str	r3, [r2, #64]	; 0x40
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <HAL_MspInit+0x4c>)
 80007a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007ae:	2007      	movs	r0, #7
 80007b0:	f000 fe7a 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800

080007c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_ADC_MspInit+0x7c>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d127      	bne.n	8000832 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <HAL_ADC_MspInit+0x80>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <HAL_ADC_MspInit+0x80>)
 80007ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f0:	6453      	str	r3, [r2, #68]	; 0x44
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_ADC_MspInit+0x80>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_ADC_MspInit+0x80>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <HAL_ADC_MspInit+0x80>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <HAL_ADC_MspInit+0x80>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081a:	2301      	movs	r3, #1
 800081c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081e:	2303      	movs	r3, #3
 8000820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_ADC_MspInit+0x84>)
 800082e:	f000 ff0f 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40012000 	.word	0x40012000
 8000840:	40023800 	.word	0x40023800
 8000844:	40020000 	.word	0x40020000

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d133      	bne.n	80008d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0x98>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x98>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008a2:	230c      	movs	r3, #12
 80008a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b2:	2307      	movs	r3, #7
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <HAL_UART_MspInit+0x9c>)
 80008be:	f000 fec7 	bl	8001650 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2026      	movs	r0, #38	; 0x26
 80008c8:	f000 fdf9 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008cc:	2026      	movs	r0, #38	; 0x26
 80008ce:	f000 fe12 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40004400 	.word	0x40004400
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f8a4 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART2_IRQHandler+0x10>)
 8000942:	f002 ff9d 	bl	8003880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000160 	.word	0x20000160

08000950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <OTG_FS_IRQHandler+0x10>)
 8000956:	f001 f980 	bl	8001c5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000168c 	.word	0x2000168c

08000964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SystemInit+0x20>)
 800096a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <SystemInit+0x20>)
 8000970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000974:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098e:	490e      	ldr	r1, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000990:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a4:	4c0b      	ldr	r4, [pc, #44]	; (80009d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009b2:	f7ff ffd7 	bl	8000964 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b6:	f007 ffef 	bl	8008998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ba:	f7ff fd8b 	bl	80004d4 <main>
  bx  lr    
 80009be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80009cc:	08008a88 	.word	0x08008a88
  ldr r2, =_sbss
 80009d0:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80009d4:	20001db8 	.word	0x20001db8

080009d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e0:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <HAL_Init+0x40>)
 80009e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <HAL_Init+0x40>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x40>)
 80009fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 fd4f 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff feae 	bl	8000770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023c00 	.word	0x40023c00

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fd67 	bl	8001512 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	f000 fd2f 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	20000004 	.word	0x20000004

08000a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_IncTick+0x24>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	200001a4 	.word	0x200001a4

08000aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <HAL_GetTick+0x14>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200001a4 	.word	0x200001a4

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff ffee 	bl	8000aa8 <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_Delay+0x44>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffde 	bl	8000aa8 <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e033      	b.n	8000b86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d109      	bne.n	8000b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff fe4a 	bl	80007c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d118      	bne.n	8000b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b4e:	f023 0302 	bic.w	r3, r3, #2
 8000b52:	f043 0202 	orr.w	r2, r3, #2
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fad8 	bl	8001110 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2200      	movs	r2, #0
 8000b64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f023 0303 	bic.w	r3, r3, #3
 8000b6e:	f043 0201 	orr.w	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
 8000b76:	e001      	b.n	8000b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Start+0x1a>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e0b2      	b.n	8000d10 <HAL_ADC_Start+0x180>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2201      	movs	r2, #1
 8000bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d018      	beq.n	8000bf2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f042 0201 	orr.w	r2, r2, #1
 8000bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bd0:	4b52      	ldr	r3, [pc, #328]	; (8000d1c <HAL_ADC_Start+0x18c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a52      	ldr	r2, [pc, #328]	; (8000d20 <HAL_ADC_Start+0x190>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	0c9a      	lsrs	r2, r3, #18
 8000bdc:	4613      	mov	r3, r2
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	4413      	add	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000be4:	e002      	b.n	8000bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f9      	bne.n	8000be6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d17a      	bne.n	8000cf6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d007      	beq.n	8000c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c3e:	d106      	bne.n	8000c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c44:	f023 0206 	bic.w	r2, r3, #6
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8000c4c:	e002      	b.n	8000c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2200      	movs	r2, #0
 8000c52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c5c:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <HAL_ADC_Start+0x194>)
 8000c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000c68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	f003 031f 	and.w	r3, r3, #31
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d12a      	bne.n	8000ccc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a2b      	ldr	r2, [pc, #172]	; (8000d28 <HAL_ADC_Start+0x198>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d015      	beq.n	8000cac <HAL_ADC_Start+0x11c>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <HAL_ADC_Start+0x19c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d105      	bne.n	8000c96 <HAL_ADC_Start+0x106>
 8000c8a:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <HAL_ADC_Start+0x194>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 031f 	and.w	r3, r3, #31
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00a      	beq.n	8000cac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <HAL_ADC_Start+0x1a0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d136      	bne.n	8000d0e <HAL_ADC_Start+0x17e>
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_ADC_Start+0x194>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d130      	bne.n	8000d0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d129      	bne.n	8000d0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	e020      	b.n	8000d0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_ADC_Start+0x198>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d11b      	bne.n	8000d0e <HAL_ADC_Start+0x17e>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d114      	bne.n	8000d0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689a      	ldr	r2, [r3, #8]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	e00b      	b.n	8000d0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f043 0210 	orr.w	r2, r3, #16
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	431bde83 	.word	0x431bde83
 8000d24:	40012300 	.word	0x40012300
 8000d28:	40012000 	.word	0x40012000
 8000d2c:	40012100 	.word	0x40012100
 8000d30:	40012200 	.word	0x40012200

08000d34 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d101      	bne.n	8000d4a <HAL_ADC_Stop+0x16>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e021      	b.n	8000d8e <HAL_ADC_Stop+0x5a>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f022 0201 	bic.w	r2, r2, #1
 8000d60:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d109      	bne.n	8000d84 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d78:	f023 0301 	bic.w	r3, r3, #1
 8000d7c:	f043 0201 	orr.w	r2, r3, #1
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000db6:	d113      	bne.n	8000de0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dc6:	d10b      	bne.n	8000de0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f043 0220 	orr.w	r2, r3, #32
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e063      	b.n	8000ea8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000de0:	f7ff fe62 	bl	8000aa8 <HAL_GetTick>
 8000de4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000de6:	e021      	b.n	8000e2c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dee:	d01d      	beq.n	8000e2c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_PollForConversion+0x6c>
 8000df6:	f7ff fe57 	bl	8000aa8 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d212      	bcs.n	8000e2c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d00b      	beq.n	8000e2c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f043 0204 	orr.w	r2, r3, #4
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	e03d      	b.n	8000ea8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d1d6      	bne.n	8000de8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f06f 0212 	mvn.w	r2, #18
 8000e42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d123      	bne.n	8000ea6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d11f      	bne.n	8000ea6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d111      	bne.n	8000ea6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d105      	bne.n	8000ea6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d101      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1c>
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	e105      	b.n	80010f4 <HAL_ADC_ConfigChannel+0x228>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b09      	cmp	r3, #9
 8000ef6:	d925      	bls.n	8000f44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68d9      	ldr	r1, [r3, #12]
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	3b1e      	subs	r3, #30
 8000f0e:	2207      	movs	r2, #7
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43da      	mvns	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	400a      	ands	r2, r1
 8000f1c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68d9      	ldr	r1, [r3, #12]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	4618      	mov	r0, r3
 8000f30:	4603      	mov	r3, r0
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4403      	add	r3, r0
 8000f36:	3b1e      	subs	r3, #30
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	e022      	b.n	8000f8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6919      	ldr	r1, [r3, #16]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	461a      	mov	r2, r3
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	2207      	movs	r2, #7
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	400a      	ands	r2, r1
 8000f66:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6919      	ldr	r1, [r3, #16]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4403      	add	r3, r0
 8000f80:	409a      	lsls	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d824      	bhi.n	8000fdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b05      	subs	r3, #5
 8000fa4:	221f      	movs	r2, #31
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	400a      	ands	r2, r1
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	3b05      	subs	r3, #5
 8000fce:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8000fda:	e04c      	b.n	8001076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b0c      	cmp	r3, #12
 8000fe2:	d824      	bhi.n	800102e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b23      	subs	r3, #35	; 0x23
 8000ff6:	221f      	movs	r2, #31
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43da      	mvns	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	400a      	ands	r2, r1
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b23      	subs	r3, #35	; 0x23
 8001020:	fa00 f203 	lsl.w	r2, r0, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
 800102c:	e023      	b.n	8001076 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4613      	mov	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	3b41      	subs	r3, #65	; 0x41
 8001040:	221f      	movs	r2, #31
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	400a      	ands	r2, r1
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	4613      	mov	r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	3b41      	subs	r3, #65	; 0x41
 800106a:	fa00 f203 	lsl.w	r2, r0, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	430a      	orrs	r2, r1
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001076:	4b22      	ldr	r3, [pc, #136]	; (8001100 <HAL_ADC_ConfigChannel+0x234>)
 8001078:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a21      	ldr	r2, [pc, #132]	; (8001104 <HAL_ADC_ConfigChannel+0x238>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d109      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x1cc>
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b12      	cmp	r3, #18
 800108a:	d105      	bne.n	8001098 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_ADC_ConfigChannel+0x238>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d123      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x21e>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d003      	beq.n	80010b2 <HAL_ADC_ConfigChannel+0x1e6>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b11      	cmp	r3, #17
 80010b0:	d11b      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b10      	cmp	r3, #16
 80010c4:	d111      	bne.n	80010ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_ADC_ConfigChannel+0x23c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a10      	ldr	r2, [pc, #64]	; (800110c <HAL_ADC_ConfigChannel+0x240>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	0c9a      	lsrs	r2, r3, #18
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010dc:	e002      	b.n	80010e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f9      	bne.n	80010de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40012300 	.word	0x40012300
 8001104:	40012000 	.word	0x40012000
 8001108:	20000000 	.word	0x20000000
 800110c:	431bde83 	.word	0x431bde83

08001110 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001118:	4b79      	ldr	r3, [pc, #484]	; (8001300 <ADC_Init+0x1f0>)
 800111a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	431a      	orrs	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6859      	ldr	r1, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	021a      	lsls	r2, r3, #8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	6859      	ldr	r1, [r3, #4]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800118a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6899      	ldr	r1, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a2:	4a58      	ldr	r2, [pc, #352]	; (8001304 <ADC_Init+0x1f4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d022      	beq.n	80011ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6899      	ldr	r1, [r3, #8]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6899      	ldr	r1, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	e00f      	b.n	800120e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800120c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0202 	bic.w	r2, r2, #2
 800121c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6899      	ldr	r1, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7e1b      	ldrb	r3, [r3, #24]
 8001228:	005a      	lsls	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d01b      	beq.n	8001274 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800124a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800125a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6859      	ldr	r1, [r3, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	3b01      	subs	r3, #1
 8001268:	035a      	lsls	r2, r3, #13
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	e007      	b.n	8001284 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001282:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001292:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	3b01      	subs	r3, #1
 80012a0:	051a      	lsls	r2, r3, #20
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80012b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6899      	ldr	r1, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012c6:	025a      	lsls	r2, r3, #9
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6899      	ldr	r1, [r3, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	029a      	lsls	r2, r3, #10
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	609a      	str	r2, [r3, #8]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	40012300 	.word	0x40012300
 8001304:	0f000001 	.word	0x0f000001

08001308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131e:	68ba      	ldr	r2, [r7, #8]
 8001320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001324:	4013      	ands	r3, r2
 8001326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <__NVIC_SetPriorityGrouping+0x44>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <__NVIC_GetPriorityGrouping+0x18>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 0307 	and.w	r3, r3, #7
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	2b00      	cmp	r3, #0
 800137c:	db0b      	blt.n	8001396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	f003 021f 	and.w	r2, r3, #31
 8001384:	4907      	ldr	r1, [pc, #28]	; (80013a4 <__NVIC_EnableIRQ+0x38>)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	095b      	lsrs	r3, r3, #5
 800138c:	2001      	movs	r0, #1
 800138e:	fa00 f202 	lsl.w	r2, r0, r2
 8001392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000e100 	.word	0xe000e100

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff29 	bl	8001308 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff3e 	bl	8001350 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff31 	bl	800136c <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa2 	bl	8001464 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff fab6 	bl	8000aa8 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d008      	beq.n	800155c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e052      	b.n	8001602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0216 	bic.w	r2, r2, #22
 800156a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695a      	ldr	r2, [r3, #20]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800157a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d103      	bne.n	800158c <HAL_DMA_Abort+0x62>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0208 	bic.w	r2, r2, #8
 800159a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0201 	bic.w	r2, r2, #1
 80015aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ac:	e013      	b.n	80015d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ae:	f7ff fa7b 	bl	8000aa8 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d90c      	bls.n	80015d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e015      	b.n	8001602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1e4      	bne.n	80015ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e8:	223f      	movs	r2, #63	; 0x3f
 80015ea:	409a      	lsls	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d004      	beq.n	8001628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e00c      	b.n	8001642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2205      	movs	r2, #5
 800162c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	e16b      	b.n	8001944 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800166c:	2201      	movs	r2, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	429a      	cmp	r2, r3
 8001686:	f040 815a 	bne.w	800193e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b01      	cmp	r3, #1
 8001694:	d005      	beq.n	80016a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d130      	bne.n	8001704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d8:	2201      	movs	r2, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 0201 	and.w	r2, r3, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b03      	cmp	r3, #3
 800170e:	d017      	beq.n	8001740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4013      	ands	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0303 	and.w	r3, r3, #3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d123      	bne.n	8001794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	08da      	lsrs	r2, r3, #3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3208      	adds	r2, #8
 8001754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	220f      	movs	r2, #15
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4013      	ands	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	691a      	ldr	r2, [r3, #16]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4313      	orrs	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3208      	adds	r2, #8
 800178e:	69b9      	ldr	r1, [r7, #24]
 8001790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 0203 	and.w	r2, r3, #3
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80b4 	beq.w	800193e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b60      	ldr	r3, [pc, #384]	; (800195c <HAL_GPIO_Init+0x30c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a5f      	ldr	r2, [pc, #380]	; (800195c <HAL_GPIO_Init+0x30c>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <HAL_GPIO_Init+0x30c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f2:	4a5b      	ldr	r2, [pc, #364]	; (8001960 <HAL_GPIO_Init+0x310>)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a52      	ldr	r2, [pc, #328]	; (8001964 <HAL_GPIO_Init+0x314>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d02b      	beq.n	8001876 <HAL_GPIO_Init+0x226>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a51      	ldr	r2, [pc, #324]	; (8001968 <HAL_GPIO_Init+0x318>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d025      	beq.n	8001872 <HAL_GPIO_Init+0x222>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a50      	ldr	r2, [pc, #320]	; (800196c <HAL_GPIO_Init+0x31c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d01f      	beq.n	800186e <HAL_GPIO_Init+0x21e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4f      	ldr	r2, [pc, #316]	; (8001970 <HAL_GPIO_Init+0x320>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d019      	beq.n	800186a <HAL_GPIO_Init+0x21a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <HAL_GPIO_Init+0x324>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0x216>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <HAL_GPIO_Init+0x328>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00d      	beq.n	8001862 <HAL_GPIO_Init+0x212>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x32c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d007      	beq.n	800185e <HAL_GPIO_Init+0x20e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x330>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_GPIO_Init+0x20a>
 8001856:	2307      	movs	r3, #7
 8001858:	e00e      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800185a:	2308      	movs	r3, #8
 800185c:	e00c      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800185e:	2306      	movs	r3, #6
 8001860:	e00a      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001862:	2305      	movs	r3, #5
 8001864:	e008      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001866:	2304      	movs	r3, #4
 8001868:	e006      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800186a:	2303      	movs	r3, #3
 800186c:	e004      	b.n	8001878 <HAL_GPIO_Init+0x228>
 800186e:	2302      	movs	r3, #2
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x228>
 8001876:	2300      	movs	r3, #0
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f002 0203 	and.w	r2, r2, #3
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4093      	lsls	r3, r2
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001888:	4935      	ldr	r1, [pc, #212]	; (8001960 <HAL_GPIO_Init+0x310>)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001896:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <HAL_GPIO_Init+0x334>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ba:	4a32      	ldr	r2, [pc, #200]	; (8001984 <HAL_GPIO_Init+0x334>)
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <HAL_GPIO_Init+0x334>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e4:	4a27      	ldr	r2, [pc, #156]	; (8001984 <HAL_GPIO_Init+0x334>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <HAL_GPIO_Init+0x334>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4013      	ands	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800190e:	4a1d      	ldr	r2, [pc, #116]	; (8001984 <HAL_GPIO_Init+0x334>)
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_GPIO_Init+0x334>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001938:	4a12      	ldr	r2, [pc, #72]	; (8001984 <HAL_GPIO_Init+0x334>)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3301      	adds	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b0f      	cmp	r3, #15
 8001948:	f67f ae90 	bls.w	800166c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800
 8001960:	40013800 	.word	0x40013800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020400 	.word	0x40020400
 800196c:	40020800 	.word	0x40020800
 8001970:	40020c00 	.word	0x40020c00
 8001974:	40021000 	.word	0x40021000
 8001978:	40021400 	.word	0x40021400
 800197c:	40021800 	.word	0x40021800
 8001980:	40021c00 	.word	0x40021c00
 8001984:	40013c00 	.word	0x40013c00

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	619a      	str	r2, [r3, #24]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019bc:	b08f      	sub	sp, #60	; 0x3c
 80019be:	af0a      	add	r7, sp, #40	; 0x28
 80019c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e10f      	b.n	8001bec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f006 fca8 	bl	800833c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ff13 	bl	8004836 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	687e      	ldr	r6, [r7, #4]
 8001a18:	466d      	mov	r5, sp
 8001a1a:	f106 0410 	add.w	r4, r6, #16
 8001a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a2e:	1d33      	adds	r3, r6, #4
 8001a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f002 fdea 	bl	800460c <USB_CoreInit>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2202      	movs	r2, #2
 8001a42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0d0      	b.n	8001bec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 ff01 	bl	8004858 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	73fb      	strb	r3, [r7, #15]
 8001a5a:	e04a      	b.n	8001af2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	333d      	adds	r3, #61	; 0x3d
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a70:	7bfa      	ldrb	r2, [r7, #15]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4413      	add	r3, r2
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	333c      	adds	r3, #60	; 0x3c
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	b298      	uxth	r0, r3
 8001a8a:	6879      	ldr	r1, [r7, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	440b      	add	r3, r1
 8001a96:	3344      	adds	r3, #68	; 0x44
 8001a98:	4602      	mov	r2, r0
 8001a9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a9c:	7bfa      	ldrb	r2, [r7, #15]
 8001a9e:	6879      	ldr	r1, [r7, #4]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	3340      	adds	r3, #64	; 0x40
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	3348      	adds	r3, #72	; 0x48
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	334c      	adds	r3, #76	; 0x4c
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3354      	adds	r3, #84	; 0x54
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	3301      	adds	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	7bfa      	ldrb	r2, [r7, #15]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d3af      	bcc.n	8001a5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e044      	b.n	8001b8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b02:	7bfa      	ldrb	r2, [r7, #15]
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001b2a:	7bfa      	ldrb	r2, [r7, #15]
 8001b2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d3b5      	bcc.n	8001b02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	687e      	ldr	r6, [r7, #4]
 8001b9e:	466d      	mov	r5, sp
 8001ba0:	f106 0410 	add.w	r4, r6, #16
 8001ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bb4:	1d33      	adds	r3, r6, #4
 8001bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f002 fe99 	bl	80048f0 <USB_DevInit>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e00d      	b.n	8001bec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 ffe8 	bl	8005bba <USB_DevDisconnect>

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_PCD_Start+0x1c>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e020      	b.n	8001c52 <HAL_PCD_Start+0x5e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d109      	bne.n	8001c34 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d005      	beq.n	8001c34 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f002 fdeb 	bl	8004814 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f003 ff98 	bl	8005b78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c5a:	b590      	push	{r4, r7, lr}
 8001c5c:	b08d      	sub	sp, #52	; 0x34
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 f856 	bl	8005d22 <USB_GetMode>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 848a 	bne.w	8002592 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 ffba 	bl	8005bfc <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8480 	beq.w	8002590 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 ffa7 	bl	8005bfc <USB_ReadInterrupts>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d107      	bne.n	8001cc8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f002 0202 	and.w	r2, r2, #2
 8001cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 ff95 	bl	8005bfc <USB_ReadInterrupts>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b10      	cmp	r3, #16
 8001cda:	d161      	bne.n	8001da0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0210 	bic.w	r2, r2, #16
 8001cea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	0c5b      	lsrs	r3, r3, #17
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d124      	bne.n	8001d62 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d035      	beq.n	8001d90 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	6a38      	ldr	r0, [r7, #32]
 8001d38:	f003 fdcc 	bl	80058d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d48:	441a      	add	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	6a1a      	ldr	r2, [r3, #32]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d5a:	441a      	add	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	621a      	str	r2, [r3, #32]
 8001d60:	e016      	b.n	8001d90 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	0c5b      	lsrs	r3, r3, #17
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	2b06      	cmp	r3, #6
 8001d6c:	d110      	bne.n	8001d90 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d74:	2208      	movs	r2, #8
 8001d76:	4619      	mov	r1, r3
 8001d78:	6a38      	ldr	r0, [r7, #32]
 8001d7a:	f003 fdab 	bl	80058d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d8a:	441a      	add	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0210 	orr.w	r2, r2, #16
 8001d9e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 ff29 	bl	8005bfc <USB_ReadInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001db0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001db4:	f040 80a7 	bne.w	8001f06 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 ff2e 	bl	8005c22 <USB_ReadDevAllOutEpInterrupt>
 8001dc6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001dc8:	e099      	b.n	8001efe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 808e 	beq.w	8001ef2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 ff52 	bl	8005c8a <USB_ReadDevOutEPInterrupt>
 8001de6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dfe:	461a      	mov	r2, r3
 8001e00:	2301      	movs	r3, #1
 8001e02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fec2 	bl	8002b90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e22:	461a      	mov	r2, r3
 8001e24:	2308      	movs	r3, #8
 8001e26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 ff98 	bl	8002d60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e46:	461a      	mov	r2, r3
 8001e48:	2310      	movs	r3, #16
 8001e4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d030      	beq.n	8001eb8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b80      	cmp	r3, #128	; 0x80
 8001e60:	d109      	bne.n	8001e76 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	69fa      	ldr	r2, [r7, #28]
 8001e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e74:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	78db      	ldrb	r3, [r3, #3]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d108      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f006 fb51 	bl	8008548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	015a      	lsls	r2, r3, #5
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	4413      	add	r3, r2
 8001eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eea:	461a      	mov	r2, r3
 8001eec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ef0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f af62 	bne.w	8001dca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f003 fe76 	bl	8005bfc <USB_ReadInterrupts>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f1a:	f040 80db 	bne.w	80020d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fe97 	bl	8005c56 <USB_ReadDevAllInEpInterrupt>
 8001f28:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001f2e:	e0cd      	b.n	80020cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80c2 	beq.w	80020c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 febd 	bl	8005cc6 <USB_ReadDevInEPInterrupt>
 8001f4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d057      	beq.n	8002008 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	2201      	movs	r2, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69f9      	ldr	r1, [r7, #28]
 8001f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f78:	4013      	ands	r3, r2
 8001f7a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f88:	461a      	mov	r2, r3
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d132      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	334c      	adds	r3, #76	; 0x4c
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	3348      	adds	r3, #72	; 0x48
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4419      	add	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4403      	add	r3, r0
 8001fca:	334c      	adds	r3, #76	; 0x4c
 8001fcc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d113      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x3a2>
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3354      	adds	r3, #84	; 0x54
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d108      	bne.n	8001ffc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6818      	ldr	r0, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	f003 fec4 	bl	8005d84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f006 fa1b 	bl	800843e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800201e:	461a      	mov	r2, r3
 8002020:	2308      	movs	r3, #8
 8002022:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203a:	461a      	mov	r2, r3
 800203c:	2310      	movs	r3, #16
 800203e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d008      	beq.n	800205c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002056:	461a      	mov	r2, r3
 8002058:	2340      	movs	r3, #64	; 0x40
 800205a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d023      	beq.n	80020ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002068:	6a38      	ldr	r0, [r7, #32]
 800206a:	f002 fda5 	bl	8004bb8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	3338      	adds	r3, #56	; 0x38
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	78db      	ldrb	r3, [r3, #3]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d108      	bne.n	800209c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2200      	movs	r2, #0
 800208e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4619      	mov	r1, r3
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f006 fa68 	bl	800856c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	4413      	add	r3, r2
 80020a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020a8:	461a      	mov	r2, r3
 80020aa:	2302      	movs	r3, #2
 80020ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80020b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fcdb 	bl	8002a76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	3301      	adds	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f47f af2e 	bne.w	8001f30 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 fd8f 	bl	8005bfc <USB_ReadInterrupts>
 80020de:	4603      	mov	r3, r0
 80020e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020e8:	d122      	bne.n	8002130 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f8:	f023 0301 	bic.w	r3, r3, #1
 80020fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002104:	2b01      	cmp	r3, #1
 8002106:	d108      	bne.n	800211a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002110:	2100      	movs	r1, #0
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fec2 	bl	8002e9c <HAL_PCDEx_LPM_Callback>
 8002118:	e002      	b.n	8002120 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f006 fa06 	bl	800852c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695a      	ldr	r2, [r3, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800212e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f003 fd61 	bl	8005bfc <USB_ReadInterrupts>
 800213a:	4603      	mov	r3, r0
 800213c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002144:	d112      	bne.n	800216c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b01      	cmp	r3, #1
 8002154:	d102      	bne.n	800215c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f006 f9c2 	bl	80084e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800216a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f003 fd43 	bl	8005bfc <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800217c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002180:	f040 80b7 	bne.w	80022f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2110      	movs	r1, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f002 fd0a 	bl	8004bb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021a8:	e046      	b.n	8002238 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80021aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021b6:	461a      	mov	r2, r3
 80021b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021ce:	0151      	lsls	r1, r2, #5
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	440a      	add	r2, r1
 80021d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80021d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	461a      	mov	r2, r3
 80021ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80021f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f4:	015a      	lsls	r2, r3, #5
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	4413      	add	r3, r2
 80021fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002202:	0151      	lsls	r1, r2, #5
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	440a      	add	r2, r1
 8002208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800220c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002210:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	440a      	add	r2, r1
 8002228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800222c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002230:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	3301      	adds	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	429a      	cmp	r2, r3
 8002240:	d3b3      	bcc.n	80021aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002250:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002254:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	2b00      	cmp	r3, #0
 800225c:	d016      	beq.n	800228c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800226e:	f043 030b 	orr.w	r3, r3, #11
 8002272:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002284:	f043 030b 	orr.w	r3, r3, #11
 8002288:	6453      	str	r3, [r2, #68]	; 0x44
 800228a:	e015      	b.n	80022b8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800229a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800229e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80022a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022b2:	f043 030b 	orr.w	r3, r3, #11
 80022b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80022ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80022dc:	461a      	mov	r2, r3
 80022de:	f003 fd51 	bl	8005d84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695a      	ldr	r2, [r3, #20]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80022f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fc80 	bl	8005bfc <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002306:	d124      	bne.n	8002352 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fd16 	bl	8005d3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f002 fccb 	bl	8004cb2 <USB_GetDevSpeed>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681c      	ldr	r4, [r3, #0]
 8002328:	f001 fa28 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800232c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	4620      	mov	r0, r4
 8002338:	f002 f9ca 	bl	80046d0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f006 f8a6 	bl	800848e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002350:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fc50 	bl	8005bfc <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b08      	cmp	r3, #8
 8002364:	d10a      	bne.n	800237c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f006 f883 	bl	8008472 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f002 0208 	and.w	r2, r2, #8
 800237a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fc3b 	bl	8005bfc <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b80      	cmp	r3, #128	; 0x80
 800238e:	d122      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	e014      	b.n	80023cc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 fb27 	bl	8002a14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	3301      	adds	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d3e5      	bcc.n	80023a2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fc0e 	bl	8005bfc <USB_ReadInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ea:	d13b      	bne.n	8002464 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	e02b      	b.n	800244a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	015a      	lsls	r2, r3, #5
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002406:	4613      	mov	r3, r2
 8002408:	00db      	lsls	r3, r3, #3
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3340      	adds	r3, #64	; 0x40
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d115      	bne.n	8002444 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002418:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	da12      	bge.n	8002444 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	333f      	adds	r3, #63	; 0x3f
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800243a:	b2db      	uxtb	r3, r3
 800243c:	4619      	mov	r1, r3
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fae8 	bl	8002a14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	3301      	adds	r3, #1
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002450:	429a      	cmp	r2, r3
 8002452:	d3ce      	bcc.n	80023f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002462:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f003 fbc7 	bl	8005bfc <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002478:	d155      	bne.n	8002526 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e045      	b.n	800250c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d12e      	bne.n	8002506 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da2b      	bge.n	8002506 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80024ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80024be:	429a      	cmp	r2, r3
 80024c0:	d121      	bne.n	8002506 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002502:	6053      	str	r3, [r2, #4]
            break;
 8002504:	e007      	b.n	8002516 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	3301      	adds	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002512:	429a      	cmp	r2, r3
 8002514:	d3b4      	bcc.n	8002480 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002524:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f003 fb66 	bl	8005bfc <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253a:	d10a      	bne.n	8002552 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f006 f827 	bl	8008590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f003 fb50 	bl	8005bfc <USB_ReadInterrupts>
 800255c:	4603      	mov	r3, r0
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b04      	cmp	r3, #4
 8002564:	d115      	bne.n	8002592 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f006 f817 	bl	80085ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6859      	ldr	r1, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	430a      	orrs	r2, r1
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	e000      	b.n	8002592 <HAL_PCD_IRQHandler+0x938>
      return;
 8002590:	bf00      	nop
    }
  }
}
 8002592:	3734      	adds	r7, #52	; 0x34
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_SetAddress+0x1a>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e013      	b.n	80025da <HAL_PCD_SetAddress+0x42>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	78fa      	ldrb	r2, [r7, #3]
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 faae 	bl	8005b2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	4608      	mov	r0, r1
 80025ec:	4611      	mov	r1, r2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4603      	mov	r3, r0
 80025f2:	70fb      	strb	r3, [r7, #3]
 80025f4:	460b      	mov	r3, r1
 80025f6:	803b      	strh	r3, [r7, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002604:	2b00      	cmp	r3, #0
 8002606:	da0f      	bge.n	8002628 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	f003 020f 	and.w	r2, r3, #15
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	3338      	adds	r3, #56	; 0x38
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4413      	add	r3, r2
 800261c:	3304      	adds	r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	705a      	strb	r2, [r3, #1]
 8002626:	e00f      	b.n	8002648 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	f003 020f 	and.w	r2, r3, #15
 800262e:	4613      	mov	r3, r2
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	3304      	adds	r3, #4
 8002640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002654:	883a      	ldrh	r2, [r7, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	78ba      	ldrb	r2, [r7, #2]
 800265e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	785b      	ldrb	r3, [r3, #1]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002672:	78bb      	ldrb	r3, [r7, #2]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d102      	bne.n	800267e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_PCD_EP_Open+0xaa>
 8002688:	2302      	movs	r3, #2
 800268a:	e00e      	b.n	80026aa <HAL_PCD_EP_Open+0xc8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68f9      	ldr	r1, [r7, #12]
 800269a:	4618      	mov	r0, r3
 800269c:	f002 fb2e 	bl	8004cfc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80026a8:	7afb      	ldrb	r3, [r7, #11]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da0f      	bge.n	80026e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 020f 	and.w	r2, r3, #15
 80026cc:	4613      	mov	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	3338      	adds	r3, #56	; 0x38
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	705a      	strb	r2, [r3, #1]
 80026e4:	e00f      	b.n	8002706 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 020f 	and.w	r2, r3, #15
 80026ec:	4613      	mov	r3, r2
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	3304      	adds	r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_PCD_EP_Close+0x6e>
 800271c:	2302      	movs	r3, #2
 800271e:	e00e      	b.n	800273e <HAL_PCD_EP_Close+0x8c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68f9      	ldr	r1, [r7, #12]
 800272e:	4618      	mov	r0, r3
 8002730:	f002 fb6c 	bl	8004e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b086      	sub	sp, #24
 800274a:	af00      	add	r7, sp, #0
 800274c:	60f8      	str	r0, [r7, #12]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	460b      	mov	r3, r1
 8002754:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002756:	7afb      	ldrb	r3, [r7, #11]
 8002758:	f003 020f 	and.w	r2, r3, #15
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	3304      	adds	r3, #4
 800276e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2200      	movs	r2, #0
 8002780:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	b2da      	uxtb	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d102      	bne.n	80027a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6818      	ldr	r0, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	6979      	ldr	r1, [r7, #20]
 80027ba:	f002 fe4b 	bl	8005454 <USB_EP0StartXfer>
 80027be:	e008      	b.n	80027d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6979      	ldr	r1, [r7, #20]
 80027ce:	f002 fbf9 	bl	8004fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	f003 020f 	and.w	r2, r3, #15
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	603b      	str	r3, [r7, #0]
 8002818:	460b      	mov	r3, r1
 800281a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	f003 020f 	and.w	r2, r3, #15
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	3338      	adds	r3, #56	; 0x38
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2200      	movs	r2, #0
 8002844:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2201      	movs	r2, #1
 800284a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800284c:	7afb      	ldrb	r3, [r7, #11]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	b2da      	uxtb	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d102      	bne.n	8002866 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002866:	7afb      	ldrb	r3, [r7, #11]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2b00      	cmp	r3, #0
 800286e:	d109      	bne.n	8002884 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	6979      	ldr	r1, [r7, #20]
 800287e:	f002 fde9 	bl	8005454 <USB_EP0StartXfer>
 8002882:	e008      	b.n	8002896 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6979      	ldr	r1, [r7, #20]
 8002892:	f002 fb97 	bl	8004fc4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d901      	bls.n	80028be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e050      	b.n	8002960 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	da0f      	bge.n	80028e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	f003 020f 	and.w	r2, r3, #15
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	3338      	adds	r3, #56	; 0x38
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	3304      	adds	r3, #4
 80028dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	705a      	strb	r2, [r3, #1]
 80028e4:	e00d      	b.n	8002902 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2201      	movs	r2, #1
 8002906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_PCD_EP_SetStall+0x82>
 800291e:	2302      	movs	r3, #2
 8002920:	e01e      	b.n	8002960 <HAL_PCD_EP_SetStall+0xc0>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68f9      	ldr	r1, [r7, #12]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 f827 	bl	8005984 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	b2d9      	uxtb	r1, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002950:	461a      	mov	r2, r3
 8002952:	f003 fa17 	bl	8005d84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d901      	bls.n	8002986 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e042      	b.n	8002a0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800298a:	2b00      	cmp	r3, #0
 800298c:	da0f      	bge.n	80029ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	3338      	adds	r3, #56	; 0x38
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	3304      	adds	r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	705a      	strb	r2, [r3, #1]
 80029ac:	e00f      	b.n	80029ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	f003 020f 	and.w	r2, r3, #15
 80029b4:	4613      	mov	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	3304      	adds	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_PCD_EP_ClrStall+0x86>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e00e      	b.n	8002a0c <HAL_PCD_EP_ClrStall+0xa4>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 f82f 	bl	8005a60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da0c      	bge.n	8002a42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	f003 020f 	and.w	r2, r3, #15
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	3338      	adds	r3, #56	; 0x38
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e00c      	b.n	8002a5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 fe4e 	bl	8005704 <USB_EPStopXfer>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	; 0x28
 8002a7a:	af02      	add	r7, sp, #8
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	3338      	adds	r3, #56	; 0x38
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	3304      	adds	r3, #4
 8002a9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d901      	bls.n	8002aae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e06c      	b.n	8002b88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	69fa      	ldr	r2, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d902      	bls.n	8002aca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3303      	adds	r3, #3
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ad2:	e02b      	b.n	8002b2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	699a      	ldr	r2, [r3, #24]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d902      	bls.n	8002af0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3303      	adds	r3, #3
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6919      	ldr	r1, [r3, #16]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	6978      	ldr	r0, [r7, #20]
 8002b10:	f002 fea2 	bl	8005858 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	441a      	add	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d809      	bhi.n	8002b56 <PCD_WriteEmptyTxFifo+0xe0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d203      	bcs.n	8002b56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1be      	bne.n	8002ad4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d811      	bhi.n	8002b86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2201      	movs	r2, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	6939      	ldr	r1, [r7, #16]
 8002b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b82:	4013      	ands	r3, r2
 8002b84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3720      	adds	r7, #32
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	333c      	adds	r3, #60	; 0x3c
 8002ba8:	3304      	adds	r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d17b      	bne.n	8002cbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d015      	beq.n	8002bfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	4a61      	ldr	r2, [pc, #388]	; (8002d58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	f240 80b9 	bls.w	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80b3 	beq.w	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bf8:	6093      	str	r3, [r2, #8]
 8002bfa:	e0a7      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d009      	beq.n	8002c1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c12:	461a      	mov	r2, r3
 8002c14:	2320      	movs	r3, #32
 8002c16:	6093      	str	r3, [r2, #8]
 8002c18:	e098      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f040 8093 	bne.w	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	4a4b      	ldr	r2, [pc, #300]	; (8002d58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d90f      	bls.n	8002c4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c44:	461a      	mov	r2, r3
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	6093      	str	r3, [r2, #8]
 8002c4c:	e07e      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	3304      	adds	r3, #4
 8002c62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	69da      	ldr	r2, [r3, #28]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	0159      	lsls	r1, r3, #5
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	440b      	add	r3, r1
 8002c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c7a:	1ad2      	subs	r2, r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d114      	bne.n	8002cb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	f003 f872 	bl	8005d84 <USB_EP0_OutStart>
 8002ca0:	e006      	b.n	8002cb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	441a      	add	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f005 fba6 	bl	8008408 <HAL_PCD_DataOutStageCallback>
 8002cbc:	e046      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d124      	bne.n	8002d10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00a      	beq.n	8002ce6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce2:	6093      	str	r3, [r2, #8]
 8002ce4:	e032      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2320      	movs	r3, #32
 8002d00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f005 fb7d 	bl	8008408 <HAL_PCD_DataOutStageCallback>
 8002d0e:	e01d      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d114      	bne.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d108      	bne.n	8002d40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f003 f822 	bl	8005d84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f005 fb5e 	bl	8008408 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	4f54300a 	.word	0x4f54300a
 8002d5c:	4f54310a 	.word	0x4f54310a

08002d60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	333c      	adds	r3, #60	; 0x3c
 8002d78:	3304      	adds	r3, #4
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d90e      	bls.n	8002db4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dac:	461a      	mov	r2, r3
 8002dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f005 fb15 	bl	80083e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d90c      	bls.n	8002ddc <PCD_EP_OutSetupPacket_int+0x7c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	f002 ffd4 	bl	8005d84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	4f54300a 	.word	0x4f54300a

08002dec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d107      	bne.n	8002e1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e0a:	883b      	ldrh	r3, [r7, #0]
 8002e0c:	0419      	lsls	r1, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
 8002e18:	e028      	b.n	8002e6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4413      	add	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
 8002e2c:	e00d      	b.n	8002e4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	3340      	adds	r3, #64	; 0x40
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	0c1b      	lsrs	r3, r3, #16
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	4413      	add	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	3301      	adds	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d3ec      	bcc.n	8002e2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002e54:	883b      	ldrh	r3, [r7, #0]
 8002e56:	0418      	lsls	r0, r3, #16
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6819      	ldr	r1, [r3, #0]
 8002e5c:	78fb      	ldrb	r3, [r7, #3]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	4302      	orrs	r2, r0
 8002e64:	3340      	adds	r3, #64	; 0x40
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	440b      	add	r3, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e267      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d075      	beq.n	8002fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed2:	4b88      	ldr	r3, [pc, #544]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d00c      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ede:	4b85      	ldr	r3, [pc, #532]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d112      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eea:	4b82      	ldr	r3, [pc, #520]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef8:	4b7e      	ldr	r3, [pc, #504]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d05b      	beq.n	8002fbc <HAL_RCC_OscConfig+0x108>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d157      	bne.n	8002fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e242      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d106      	bne.n	8002f28 <HAL_RCC_OscConfig+0x74>
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a75      	ldr	r2, [pc, #468]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	e01d      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x98>
 8002f32:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a6f      	ldr	r2, [pc, #444]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6c      	ldr	r2, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0xb0>
 8002f4c:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a68      	ldr	r2, [pc, #416]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d013      	beq.n	8002f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fd fd9c 	bl	8000aa8 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fd fd98 	bl	8000aa8 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e207      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	4b5b      	ldr	r3, [pc, #364]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0xc0>
 8002f92:	e014      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd fd88 	bl	8000aa8 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f9c:	f7fd fd84 	bl	8000aa8 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1f3      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0xe8>
 8002fba:	e000      	b.n	8002fbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd6:	4b47      	ldr	r3, [pc, #284]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d11c      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe2:	4b44      	ldr	r3, [pc, #272]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d116      	bne.n	800301c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d001      	beq.n	8003006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e1c7      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4937      	ldr	r1, [pc, #220]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301a:	e03a      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d020      	beq.n	8003066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003024:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003026:	2201      	movs	r2, #1
 8003028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302a:	f7fd fd3d 	bl	8000aa8 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7fd fd39 	bl	8000aa8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e1a8      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4925      	ldr	r1, [pc, #148]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003060:	4313      	orrs	r3, r2
 8003062:	600b      	str	r3, [r1, #0]
 8003064:	e015      	b.n	8003092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003066:	4b24      	ldr	r3, [pc, #144]	; (80030f8 <HAL_RCC_OscConfig+0x244>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fd fd1c 	bl	8000aa8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003074:	f7fd fd18 	bl	8000aa8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e187      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b00      	cmp	r3, #0
 800309c:	d036      	beq.n	800310c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d016      	beq.n	80030d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <HAL_RCC_OscConfig+0x248>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ac:	f7fd fcfc 	bl	8000aa8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b4:	f7fd fcf8 	bl	8000aa8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e167      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCC_OscConfig+0x240>)
 80030c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x200>
 80030d2:	e01b      	b.n	800310c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_OscConfig+0x248>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030da:	f7fd fce5 	bl	8000aa8 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	e00e      	b.n	8003100 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e2:	f7fd fce1 	bl	8000aa8 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e150      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 80030f4:	40023800 	.word	0x40023800
 80030f8:	42470000 	.word	0x42470000
 80030fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003100:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1ea      	bne.n	80030e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8097 	beq.w	8003248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800311e:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	4a7c      	ldr	r2, [pc, #496]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6413      	str	r3, [r2, #64]	; 0x40
 800313a:	4b7a      	ldr	r3, [pc, #488]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314a:	4b77      	ldr	r3, [pc, #476]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003156:	4b74      	ldr	r3, [pc, #464]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a73      	ldr	r2, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fd fca1 	bl	8000aa8 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fd fc9d 	bl	8000aa8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e10c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317c:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <HAL_RCC_OscConfig+0x474>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d106      	bne.n	800319e <HAL_RCC_OscConfig+0x2ea>
 8003190:	4b64      	ldr	r3, [pc, #400]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003194:	4a63      	ldr	r2, [pc, #396]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003196:	f043 0301 	orr.w	r3, r3, #1
 800319a:	6713      	str	r3, [r2, #112]	; 0x70
 800319c:	e01c      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d10c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x30c>
 80031a6:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	4a5e      	ldr	r2, [pc, #376]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6713      	str	r3, [r2, #112]	; 0x70
 80031b2:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a5b      	ldr	r2, [pc, #364]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70
 80031be:	e00b      	b.n	80031d8 <HAL_RCC_OscConfig+0x324>
 80031c0:	4b58      	ldr	r3, [pc, #352]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	4a57      	ldr	r2, [pc, #348]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	; 0x70
 80031cc:	4b55      	ldr	r3, [pc, #340]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	4a54      	ldr	r2, [pc, #336]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e0:	f7fd fc62 	bl	8000aa8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fd fc5e 	bl	8000aa8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0cb      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ee      	beq.n	80031e8 <HAL_RCC_OscConfig+0x334>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320c:	f7fd fc4c 	bl	8000aa8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7fd fc48 	bl	8000aa8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e0b5      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322a:	4b3e      	ldr	r3, [pc, #248]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1ee      	bne.n	8003214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d105      	bne.n	8003248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800323c:	4b39      	ldr	r3, [pc, #228]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	4a38      	ldr	r2, [pc, #224]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003246:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80a1 	beq.w	8003394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d05c      	beq.n	8003318 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d141      	bne.n	80032ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b31      	ldr	r3, [pc, #196]	; (800332c <HAL_RCC_OscConfig+0x478>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fd fc1c 	bl	8000aa8 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fd fc18 	bl	8000aa8 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e087      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b27      	ldr	r3, [pc, #156]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	019b      	lsls	r3, r3, #6
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a8:	085b      	lsrs	r3, r3, #1
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	061b      	lsls	r3, r3, #24
 80032b6:	491b      	ldr	r1, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_RCC_OscConfig+0x478>)
 80032be:	2201      	movs	r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fbf1 	bl	8000aa8 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ca:	f7fd fbed 	bl	8000aa8 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e05c      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0f0      	beq.n	80032ca <HAL_RCC_OscConfig+0x416>
 80032e8:	e054      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ea:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_RCC_OscConfig+0x478>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fd fbda 	bl	8000aa8 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f8:	f7fd fbd6 	bl	8000aa8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e045      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330a:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_RCC_OscConfig+0x470>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x444>
 8003316:	e03d      	b.n	8003394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e038      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
 8003324:	40023800 	.word	0x40023800
 8003328:	40007000 	.word	0x40007000
 800332c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x4ec>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d028      	beq.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d121      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d11a      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003360:	4013      	ands	r3, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	3b01      	subs	r3, #1
 800337a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800337c:	429a      	cmp	r2, r3
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40023800 	.word	0x40023800

080033a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0cc      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b8:	4b68      	ldr	r3, [pc, #416]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d90c      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b65      	ldr	r3, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800341a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d044      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d119      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d003      	beq.n	8003462 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800345e:	2b03      	cmp	r3, #3
 8003460:	d107      	bne.n	8003472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e06f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003472:	4b3b      	ldr	r3, [pc, #236]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e067      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f023 0203 	bic.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	4934      	ldr	r1, [pc, #208]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	4313      	orrs	r3, r2
 8003492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003494:	f7fd fb08 	bl	8000aa8 <HAL_GetTick>
 8003498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349a:	e00a      	b.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800349c:	f7fd fb04 	bl	8000aa8 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e04f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 020c 	and.w	r2, r3, #12
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d1eb      	bne.n	800349c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c4:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d20c      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d2:	4b22      	ldr	r3, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	fa22 f303 	lsr.w	r3, r2, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1c4>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fd fa68 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40023c00 	.word	0x40023c00
 8003560:	40023800 	.word	0x40023800
 8003564:	08008a60 	.word	0x08008a60
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004

08003570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003574:	b094      	sub	sp, #80	; 0x50
 8003576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	647b      	str	r3, [r7, #68]	; 0x44
 800357c:	2300      	movs	r3, #0
 800357e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003580:	2300      	movs	r3, #0
 8003582:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003588:	4b79      	ldr	r3, [pc, #484]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030c 	and.w	r3, r3, #12
 8003590:	2b08      	cmp	r3, #8
 8003592:	d00d      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003594:	2b08      	cmp	r3, #8
 8003596:	f200 80e1 	bhi.w	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 80035a2:	e0db      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b73      	ldr	r3, [pc, #460]	; (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 80035a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035a8:	e0db      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b73      	ldr	r3, [pc, #460]	; (8003778 <HAL_RCC_GetSysClockFreq+0x208>)
 80035ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035ae:	e0d8      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b0:	4b6f      	ldr	r3, [pc, #444]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c6:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	099b      	lsrs	r3, r3, #6
 80035cc:	2200      	movs	r2, #0
 80035ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
 80035de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035e2:	4622      	mov	r2, r4
 80035e4:	462b      	mov	r3, r5
 80035e6:	f04f 0000 	mov.w	r0, #0
 80035ea:	f04f 0100 	mov.w	r1, #0
 80035ee:	0159      	lsls	r1, r3, #5
 80035f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f4:	0150      	lsls	r0, r2, #5
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4621      	mov	r1, r4
 80035fc:	1a51      	subs	r1, r2, r1
 80035fe:	6139      	str	r1, [r7, #16]
 8003600:	4629      	mov	r1, r5
 8003602:	eb63 0301 	sbc.w	r3, r3, r1
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003614:	4659      	mov	r1, fp
 8003616:	018b      	lsls	r3, r1, #6
 8003618:	4651      	mov	r1, sl
 800361a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800361e:	4651      	mov	r1, sl
 8003620:	018a      	lsls	r2, r1, #6
 8003622:	4651      	mov	r1, sl
 8003624:	ebb2 0801 	subs.w	r8, r2, r1
 8003628:	4659      	mov	r1, fp
 800362a:	eb63 0901 	sbc.w	r9, r3, r1
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800363e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003642:	4690      	mov	r8, r2
 8003644:	4699      	mov	r9, r3
 8003646:	4623      	mov	r3, r4
 8003648:	eb18 0303 	adds.w	r3, r8, r3
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	462b      	mov	r3, r5
 8003650:	eb49 0303 	adc.w	r3, r9, r3
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003662:	4629      	mov	r1, r5
 8003664:	024b      	lsls	r3, r1, #9
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800366c:	4621      	mov	r1, r4
 800366e:	024a      	lsls	r2, r1, #9
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003676:	2200      	movs	r2, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
 800367a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800367c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003680:	f7fc fdaa 	bl	80001d8 <__aeabi_uldivmod>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4613      	mov	r3, r2
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800368c:	e058      	b.n	8003740 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b38      	ldr	r3, [pc, #224]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	2200      	movs	r2, #0
 8003696:	4618      	mov	r0, r3
 8003698:	4611      	mov	r1, r2
 800369a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800369e:	623b      	str	r3, [r7, #32]
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a8:	4642      	mov	r2, r8
 80036aa:	464b      	mov	r3, r9
 80036ac:	f04f 0000 	mov.w	r0, #0
 80036b0:	f04f 0100 	mov.w	r1, #0
 80036b4:	0159      	lsls	r1, r3, #5
 80036b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ba:	0150      	lsls	r0, r2, #5
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4641      	mov	r1, r8
 80036c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e0:	ebb2 040a 	subs.w	r4, r2, sl
 80036e4:	eb63 050b 	sbc.w	r5, r3, fp
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	00eb      	lsls	r3, r5, #3
 80036f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	4614      	mov	r4, r2
 80036fa:	461d      	mov	r5, r3
 80036fc:	4643      	mov	r3, r8
 80036fe:	18e3      	adds	r3, r4, r3
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	464b      	mov	r3, r9
 8003704:	eb45 0303 	adc.w	r3, r5, r3
 8003708:	607b      	str	r3, [r7, #4]
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003716:	4629      	mov	r1, r5
 8003718:	028b      	lsls	r3, r1, #10
 800371a:	4621      	mov	r1, r4
 800371c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003720:	4621      	mov	r1, r4
 8003722:	028a      	lsls	r2, r1, #10
 8003724:	4610      	mov	r0, r2
 8003726:	4619      	mov	r1, r3
 8003728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800372a:	2200      	movs	r2, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	61fa      	str	r2, [r7, #28]
 8003730:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003734:	f7fc fd50 	bl	80001d8 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4613      	mov	r3, r2
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_GetSysClockFreq+0x200>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	3301      	adds	r3, #1
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003750:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003754:	fbb2 f3f3 	udiv	r3, r2, r3
 8003758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800375a:	e002      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_RCC_GetSysClockFreq+0x204>)
 800375e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003764:	4618      	mov	r0, r3
 8003766:	3750      	adds	r7, #80	; 0x50
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800
 8003774:	00f42400 	.word	0x00f42400
 8003778:	007a1200 	.word	0x007a1200

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCC_GetHCLKFreq+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000000 	.word	0x20000000

08003794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003798:	f7ff fff0 	bl	800377c <HAL_RCC_GetHCLKFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	0a9b      	lsrs	r3, r3, #10
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	4903      	ldr	r1, [pc, #12]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	08008a70 	.word	0x08008a70

080037bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c0:	f7ff ffdc 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037c4:	4602      	mov	r2, r0
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	0b5b      	lsrs	r3, r3, #13
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	4903      	ldr	r1, [pc, #12]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d2:	5ccb      	ldrb	r3, [r1, r3]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40023800 	.word	0x40023800
 80037e0:	08008a70 	.word	0x08008a70

080037e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e03f      	b.n	8003876 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd f81c 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fc7b 	bl	8004124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800385c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b0ba      	sub	sp, #232	; 0xe8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <HAL_UART_IRQHandler+0x66>
 80038d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038d6:	f003 0320 	and.w	r3, r3, #32
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb65 	bl	8003fae <UART_Receive_IT>
      return;
 80038e4:	e256      	b.n	8003d94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 80de 	beq.w	8003aac <HAL_UART_IRQHandler+0x22c>
 80038f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d106      	bne.n	800390a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003900:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80d1 	beq.w	8003aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00b      	beq.n	800392e <HAL_UART_IRQHandler+0xae>
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f043 0201 	orr.w	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00b      	beq.n	8003952 <HAL_UART_IRQHandler+0xd2>
 800393a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f043 0202 	orr.w	r2, r3, #2
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00b      	beq.n	8003976 <HAL_UART_IRQHandler+0xf6>
 800395e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f043 0204 	orr.w	r2, r3, #4
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d011      	beq.n	80039a6 <HAL_UART_IRQHandler+0x126>
 8003982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800398e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f043 0208 	orr.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 81ed 	beq.w	8003d8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_UART_IRQHandler+0x14e>
 80039bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 faf0 	bl	8003fae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	bf0c      	ite	eq
 80039dc:	2301      	moveq	r3, #1
 80039de:	2300      	movne	r3, #0
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <HAL_UART_IRQHandler+0x17a>
 80039f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d04f      	beq.n	8003a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9f8 	bl	8003df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d141      	bne.n	8003a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3314      	adds	r3, #20
 8003a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3314      	adds	r3, #20
 8003a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1d9      	bne.n	8003a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d013      	beq.n	8003a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	4a7d      	ldr	r2, [pc, #500]	; (8003c5c <HAL_UART_IRQHandler+0x3dc>)
 8003a68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fd fdcb 	bl	800160a <HAL_DMA_Abort_IT>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d016      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a84:	4610      	mov	r0, r2
 8003a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e00e      	b.n	8003aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f99a 	bl	8003dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a90:	e00a      	b.n	8003aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f996 	bl	8003dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a98:	e006      	b.n	8003aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f992 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aa6:	e170      	b.n	8003d8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	bf00      	nop
    return;
 8003aaa:	e16e      	b.n	8003d8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f040 814a 	bne.w	8003d4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 8143 	beq.w	8003d4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 813c 	beq.w	8003d4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	f040 80b4 	bne.w	8003c60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8140 	beq.w	8003d8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b16:	429a      	cmp	r2, r3
 8003b18:	f080 8139 	bcs.w	8003d8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2e:	f000 8088 	beq.w	8003c42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	330c      	adds	r3, #12
 8003b5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b6e:	e841 2300 	strex	r3, r2, [r1]
 8003b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1d9      	bne.n	8003b32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3314      	adds	r3, #20
 8003b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ba2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bae:	e841 2300 	strex	r3, r2, [r1]
 8003bb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1e1      	bne.n	8003b7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003be0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003be4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e3      	bne.n	8003bba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0a:	e853 3f00 	ldrex	r3, [r3]
 8003c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c12:	f023 0310 	bic.w	r3, r3, #16
 8003c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e3      	bne.n	8003c00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd fc74 	bl	800152a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	4619      	mov	r1, r3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f8c0 	bl	8003dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c58:	e099      	b.n	8003d8e <HAL_UART_IRQHandler+0x50e>
 8003c5a:	bf00      	nop
 8003c5c:	08003eb7 	.word	0x08003eb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 808b 	beq.w	8003d92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8086 	beq.w	8003d92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c90:	e853 3f00 	ldrex	r3, [r3]
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003caa:	647a      	str	r2, [r7, #68]	; 0x44
 8003cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e3      	bne.n	8003c86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3314      	adds	r3, #20
 8003cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cea:	e841 2300 	strex	r3, r2, [r1]
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1e3      	bne.n	8003cbe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	e853 3f00 	ldrex	r3, [r3]
 8003d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0310 	bic.w	r3, r3, #16
 8003d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d28:	61fa      	str	r2, [r7, #28]
 8003d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2c:	69b9      	ldr	r1, [r7, #24]
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	e841 2300 	strex	r3, r2, [r1]
 8003d34:	617b      	str	r3, [r7, #20]
   return(result);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1e3      	bne.n	8003d04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d40:	4619      	mov	r1, r3
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f848 	bl	8003dd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d48:	e023      	b.n	8003d92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_UART_IRQHandler+0x4ea>
 8003d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8bb 	bl	8003ede <UART_Transmit_IT>
    return;
 8003d68:	e014      	b.n	8003d94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <HAL_UART_IRQHandler+0x514>
 8003d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d008      	beq.n	8003d94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f8fb 	bl	8003f7e <UART_EndTransmit_IT>
    return;
 8003d88:	e004      	b.n	8003d94 <HAL_UART_IRQHandler+0x514>
    return;
 8003d8a:	bf00      	nop
 8003d8c:	e002      	b.n	8003d94 <HAL_UART_IRQHandler+0x514>
      return;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <HAL_UART_IRQHandler+0x514>
      return;
 8003d92:	bf00      	nop
  }
}
 8003d94:	37e8      	adds	r7, #232	; 0xe8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop

08003d9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b095      	sub	sp, #84	; 0x54
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	e853 3f00 	ldrex	r3, [r3]
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	330c      	adds	r3, #12
 8003e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e18:	643a      	str	r2, [r7, #64]	; 0x40
 8003e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e5      	bne.n	8003df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3314      	adds	r3, #20
 8003e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	e853 3f00 	ldrex	r3, [r3]
 8003e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3314      	adds	r3, #20
 8003e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e5      	bne.n	8003e2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d119      	bne.n	8003e9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	e853 3f00 	ldrex	r3, [r3]
 8003e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f023 0310 	bic.w	r3, r3, #16
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e88:	61ba      	str	r2, [r7, #24]
 8003e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	613b      	str	r3, [r7, #16]
   return(result);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e5      	bne.n	8003e68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eaa:	bf00      	nop
 8003eac:	3754      	adds	r7, #84	; 0x54
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff77 	bl	8003dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b085      	sub	sp, #20
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b21      	cmp	r3, #33	; 0x21
 8003ef0:	d13e      	bne.n	8003f70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efa:	d114      	bne.n	8003f26 <UART_Transmit_IT+0x48>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d110      	bne.n	8003f26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	1c9a      	adds	r2, r3, #2
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	621a      	str	r2, [r3, #32]
 8003f24:	e008      	b.n	8003f38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	1c59      	adds	r1, r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6211      	str	r1, [r2, #32]
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10f      	bne.n	8003f6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e000      	b.n	8003f72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f70:	2302      	movs	r3, #2
  }
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff fefc 	bl	8003d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b08c      	sub	sp, #48	; 0x30
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b22      	cmp	r3, #34	; 0x22
 8003fc0:	f040 80ab 	bne.w	800411a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d117      	bne.n	8003ffe <UART_Receive_IT+0x50>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d113      	bne.n	8003ffe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff6:	1c9a      	adds	r2, r3, #2
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8003ffc:	e026      	b.n	800404c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004004:	2300      	movs	r3, #0
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d007      	beq.n	8004022 <UART_Receive_IT+0x74>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <UART_Receive_IT+0x82>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	b2da      	uxtb	r2, r3
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	e008      	b.n	8004042 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800403c:	b2da      	uxtb	r2, r3
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800405c:	2b00      	cmp	r3, #0
 800405e:	d15a      	bne.n	8004116 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0220 	bic.w	r2, r2, #32
 800406e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800407e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695a      	ldr	r2, [r3, #20]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	2b01      	cmp	r3, #1
 800409e:	d135      	bne.n	800410c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	613b      	str	r3, [r7, #16]
   return(result);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f023 0310 	bic.w	r3, r3, #16
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	623a      	str	r2, [r7, #32]
 80040c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	69f9      	ldr	r1, [r7, #28]
 80040cc:	6a3a      	ldr	r2, [r7, #32]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0310 	and.w	r3, r3, #16
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d10a      	bne.n	80040fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004102:	4619      	mov	r1, r3
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff fe67 	bl	8003dd8 <HAL_UARTEx_RxEventCallback>
 800410a:	e002      	b.n	8004112 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f7ff fe4f 	bl	8003db0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	e002      	b.n	800411c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800411a:	2302      	movs	r3, #2
  }
}
 800411c:	4618      	mov	r0, r3
 800411e:	3730      	adds	r7, #48	; 0x30
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004128:	b0c0      	sub	sp, #256	; 0x100
 800412a:	af00      	add	r7, sp, #0
 800412c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004140:	68d9      	ldr	r1, [r3, #12]
 8004142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	ea40 0301 	orr.w	r3, r0, r1
 800414c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	431a      	orrs	r2, r3
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	431a      	orrs	r2, r3
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800417c:	f021 010c 	bic.w	r1, r1, #12
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800418a:	430b      	orrs	r3, r1
 800418c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419e:	6999      	ldr	r1, [r3, #24]
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	ea40 0301 	orr.w	r3, r0, r1
 80041aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <UART_SetConfig+0x2cc>)
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d005      	beq.n	80041c4 <UART_SetConfig+0xa0>
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <UART_SetConfig+0x2d0>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d104      	bne.n	80041ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c4:	f7ff fafa 	bl	80037bc <HAL_RCC_GetPCLK2Freq>
 80041c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041cc:	e003      	b.n	80041d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ce:	f7ff fae1 	bl	8003794 <HAL_RCC_GetPCLK1Freq>
 80041d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e0:	f040 810c 	bne.w	80043fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041f6:	4622      	mov	r2, r4
 80041f8:	462b      	mov	r3, r5
 80041fa:	1891      	adds	r1, r2, r2
 80041fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80041fe:	415b      	adcs	r3, r3
 8004200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004206:	4621      	mov	r1, r4
 8004208:	eb12 0801 	adds.w	r8, r2, r1
 800420c:	4629      	mov	r1, r5
 800420e:	eb43 0901 	adc.w	r9, r3, r1
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004226:	4690      	mov	r8, r2
 8004228:	4699      	mov	r9, r3
 800422a:	4623      	mov	r3, r4
 800422c:	eb18 0303 	adds.w	r3, r8, r3
 8004230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004234:	462b      	mov	r3, r5
 8004236:	eb49 0303 	adc.w	r3, r9, r3
 800423a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800424a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800424e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004252:	460b      	mov	r3, r1
 8004254:	18db      	adds	r3, r3, r3
 8004256:	653b      	str	r3, [r7, #80]	; 0x50
 8004258:	4613      	mov	r3, r2
 800425a:	eb42 0303 	adc.w	r3, r2, r3
 800425e:	657b      	str	r3, [r7, #84]	; 0x54
 8004260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004268:	f7fb ffb6 	bl	80001d8 <__aeabi_uldivmod>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4b61      	ldr	r3, [pc, #388]	; (80043f8 <UART_SetConfig+0x2d4>)
 8004272:	fba3 2302 	umull	r2, r3, r3, r2
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	011c      	lsls	r4, r3, #4
 800427a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004284:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	1891      	adds	r1, r2, r2
 8004292:	64b9      	str	r1, [r7, #72]	; 0x48
 8004294:	415b      	adcs	r3, r3
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800429c:	4641      	mov	r1, r8
 800429e:	eb12 0a01 	adds.w	sl, r2, r1
 80042a2:	4649      	mov	r1, r9
 80042a4:	eb43 0b01 	adc.w	fp, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042bc:	4692      	mov	sl, r2
 80042be:	469b      	mov	fp, r3
 80042c0:	4643      	mov	r3, r8
 80042c2:	eb1a 0303 	adds.w	r3, sl, r3
 80042c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ca:	464b      	mov	r3, r9
 80042cc:	eb4b 0303 	adc.w	r3, fp, r3
 80042d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042e8:	460b      	mov	r3, r1
 80042ea:	18db      	adds	r3, r3, r3
 80042ec:	643b      	str	r3, [r7, #64]	; 0x40
 80042ee:	4613      	mov	r3, r2
 80042f0:	eb42 0303 	adc.w	r3, r2, r3
 80042f4:	647b      	str	r3, [r7, #68]	; 0x44
 80042f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042fe:	f7fb ff6b 	bl	80001d8 <__aeabi_uldivmod>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4611      	mov	r1, r2
 8004308:	4b3b      	ldr	r3, [pc, #236]	; (80043f8 <UART_SetConfig+0x2d4>)
 800430a:	fba3 2301 	umull	r2, r3, r3, r1
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	2264      	movs	r2, #100	; 0x64
 8004312:	fb02 f303 	mul.w	r3, r2, r3
 8004316:	1acb      	subs	r3, r1, r3
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800431e:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <UART_SetConfig+0x2d4>)
 8004320:	fba3 2302 	umull	r2, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800432c:	441c      	add	r4, r3
 800432e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004332:	2200      	movs	r2, #0
 8004334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004338:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800433c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004340:	4642      	mov	r2, r8
 8004342:	464b      	mov	r3, r9
 8004344:	1891      	adds	r1, r2, r2
 8004346:	63b9      	str	r1, [r7, #56]	; 0x38
 8004348:	415b      	adcs	r3, r3
 800434a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004350:	4641      	mov	r1, r8
 8004352:	1851      	adds	r1, r2, r1
 8004354:	6339      	str	r1, [r7, #48]	; 0x30
 8004356:	4649      	mov	r1, r9
 8004358:	414b      	adcs	r3, r1
 800435a:	637b      	str	r3, [r7, #52]	; 0x34
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004368:	4659      	mov	r1, fp
 800436a:	00cb      	lsls	r3, r1, #3
 800436c:	4651      	mov	r1, sl
 800436e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004372:	4651      	mov	r1, sl
 8004374:	00ca      	lsls	r2, r1, #3
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	4603      	mov	r3, r0
 800437c:	4642      	mov	r2, r8
 800437e:	189b      	adds	r3, r3, r2
 8004380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004384:	464b      	mov	r3, r9
 8004386:	460a      	mov	r2, r1
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800439c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a4:	460b      	mov	r3, r1
 80043a6:	18db      	adds	r3, r3, r3
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043aa:	4613      	mov	r3, r2
 80043ac:	eb42 0303 	adc.w	r3, r2, r3
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ba:	f7fb ff0d 	bl	80001d8 <__aeabi_uldivmod>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <UART_SetConfig+0x2d4>)
 80043c4:	fba3 1302 	umull	r1, r3, r3, r2
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	2164      	movs	r1, #100	; 0x64
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	3332      	adds	r3, #50	; 0x32
 80043d6:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <UART_SetConfig+0x2d4>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	f003 0207 	and.w	r2, r3, #7
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4422      	add	r2, r4
 80043ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043ec:	e106      	b.n	80045fc <UART_SetConfig+0x4d8>
 80043ee:	bf00      	nop
 80043f0:	40011000 	.word	0x40011000
 80043f4:	40011400 	.word	0x40011400
 80043f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004400:	2200      	movs	r2, #0
 8004402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004406:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800440e:	4642      	mov	r2, r8
 8004410:	464b      	mov	r3, r9
 8004412:	1891      	adds	r1, r2, r2
 8004414:	6239      	str	r1, [r7, #32]
 8004416:	415b      	adcs	r3, r3
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
 800441a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800441e:	4641      	mov	r1, r8
 8004420:	1854      	adds	r4, r2, r1
 8004422:	4649      	mov	r1, r9
 8004424:	eb43 0501 	adc.w	r5, r3, r1
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	00eb      	lsls	r3, r5, #3
 8004432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004436:	00e2      	lsls	r2, r4, #3
 8004438:	4614      	mov	r4, r2
 800443a:	461d      	mov	r5, r3
 800443c:	4643      	mov	r3, r8
 800443e:	18e3      	adds	r3, r4, r3
 8004440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004444:	464b      	mov	r3, r9
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446a:	4629      	mov	r1, r5
 800446c:	008b      	lsls	r3, r1, #2
 800446e:	4621      	mov	r1, r4
 8004470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004474:	4621      	mov	r1, r4
 8004476:	008a      	lsls	r2, r1, #2
 8004478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800447c:	f7fb feac 	bl	80001d8 <__aeabi_uldivmod>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4b60      	ldr	r3, [pc, #384]	; (8004608 <UART_SetConfig+0x4e4>)
 8004486:	fba3 2302 	umull	r2, r3, r3, r2
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	011c      	lsls	r4, r3, #4
 800448e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004498:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800449c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a0:	4642      	mov	r2, r8
 80044a2:	464b      	mov	r3, r9
 80044a4:	1891      	adds	r1, r2, r2
 80044a6:	61b9      	str	r1, [r7, #24]
 80044a8:	415b      	adcs	r3, r3
 80044aa:	61fb      	str	r3, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	4641      	mov	r1, r8
 80044b2:	1851      	adds	r1, r2, r1
 80044b4:	6139      	str	r1, [r7, #16]
 80044b6:	4649      	mov	r1, r9
 80044b8:	414b      	adcs	r3, r1
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	f04f 0200 	mov.w	r2, #0
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c8:	4659      	mov	r1, fp
 80044ca:	00cb      	lsls	r3, r1, #3
 80044cc:	4651      	mov	r1, sl
 80044ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d2:	4651      	mov	r1, sl
 80044d4:	00ca      	lsls	r2, r1, #3
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	4603      	mov	r3, r0
 80044dc:	4642      	mov	r2, r8
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e4:	464b      	mov	r3, r9
 80044e6:	460a      	mov	r2, r1
 80044e8:	eb42 0303 	adc.w	r3, r2, r3
 80044ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004508:	4649      	mov	r1, r9
 800450a:	008b      	lsls	r3, r1, #2
 800450c:	4641      	mov	r1, r8
 800450e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004512:	4641      	mov	r1, r8
 8004514:	008a      	lsls	r2, r1, #2
 8004516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451a:	f7fb fe5d 	bl	80001d8 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4611      	mov	r1, r2
 8004524:	4b38      	ldr	r3, [pc, #224]	; (8004608 <UART_SetConfig+0x4e4>)
 8004526:	fba3 2301 	umull	r2, r3, r3, r1
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	2264      	movs	r2, #100	; 0x64
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	1acb      	subs	r3, r1, r3
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	3332      	adds	r3, #50	; 0x32
 8004538:	4a33      	ldr	r2, [pc, #204]	; (8004608 <UART_SetConfig+0x4e4>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004544:	441c      	add	r4, r3
 8004546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454a:	2200      	movs	r2, #0
 800454c:	673b      	str	r3, [r7, #112]	; 0x70
 800454e:	677a      	str	r2, [r7, #116]	; 0x74
 8004550:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
 8004558:	1891      	adds	r1, r2, r2
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	415b      	adcs	r3, r3
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004564:	4641      	mov	r1, r8
 8004566:	1851      	adds	r1, r2, r1
 8004568:	6039      	str	r1, [r7, #0]
 800456a:	4649      	mov	r1, r9
 800456c:	414b      	adcs	r3, r1
 800456e:	607b      	str	r3, [r7, #4]
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457c:	4659      	mov	r1, fp
 800457e:	00cb      	lsls	r3, r1, #3
 8004580:	4651      	mov	r1, sl
 8004582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004586:	4651      	mov	r1, sl
 8004588:	00ca      	lsls	r2, r1, #3
 800458a:	4610      	mov	r0, r2
 800458c:	4619      	mov	r1, r3
 800458e:	4603      	mov	r3, r0
 8004590:	4642      	mov	r2, r8
 8004592:	189b      	adds	r3, r3, r2
 8004594:	66bb      	str	r3, [r7, #104]	; 0x68
 8004596:	464b      	mov	r3, r9
 8004598:	460a      	mov	r2, r1
 800459a:	eb42 0303 	adc.w	r3, r2, r3
 800459e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	663b      	str	r3, [r7, #96]	; 0x60
 80045aa:	667a      	str	r2, [r7, #100]	; 0x64
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045b8:	4649      	mov	r1, r9
 80045ba:	008b      	lsls	r3, r1, #2
 80045bc:	4641      	mov	r1, r8
 80045be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c2:	4641      	mov	r1, r8
 80045c4:	008a      	lsls	r2, r1, #2
 80045c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045ca:	f7fb fe05 	bl	80001d8 <__aeabi_uldivmod>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4b0d      	ldr	r3, [pc, #52]	; (8004608 <UART_SetConfig+0x4e4>)
 80045d4:	fba3 1302 	umull	r1, r3, r3, r2
 80045d8:	095b      	lsrs	r3, r3, #5
 80045da:	2164      	movs	r1, #100	; 0x64
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	3332      	adds	r3, #50	; 0x32
 80045e6:	4a08      	ldr	r2, [pc, #32]	; (8004608 <UART_SetConfig+0x4e4>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	f003 020f 	and.w	r2, r3, #15
 80045f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4422      	add	r2, r4
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004602:	46bd      	mov	sp, r7
 8004604:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004608:	51eb851f 	.word	0x51eb851f

0800460c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460c:	b084      	sub	sp, #16
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	f107 001c 	add.w	r0, r7, #28
 800461a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	2b01      	cmp	r3, #1
 8004622:	d122      	bne.n	800466a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800464c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f001 fbee 	bl	8005e40 <USB_CoreReset>
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	e01a      	b.n	80046a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 fbe2 	bl	8005e40 <USB_CoreReset>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	639a      	str	r2, [r3, #56]	; 0x38
 8004692:	e005      	b.n	80046a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d10b      	bne.n	80046be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f043 0206 	orr.w	r2, r3, #6
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f043 0220 	orr.w	r2, r3, #32
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046ca:	b004      	add	sp, #16
 80046cc:	4770      	bx	lr
	...

080046d0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d165      	bne.n	80047b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a41      	ldr	r2, [pc, #260]	; (80047ec <USB_SetTurnaroundTime+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d906      	bls.n	80046fa <USB_SetTurnaroundTime+0x2a>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4a40      	ldr	r2, [pc, #256]	; (80047f0 <USB_SetTurnaroundTime+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d202      	bcs.n	80046fa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80046f4:	230f      	movs	r3, #15
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	e062      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <USB_SetTurnaroundTime+0x120>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d306      	bcc.n	8004710 <USB_SetTurnaroundTime+0x40>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4a3b      	ldr	r2, [pc, #236]	; (80047f4 <USB_SetTurnaroundTime+0x124>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d202      	bcs.n	8004710 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800470a:	230e      	movs	r3, #14
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e057      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a38      	ldr	r2, [pc, #224]	; (80047f4 <USB_SetTurnaroundTime+0x124>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d306      	bcc.n	8004726 <USB_SetTurnaroundTime+0x56>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a37      	ldr	r2, [pc, #220]	; (80047f8 <USB_SetTurnaroundTime+0x128>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d202      	bcs.n	8004726 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004720:	230d      	movs	r3, #13
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e04c      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <USB_SetTurnaroundTime+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d306      	bcc.n	800473c <USB_SetTurnaroundTime+0x6c>
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4a32      	ldr	r2, [pc, #200]	; (80047fc <USB_SetTurnaroundTime+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d802      	bhi.n	800473c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004736:	230c      	movs	r3, #12
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e041      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <USB_SetTurnaroundTime+0x12c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d906      	bls.n	8004752 <USB_SetTurnaroundTime+0x82>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	4a2e      	ldr	r2, [pc, #184]	; (8004800 <USB_SetTurnaroundTime+0x130>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d802      	bhi.n	8004752 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800474c:	230b      	movs	r3, #11
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	e036      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <USB_SetTurnaroundTime+0x130>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d906      	bls.n	8004768 <USB_SetTurnaroundTime+0x98>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4a29      	ldr	r2, [pc, #164]	; (8004804 <USB_SetTurnaroundTime+0x134>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d802      	bhi.n	8004768 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004762:	230a      	movs	r3, #10
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	e02b      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a26      	ldr	r2, [pc, #152]	; (8004804 <USB_SetTurnaroundTime+0x134>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d906      	bls.n	800477e <USB_SetTurnaroundTime+0xae>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	4a25      	ldr	r2, [pc, #148]	; (8004808 <USB_SetTurnaroundTime+0x138>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d202      	bcs.n	800477e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004778:	2309      	movs	r3, #9
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e020      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a21      	ldr	r2, [pc, #132]	; (8004808 <USB_SetTurnaroundTime+0x138>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d306      	bcc.n	8004794 <USB_SetTurnaroundTime+0xc4>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	4a20      	ldr	r2, [pc, #128]	; (800480c <USB_SetTurnaroundTime+0x13c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d802      	bhi.n	8004794 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800478e:	2308      	movs	r3, #8
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e015      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4a1d      	ldr	r2, [pc, #116]	; (800480c <USB_SetTurnaroundTime+0x13c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d906      	bls.n	80047aa <USB_SetTurnaroundTime+0xda>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4a1c      	ldr	r2, [pc, #112]	; (8004810 <USB_SetTurnaroundTime+0x140>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d202      	bcs.n	80047aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047a4:	2307      	movs	r3, #7
 80047a6:	617b      	str	r3, [r7, #20]
 80047a8:	e00a      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047aa:	2306      	movs	r3, #6
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e007      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047b6:	2309      	movs	r3, #9
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	e001      	b.n	80047c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047bc:	2309      	movs	r3, #9
 80047be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	029b      	lsls	r3, r3, #10
 80047d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047d8:	431a      	orrs	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	00d8acbf 	.word	0x00d8acbf
 80047f0:	00e4e1c0 	.word	0x00e4e1c0
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	01067380 	.word	0x01067380
 80047fc:	011a499f 	.word	0x011a499f
 8004800:	01312cff 	.word	0x01312cff
 8004804:	014ca43f 	.word	0x014ca43f
 8004808:	016e3600 	.word	0x016e3600
 800480c:	01a6ab1f 	.word	0x01a6ab1f
 8004810:	01e84800 	.word	0x01e84800

08004814 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f043 0201 	orr.w	r2, r3, #1
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 0201 	bic.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004874:	78fb      	ldrb	r3, [r7, #3]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d115      	bne.n	80048a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004886:	2001      	movs	r0, #1
 8004888:	f7fc f91a 	bl	8000ac0 <HAL_Delay>
      ms++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 fa45 	bl	8005d22 <USB_GetMode>
 8004898:	4603      	mov	r3, r0
 800489a:	2b01      	cmp	r3, #1
 800489c:	d01e      	beq.n	80048dc <USB_SetCurrentMode+0x84>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b31      	cmp	r3, #49	; 0x31
 80048a2:	d9f0      	bls.n	8004886 <USB_SetCurrentMode+0x2e>
 80048a4:	e01a      	b.n	80048dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048a6:	78fb      	ldrb	r3, [r7, #3]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d115      	bne.n	80048d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048b8:	2001      	movs	r0, #1
 80048ba:	f7fc f901 	bl	8000ac0 <HAL_Delay>
      ms++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f001 fa2c 	bl	8005d22 <USB_GetMode>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <USB_SetCurrentMode+0x84>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b31      	cmp	r3, #49	; 0x31
 80048d4:	d9f0      	bls.n	80048b8 <USB_SetCurrentMode+0x60>
 80048d6:	e001      	b.n	80048dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e005      	b.n	80048e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b32      	cmp	r3, #50	; 0x32
 80048e0:	d101      	bne.n	80048e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048f0:	b084      	sub	sp, #16
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b086      	sub	sp, #24
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	e009      	b.n	8004924 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3340      	adds	r3, #64	; 0x40
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	2200      	movs	r2, #0
 800491c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	3301      	adds	r3, #1
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b0e      	cmp	r3, #14
 8004928:	d9f2      	bls.n	8004910 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800492a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d11c      	bne.n	800496a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800493e:	f043 0302 	orr.w	r3, r3, #2
 8004942:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
 8004968:	e00b      	b.n	8004982 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004988:	461a      	mov	r2, r3
 800498a:	2300      	movs	r3, #0
 800498c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	4619      	mov	r1, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	461a      	mov	r2, r3
 800499e:	680b      	ldr	r3, [r1, #0]
 80049a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10c      	bne.n	80049c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ae:	2100      	movs	r1, #0
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f965 	bl	8004c80 <USB_SetDevSpeed>
 80049b6:	e008      	b.n	80049ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049b8:	2101      	movs	r1, #1
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f960 	bl	8004c80 <USB_SetDevSpeed>
 80049c0:	e003      	b.n	80049ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049c2:	2103      	movs	r1, #3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f95b 	bl	8004c80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049ca:	2110      	movs	r1, #16
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f8f3 	bl	8004bb8 <USB_FlushTxFifo>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f91f 	bl	8004c20 <USB_FlushRxFifo>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	461a      	mov	r2, r3
 80049f4:	2300      	movs	r3, #0
 80049f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	461a      	mov	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
 8004a14:	e043      	b.n	8004a9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2c:	d118      	bne.n	8004a60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	461a      	mov	r2, r3
 8004a42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a46:	6013      	str	r3, [r2, #0]
 8004a48:	e013      	b.n	8004a72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	015a      	lsls	r2, r3, #5
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a56:	461a      	mov	r2, r3
 8004a58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e008      	b.n	8004a72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2300      	movs	r3, #0
 8004a70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	461a      	mov	r2, r3
 8004a92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3b7      	bcc.n	8004a16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	e043      	b.n	8004b34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004abe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac2:	d118      	bne.n	8004af6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e013      	b.n	8004b08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aec:	461a      	mov	r2, r3
 8004aee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	e008      	b.n	8004b08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	461a      	mov	r2, r3
 8004b04:	2300      	movs	r3, #0
 8004b06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b14:	461a      	mov	r2, r3
 8004b16:	2300      	movs	r3, #0
 8004b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	461a      	mov	r2, r3
 8004b28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3301      	adds	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d3b7      	bcc.n	8004aac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d105      	bne.n	8004b70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	f043 0210 	orr.w	r2, r3, #16
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699a      	ldr	r2, [r3, #24]
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <USB_DevInit+0x2c4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	f043 0208 	orr.w	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d107      	bne.n	8004ba4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb0:	b004      	add	sp, #16
 8004bb2:	4770      	bx	lr
 8004bb4:	803c3800 	.word	0x803c3800

08004bb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <USB_FlushTxFifo+0x64>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e01b      	b.n	8004c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	daf2      	bge.n	8004bc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <USB_FlushTxFifo+0x64>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e006      	b.n	8004c10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d0f0      	beq.n	8004bf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	00030d40 	.word	0x00030d40

08004c20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a11      	ldr	r2, [pc, #68]	; (8004c7c <USB_FlushRxFifo+0x5c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e018      	b.n	8004c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	daf2      	bge.n	8004c2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2210      	movs	r2, #16
 8004c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3301      	adds	r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <USB_FlushRxFifo+0x5c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e006      	b.n	8004c70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b10      	cmp	r3, #16
 8004c6c:	d0f0      	beq.n	8004c50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	00030d40 	.word	0x00030d40

08004c80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	68f9      	ldr	r1, [r7, #12]
 8004c9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0306 	and.w	r3, r3, #6
 8004cca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	75fb      	strb	r3, [r7, #23]
 8004cd6:	e00a      	b.n	8004cee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d002      	beq.n	8004ce4 <USB_GetDevSpeed+0x32>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b06      	cmp	r3, #6
 8004ce2:	d102      	bne.n	8004cea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	75fb      	strb	r3, [r7, #23]
 8004ce8:	e001      	b.n	8004cee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cea:	230f      	movs	r3, #15
 8004cec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	371c      	adds	r7, #28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d13a      	bne.n	8004d8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	2101      	movs	r1, #1
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d155      	bne.n	8004dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	791b      	ldrb	r3, [r3, #4]
 8004d6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	059b      	lsls	r3, r3, #22
 8004d72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	4313      	orrs	r3, r2
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	0151      	lsls	r1, r2, #5
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	440a      	add	r2, r1
 8004d7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	e036      	b.n	8004dfc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d94:	69da      	ldr	r2, [r3, #28]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2101      	movs	r1, #1
 8004da0:	fa01 f303 	lsl.w	r3, r1, r3
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11a      	bne.n	8004dfc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	791b      	ldrb	r3, [r3, #4]
 8004de0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de2:	430b      	orrs	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d161      	bne.n	8004eec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3e:	d11f      	bne.n	8004e80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	0151      	lsls	r1, r2, #5
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	440a      	add	r2, r1
 8004e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	0151      	lsls	r1, r2, #5
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	440a      	add	r2, r1
 8004e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	43db      	mvns	r3, r3
 8004ebe:	68f9      	ldr	r1, [r7, #12]
 8004ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	0159      	lsls	r1, r3, #5
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	440b      	add	r3, r1
 8004ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <USB_DeactivateEndpoint+0x1b0>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]
 8004eea:	e060      	b.n	8004fae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f02:	d11f      	bne.n	8004f44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f64:	4013      	ands	r3, r2
 8004f66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	041b      	lsls	r3, r3, #16
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <USB_DeactivateEndpoint+0x1b4>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	ec337800 	.word	0xec337800
 8004fc0:	eff37800 	.word	0xeff37800

08004fc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08a      	sub	sp, #40	; 0x28
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f040 815c 	bne.w	800529e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d132      	bne.n	8005054 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800500c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504c:	0cdb      	lsrs	r3, r3, #19
 800504e:	04db      	lsls	r3, r3, #19
 8005050:	6113      	str	r3, [r2, #16]
 8005052:	e074      	b.n	800513e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	0151      	lsls	r1, r2, #5
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	440a      	add	r2, r1
 800506a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506e:	0cdb      	lsrs	r3, r3, #19
 8005070:	04db      	lsls	r3, r3, #19
 8005072:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	69fa      	ldr	r2, [r7, #28]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800508e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005092:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	440b      	add	r3, r1
 80050b0:	1e59      	subs	r1, r3, #1
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050bc:	4b9d      	ldr	r3, [pc, #628]	; (8005334 <USB_EPStartXfer+0x370>)
 80050be:	400b      	ands	r3, r1
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	0148      	lsls	r0, r1, #5
 80050c4:	69f9      	ldr	r1, [r7, #28]
 80050c6:	4401      	add	r1, r0
 80050c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050cc:	4313      	orrs	r3, r2
 80050ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	015a      	lsls	r2, r3, #5
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	0148      	lsls	r0, r1, #5
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	4401      	add	r1, r0
 80050ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	791b      	ldrb	r3, [r3, #4]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d11f      	bne.n	800513e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005118:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800511c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005138:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800513c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d14b      	bne.n	80051dc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	791b      	ldrb	r3, [r3, #4]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d128      	bne.n	80051ba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d110      	bne.n	800519a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005196:	6013      	str	r3, [r2, #0]
 8005198:	e00f      	b.n	80051ba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	0151      	lsls	r1, r2, #5
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	440a      	add	r2, r1
 80051b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	e133      	b.n	8005444 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d015      	beq.n	8005230 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 811b 	beq.w	8005444 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	2101      	movs	r1, #1
 8005220:	fa01 f303 	lsl.w	r3, r1, r3
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522a:	4313      	orrs	r3, r2
 800522c:	634b      	str	r3, [r1, #52]	; 0x34
 800522e:	e109      	b.n	8005444 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523c:	2b00      	cmp	r3, #0
 800523e:	d110      	bne.n	8005262 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	0151      	lsls	r1, r2, #5
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	440a      	add	r2, r1
 8005256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e00f      	b.n	8005282 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	0151      	lsls	r1, r2, #5
 8005274:	69fa      	ldr	r2, [r7, #28]
 8005276:	440a      	add	r2, r1
 8005278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800527c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6919      	ldr	r1, [r3, #16]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781a      	ldrb	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	b298      	uxth	r0, r3
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	4603      	mov	r3, r0
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fade 	bl	8005858 <USB_WritePacket>
 800529c:	e0d2      	b.n	8005444 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	015a      	lsls	r2, r3, #5
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	4413      	add	r3, r2
 80052a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	0151      	lsls	r1, r2, #5
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	440a      	add	r2, r1
 80052b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b8:	0cdb      	lsrs	r3, r3, #19
 80052ba:	04db      	lsls	r3, r3, #19
 80052bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	015a      	lsls	r2, r3, #5
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	4413      	add	r3, r2
 80052c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d126      	bne.n	8005338 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005300:	69b9      	ldr	r1, [r7, #24]
 8005302:	0148      	lsls	r0, r1, #5
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	4401      	add	r1, r0
 8005308:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800530c:	4313      	orrs	r3, r2
 800530e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800532e:	6113      	str	r3, [r2, #16]
 8005330:	e03a      	b.n	80053a8 <USB_EPStartXfer+0x3e4>
 8005332:	bf00      	nop
 8005334:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4413      	add	r3, r2
 8005342:	1e5a      	subs	r2, r3, #1
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	8afa      	ldrh	r2, [r7, #22]
 8005354:	fb03 f202 	mul.w	r2, r3, r2
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	8afb      	ldrh	r3, [r7, #22]
 800536c:	04d9      	lsls	r1, r3, #19
 800536e:	4b38      	ldr	r3, [pc, #224]	; (8005450 <USB_EPStartXfer+0x48c>)
 8005370:	400b      	ands	r3, r1
 8005372:	69b9      	ldr	r1, [r7, #24]
 8005374:	0148      	lsls	r0, r1, #5
 8005376:	69f9      	ldr	r1, [r7, #28]
 8005378:	4401      	add	r1, r0
 800537a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800537e:	4313      	orrs	r3, r2
 8005380:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	0148      	lsls	r0, r1, #5
 800539c:	69f9      	ldr	r1, [r7, #28]
 800539e:	4401      	add	r1, r0
 80053a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053a4:	4313      	orrs	r3, r2
 80053a6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10d      	bne.n	80053ca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6919      	ldr	r1, [r3, #16]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c6:	460a      	mov	r2, r1
 80053c8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	791b      	ldrb	r3, [r3, #4]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d128      	bne.n	8005424 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d110      	bne.n	8005404 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e00f      	b.n	8005424 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	440a      	add	r2, r1
 800541a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800541e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005422:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	0151      	lsls	r1, r2, #5
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	440a      	add	r2, r1
 800543a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	1ff80000 	.word	0x1ff80000

08005454 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b01      	cmp	r3, #1
 8005472:	f040 80ce 	bne.w	8005612 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d132      	bne.n	80054e4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005498:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800549c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054dc:	0cdb      	lsrs	r3, r3, #19
 80054de:	04db      	lsls	r3, r3, #19
 80054e0:	6113      	str	r3, [r2, #16]
 80054e2:	e04e      	b.n	8005582 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fe:	0cdb      	lsrs	r3, r3, #19
 8005500:	04db      	lsls	r3, r3, #19
 8005502:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005522:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005526:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	429a      	cmp	r2, r3
 8005532:	d903      	bls.n	800553c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68da      	ldr	r2, [r3, #12]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005556:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800555a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005572:	6939      	ldr	r1, [r7, #16]
 8005574:	0148      	lsls	r0, r1, #5
 8005576:	6979      	ldr	r1, [r7, #20]
 8005578:	4401      	add	r1, r0
 800557a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800557e:	4313      	orrs	r3, r2
 8005580:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d11e      	bne.n	80055c6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559c:	461a      	mov	r2, r3
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e097      	b.n	80056f6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055e4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8083 	beq.w	80056f6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f003 030f 	and.w	r3, r3, #15
 8005600:	2101      	movs	r1, #1
 8005602:	fa01 f303 	lsl.w	r3, r1, r3
 8005606:	6979      	ldr	r1, [r7, #20]
 8005608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560c:	4313      	orrs	r3, r2
 800560e:	634b      	str	r3, [r1, #52]	; 0x34
 8005610:	e071      	b.n	80056f6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800562c:	0cdb      	lsrs	r3, r3, #19
 800562e:	04db      	lsls	r3, r3, #19
 8005630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800564c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005650:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005654:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	68da      	ldr	r2, [r3, #12]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	0151      	lsls	r1, r2, #5
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	440a      	add	r2, r1
 8005684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005688:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800568c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	6939      	ldr	r1, [r7, #16]
 80056a6:	0148      	lsls	r0, r1, #5
 80056a8:	6979      	ldr	r1, [r7, #20]
 80056aa:	4401      	add	r1, r0
 80056ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056b0:	4313      	orrs	r3, r2
 80056b2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10d      	bne.n	80056d6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d009      	beq.n	80056d6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6919      	ldr	r1, [r3, #16]
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d2:	460a      	mov	r2, r1
 80056d4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	693a      	ldr	r2, [r7, #16]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	371c      	adds	r7, #28
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d14a      	bne.n	80057b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573a:	f040 8086 	bne.w	800584a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	440a      	add	r2, r1
 8005758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800575c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005760:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	0151      	lsls	r1, r2, #5
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	440a      	add	r2, r1
 800577c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005780:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005784:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3301      	adds	r3, #1
 800578a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005792:	4293      	cmp	r3, r2
 8005794:	d902      	bls.n	800579c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
          break;
 800579a:	e056      	b.n	800584a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b4:	d0e7      	beq.n	8005786 <USB_EPStopXfer+0x82>
 80057b6:	e048      	b.n	800584a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d0:	d13b      	bne.n	800584a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	7812      	ldrb	r2, [r2, #0]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	7812      	ldrb	r2, [r2, #0]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005818:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3301      	adds	r3, #1
 800581e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f242 7210 	movw	r2, #10000	; 0x2710
 8005826:	4293      	cmp	r3, r2
 8005828:	d902      	bls.n	8005830 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
          break;
 800582e:	e00c      	b.n	800584a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005848:	d0e7      	beq.n	800581a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800584a:	7dfb      	ldrb	r3, [r7, #23]
}
 800584c:	4618      	mov	r0, r3
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005858:	b480      	push	{r7}
 800585a:	b089      	sub	sp, #36	; 0x24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	4611      	mov	r1, r2
 8005864:	461a      	mov	r2, r3
 8005866:	460b      	mov	r3, r1
 8005868:	71fb      	strb	r3, [r7, #7]
 800586a:	4613      	mov	r3, r2
 800586c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005876:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800587a:	2b00      	cmp	r3, #0
 800587c:	d123      	bne.n	80058c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	3303      	adds	r3, #3
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e018      	b.n	80058be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	031a      	lsls	r2, r3, #12
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005898:	461a      	mov	r2, r3
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	3301      	adds	r3, #1
 80058a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	3301      	adds	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3301      	adds	r3, #1
 80058b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	3301      	adds	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d3e2      	bcc.n	800588c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3724      	adds	r7, #36	; 0x24
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b08b      	sub	sp, #44	; 0x2c
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80058ea:	88fb      	ldrh	r3, [r7, #6]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
 80058fe:	e014      	b.n	800592a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005900:	69bb      	ldr	r3, [r7, #24]
 8005902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	601a      	str	r2, [r3, #0]
    pDest++;
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	3301      	adds	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	3301      	adds	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	3301      	adds	r3, #1
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	3301      	adds	r3, #1
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005924:	6a3b      	ldr	r3, [r7, #32]
 8005926:	3301      	adds	r3, #1
 8005928:	623b      	str	r3, [r7, #32]
 800592a:	6a3a      	ldr	r2, [r7, #32]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	429a      	cmp	r2, r3
 8005930:	d3e6      	bcc.n	8005900 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005932:	8bfb      	ldrh	r3, [r7, #30]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01e      	beq.n	8005976 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005942:	461a      	mov	r2, r3
 8005944:	f107 0310 	add.w	r3, r7, #16
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
 8005958:	b2da      	uxtb	r2, r3
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	701a      	strb	r2, [r3, #0]
      i++;
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	3301      	adds	r3, #1
 8005962:	623b      	str	r3, [r7, #32]
      pDest++;
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	3301      	adds	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800596a:	8bfb      	ldrh	r3, [r7, #30]
 800596c:	3b01      	subs	r3, #1
 800596e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005970:	8bfb      	ldrh	r3, [r7, #30]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1ea      	bne.n	800594c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005978:	4618      	mov	r0, r3
 800597a:	372c      	adds	r7, #44	; 0x2c
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	785b      	ldrb	r3, [r3, #1]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d12c      	bne.n	80059fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	db12      	blt.n	80059d8 <USB_EPSetStall+0x54>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00f      	beq.n	80059d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	0151      	lsls	r1, r2, #5
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	440a      	add	r2, r1
 80059ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	e02b      	b.n	8005a52 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	db12      	blt.n	8005a32 <USB_EPSetStall+0xae>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00f      	beq.n	8005a32 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	0151      	lsls	r1, r2, #5
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	440a      	add	r2, r1
 8005a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a30:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a50:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	785b      	ldrb	r3, [r3, #1]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d128      	bne.n	8005ace <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a9a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d003      	beq.n	8005aac <USB_EPClearStall+0x4c>
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	791b      	ldrb	r3, [r3, #4]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d138      	bne.n	8005b1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e027      	b.n	8005b1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	791b      	ldrb	r3, [r3, #4]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d003      	beq.n	8005afe <USB_EPClearStall+0x9e>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	791b      	ldrb	r3, [r3, #4]
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d10f      	bne.n	8005b1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	0151      	lsls	r1, r2, #5
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	440a      	add	r2, r1
 8005b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3714      	adds	r7, #20
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b60:	68f9      	ldr	r1, [r7, #12]
 8005b62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b66:	4313      	orrs	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba6:	f023 0302 	bic.w	r3, r3, #2
 8005baa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be8:	f043 0302 	orr.w	r3, r3, #2
 8005bec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695b      	ldr	r3, [r3, #20]
 8005c08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c14:	68fb      	ldr	r3, [r7, #12]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	4013      	ands	r3, r2
 8005c44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	0c1b      	lsrs	r3, r3, #16
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	4013      	ands	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	b29b      	uxth	r3, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c9a:	78fb      	ldrb	r3, [r7, #3]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b087      	sub	sp, #28
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf6:	01db      	lsls	r3, r3, #7
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4013      	ands	r3, r2
 8005d12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d14:	68bb      	ldr	r3, [r7, #8]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b085      	sub	sp, #20
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d58:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005d5c:	f023 0307 	bic.w	r3, r3, #7
 8005d60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	333c      	adds	r3, #60	; 0x3c
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <USB_EP0_OutStart+0xb8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d90a      	bls.n	8005dbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db8:	d101      	bne.n	8005dbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e037      	b.n	8005e2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ddc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dec:	f043 0318 	orr.w	r3, r3, #24
 8005df0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e06:	7afb      	ldrb	r3, [r7, #11]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d10f      	bne.n	8005e2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	371c      	adds	r7, #28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	4f54300a 	.word	0x4f54300a

08005e40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a13      	ldr	r2, [pc, #76]	; (8005ea4 <USB_CoreReset+0x64>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d901      	bls.n	8005e5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e01b      	b.n	8005e96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	daf2      	bge.n	8005e4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f043 0201 	orr.w	r2, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a09      	ldr	r2, [pc, #36]	; (8005ea4 <USB_CoreReset+0x64>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d901      	bls.n	8005e88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e006      	b.n	8005e96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d0f0      	beq.n	8005e76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3714      	adds	r7, #20
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	00030d40 	.word	0x00030d40

08005ea8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005eb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005eb8:	f002 fd10 	bl	80088dc <USBD_static_malloc>
 8005ebc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d109      	bne.n	8005ed8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	32b0      	adds	r2, #176	; 0xb0
 8005ece:	2100      	movs	r1, #0
 8005ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ed4:	2302      	movs	r3, #2
 8005ed6:	e0d4      	b.n	8006082 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ed8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005edc:	2100      	movs	r1, #0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f002 fd40 	bl	8008964 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32b0      	adds	r2, #176	; 0xb0
 8005eee:	68f9      	ldr	r1, [r7, #12]
 8005ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32b0      	adds	r2, #176	; 0xb0
 8005efe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7c1b      	ldrb	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d138      	bne.n	8005f82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f10:	4b5e      	ldr	r3, [pc, #376]	; (800608c <USBD_CDC_Init+0x1e4>)
 8005f12:	7819      	ldrb	r1, [r3, #0]
 8005f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f18:	2202      	movs	r2, #2
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f002 fbbb 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f20:	4b5a      	ldr	r3, [pc, #360]	; (800608c <USBD_CDC_Init+0x1e4>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	3324      	adds	r3, #36	; 0x24
 8005f36:	2201      	movs	r2, #1
 8005f38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f3a:	4b55      	ldr	r3, [pc, #340]	; (8006090 <USBD_CDC_Init+0x1e8>)
 8005f3c:	7819      	ldrb	r1, [r3, #0]
 8005f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f42:	2202      	movs	r2, #2
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fba6 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f4a:	4b51      	ldr	r3, [pc, #324]	; (8006090 <USBD_CDC_Init+0x1e8>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f62:	2201      	movs	r2, #1
 8005f64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f66:	4b4b      	ldr	r3, [pc, #300]	; (8006094 <USBD_CDC_Init+0x1ec>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f003 020f 	and.w	r2, r3, #15
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3326      	adds	r3, #38	; 0x26
 8005f7c:	2210      	movs	r2, #16
 8005f7e:	801a      	strh	r2, [r3, #0]
 8005f80:	e035      	b.n	8005fee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f82:	4b42      	ldr	r3, [pc, #264]	; (800608c <USBD_CDC_Init+0x1e4>)
 8005f84:	7819      	ldrb	r1, [r3, #0]
 8005f86:	2340      	movs	r3, #64	; 0x40
 8005f88:	2202      	movs	r2, #2
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f002 fb83 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f90:	4b3e      	ldr	r3, [pc, #248]	; (800608c <USBD_CDC_Init+0x1e4>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f003 020f 	and.w	r2, r3, #15
 8005f98:	6879      	ldr	r1, [r7, #4]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	440b      	add	r3, r1
 8005fa4:	3324      	adds	r3, #36	; 0x24
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005faa:	4b39      	ldr	r3, [pc, #228]	; (8006090 <USBD_CDC_Init+0x1e8>)
 8005fac:	7819      	ldrb	r1, [r3, #0]
 8005fae:	2340      	movs	r3, #64	; 0x40
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f002 fb6f 	bl	8008696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fb8:	4b35      	ldr	r3, [pc, #212]	; (8006090 <USBD_CDC_Init+0x1e8>)
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	f003 020f 	and.w	r2, r3, #15
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005fd4:	4b2f      	ldr	r3, [pc, #188]	; (8006094 <USBD_CDC_Init+0x1ec>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f003 020f 	and.w	r2, r3, #15
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3326      	adds	r3, #38	; 0x26
 8005fea:	2210      	movs	r2, #16
 8005fec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005fee:	4b29      	ldr	r3, [pc, #164]	; (8006094 <USBD_CDC_Init+0x1ec>)
 8005ff0:	7819      	ldrb	r1, [r3, #0]
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	2203      	movs	r2, #3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f002 fb4d 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <USBD_CDC_Init+0x1ec>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3324      	adds	r3, #36	; 0x24
 8006012:	2201      	movs	r2, #1
 8006014:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	33b0      	adds	r3, #176	; 0xb0
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800604c:	2302      	movs	r3, #2
 800604e:	e018      	b.n	8006082 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	7c1b      	ldrb	r3, [r3, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006058:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <USBD_CDC_Init+0x1e8>)
 800605a:	7819      	ldrb	r1, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006062:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f002 fc04 	bl	8008874 <USBD_LL_PrepareReceive>
 800606c:	e008      	b.n	8006080 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <USBD_CDC_Init+0x1e8>)
 8006070:	7819      	ldrb	r1, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006078:	2340      	movs	r3, #64	; 0x40
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f002 fbfa 	bl	8008874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000093 	.word	0x20000093
 8006090:	20000094 	.word	0x20000094
 8006094:	20000095 	.word	0x20000095

08006098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060a4:	4b3a      	ldr	r3, [pc, #232]	; (8006190 <USBD_CDC_DeInit+0xf8>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	4619      	mov	r1, r3
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f002 fb19 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060b0:	4b37      	ldr	r3, [pc, #220]	; (8006190 <USBD_CDC_DeInit+0xf8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3324      	adds	r3, #36	; 0x24
 80060c6:	2200      	movs	r2, #0
 80060c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060ca:	4b32      	ldr	r3, [pc, #200]	; (8006194 <USBD_CDC_DeInit+0xfc>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f002 fb06 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060d6:	4b2f      	ldr	r3, [pc, #188]	; (8006194 <USBD_CDC_DeInit+0xfc>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060ee:	2200      	movs	r2, #0
 80060f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80060f2:	4b29      	ldr	r3, [pc, #164]	; (8006198 <USBD_CDC_DeInit+0x100>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f002 faf2 	bl	80086e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80060fe:	4b26      	ldr	r3, [pc, #152]	; (8006198 <USBD_CDC_DeInit+0x100>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	f003 020f 	and.w	r2, r3, #15
 8006106:	6879      	ldr	r1, [r7, #4]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	3324      	adds	r3, #36	; 0x24
 8006114:	2200      	movs	r2, #0
 8006116:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006118:	4b1f      	ldr	r3, [pc, #124]	; (8006198 <USBD_CDC_DeInit+0x100>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f003 020f 	and.w	r2, r3, #15
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	440b      	add	r3, r1
 800612c:	3326      	adds	r3, #38	; 0x26
 800612e:	2200      	movs	r2, #0
 8006130:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	32b0      	adds	r2, #176	; 0xb0
 800613c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01f      	beq.n	8006184 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	33b0      	adds	r3, #176	; 0xb0
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	32b0      	adds	r2, #176	; 0xb0
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	4618      	mov	r0, r3
 8006168:	f002 fbc6 	bl	80088f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	32b0      	adds	r2, #176	; 0xb0
 8006176:	2100      	movs	r1, #0
 8006178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000093 	.word	0x20000093
 8006194:	20000094 	.word	0x20000094
 8006198:	20000095 	.word	0x20000095

0800619c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	32b0      	adds	r2, #176	; 0xb0
 80061b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e0bf      	b.n	800634c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d050      	beq.n	800627a <USBD_CDC_Setup+0xde>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	f040 80af 	bne.w	800633c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	88db      	ldrh	r3, [r3, #6]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d03a      	beq.n	800625c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b25b      	sxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	da1b      	bge.n	8006228 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	33b0      	adds	r3, #176	; 0xb0
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4413      	add	r3, r2
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006206:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	88d2      	ldrh	r2, [r2, #6]
 800620c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	88db      	ldrh	r3, [r3, #6]
 8006212:	2b07      	cmp	r3, #7
 8006214:	bf28      	it	cs
 8006216:	2307      	movcs	r3, #7
 8006218:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	89fa      	ldrh	r2, [r7, #14]
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 fd89 	bl	8007d38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006226:	e090      	b.n	800634a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	785a      	ldrb	r2, [r3, #1]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	88db      	ldrh	r3, [r3, #6]
 8006236:	2b3f      	cmp	r3, #63	; 0x3f
 8006238:	d803      	bhi.n	8006242 <USBD_CDC_Setup+0xa6>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	e000      	b.n	8006244 <USBD_CDC_Setup+0xa8>
 8006242:	2240      	movs	r2, #64	; 0x40
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800624a:	6939      	ldr	r1, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006252:	461a      	mov	r2, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fd9b 	bl	8007d90 <USBD_CtlPrepareRx>
      break;
 800625a:	e076      	b.n	800634a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	33b0      	adds	r3, #176	; 0xb0
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	7850      	ldrb	r0, [r2, #1]
 8006272:	2200      	movs	r2, #0
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	4798      	blx	r3
      break;
 8006278:	e067      	b.n	800634a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	785b      	ldrb	r3, [r3, #1]
 800627e:	2b0b      	cmp	r3, #11
 8006280:	d851      	bhi.n	8006326 <USBD_CDC_Setup+0x18a>
 8006282:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <USBD_CDC_Setup+0xec>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	080062b9 	.word	0x080062b9
 800628c:	08006335 	.word	0x08006335
 8006290:	08006327 	.word	0x08006327
 8006294:	08006327 	.word	0x08006327
 8006298:	08006327 	.word	0x08006327
 800629c:	08006327 	.word	0x08006327
 80062a0:	08006327 	.word	0x08006327
 80062a4:	08006327 	.word	0x08006327
 80062a8:	08006327 	.word	0x08006327
 80062ac:	08006327 	.word	0x08006327
 80062b0:	080062e3 	.word	0x080062e3
 80062b4:	0800630d 	.word	0x0800630d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d107      	bne.n	80062d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062c4:	f107 030a 	add.w	r3, r7, #10
 80062c8:	2202      	movs	r2, #2
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fd33 	bl	8007d38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062d2:	e032      	b.n	800633a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062d4:	6839      	ldr	r1, [r7, #0]
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f001 fcbd 	bl	8007c56 <USBD_CtlError>
            ret = USBD_FAIL;
 80062dc:	2303      	movs	r3, #3
 80062de:	75fb      	strb	r3, [r7, #23]
          break;
 80062e0:	e02b      	b.n	800633a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d107      	bne.n	80062fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062ee:	f107 030d 	add.w	r3, r7, #13
 80062f2:	2201      	movs	r2, #1
 80062f4:	4619      	mov	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f001 fd1e 	bl	8007d38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062fc:	e01d      	b.n	800633a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f001 fca8 	bl	8007c56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006306:	2303      	movs	r3, #3
 8006308:	75fb      	strb	r3, [r7, #23]
          break;
 800630a:	e016      	b.n	800633a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b03      	cmp	r3, #3
 8006316:	d00f      	beq.n	8006338 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fc9b 	bl	8007c56 <USBD_CtlError>
            ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006324:	e008      	b.n	8006338 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fc94 	bl	8007c56 <USBD_CtlError>
          ret = USBD_FAIL;
 800632e:	2303      	movs	r3, #3
 8006330:	75fb      	strb	r3, [r7, #23]
          break;
 8006332:	e002      	b.n	800633a <USBD_CDC_Setup+0x19e>
          break;
 8006334:	bf00      	nop
 8006336:	e008      	b.n	800634a <USBD_CDC_Setup+0x1ae>
          break;
 8006338:	bf00      	nop
      }
      break;
 800633a:	e006      	b.n	800634a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc89 	bl	8007c56 <USBD_CtlError>
      ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	75fb      	strb	r3, [r7, #23]
      break;
 8006348:	bf00      	nop
  }

  return (uint8_t)ret;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	32b0      	adds	r2, #176	; 0xb0
 8006372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800637a:	2303      	movs	r3, #3
 800637c:	e065      	b.n	800644a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	32b0      	adds	r2, #176	; 0xb0
 8006388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800638c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	f003 020f 	and.w	r2, r3, #15
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	440b      	add	r3, r1
 80063a0:	3318      	adds	r3, #24
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d02f      	beq.n	8006408 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	f003 020f 	and.w	r2, r3, #15
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4613      	mov	r3, r2
 80063b2:	009b      	lsls	r3, r3, #2
 80063b4:	4413      	add	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	440b      	add	r3, r1
 80063ba:	3318      	adds	r3, #24
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	f003 010f 	and.w	r1, r3, #15
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	460b      	mov	r3, r1
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	440b      	add	r3, r1
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4403      	add	r3, r0
 80063d0:	3348      	adds	r3, #72	; 0x48
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d112      	bne.n	8006408 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 020f 	and.w	r2, r3, #15
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3318      	adds	r3, #24
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80063fa:	78f9      	ldrb	r1, [r7, #3]
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f002 fa16 	bl	8008832 <USBD_LL_Transmit>
 8006406:	e01f      	b.n	8006448 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	33b0      	adds	r3, #176	; 0xb0
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d010      	beq.n	8006448 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	33b0      	adds	r3, #176	; 0xb0
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	32b0      	adds	r2, #176	; 0xb0
 8006468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	32b0      	adds	r2, #176	; 0xb0
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e01a      	b.n	80064ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f002 fa14 	bl	80088b6 <USBD_LL_GetRxDataSize>
 800648e:	4602      	mov	r2, r0
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	33b0      	adds	r3, #176	; 0xb0
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064b4:	4611      	mov	r1, r2
 80064b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	32b0      	adds	r2, #176	; 0xb0
 80064d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e025      	b.n	8006530 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	33b0      	adds	r3, #176	; 0xb0
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01a      	beq.n	800652e <USBD_CDC_EP0_RxReady+0x6c>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064fe:	2bff      	cmp	r3, #255	; 0xff
 8006500:	d015      	beq.n	800652e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	33b0      	adds	r3, #176	; 0xb0
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800651a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006522:	b292      	uxth	r2, r2
 8006524:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	22ff      	movs	r2, #255	; 0xff
 800652a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006540:	2182      	movs	r1, #130	; 0x82
 8006542:	4818      	ldr	r0, [pc, #96]	; (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006544:	f000 fd4f 	bl	8006fe6 <USBD_GetEpDesc>
 8006548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800654a:	2101      	movs	r1, #1
 800654c:	4815      	ldr	r0, [pc, #84]	; (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800654e:	f000 fd4a 	bl	8006fe6 <USBD_GetEpDesc>
 8006552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006554:	2181      	movs	r1, #129	; 0x81
 8006556:	4813      	ldr	r0, [pc, #76]	; (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006558:	f000 fd45 	bl	8006fe6 <USBD_GetEpDesc>
 800655c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2210      	movs	r2, #16
 8006568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d006      	beq.n	800657e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2200      	movs	r2, #0
 8006574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006578:	711a      	strb	r2, [r3, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d006      	beq.n	8006592 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800658c:	711a      	strb	r2, [r3, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2243      	movs	r2, #67	; 0x43
 8006596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006598:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	20000050 	.word	0x20000050

080065a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065b0:	2182      	movs	r1, #130	; 0x82
 80065b2:	4818      	ldr	r0, [pc, #96]	; (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065b4:	f000 fd17 	bl	8006fe6 <USBD_GetEpDesc>
 80065b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ba:	2101      	movs	r1, #1
 80065bc:	4815      	ldr	r0, [pc, #84]	; (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065be:	f000 fd12 	bl	8006fe6 <USBD_GetEpDesc>
 80065c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065c4:	2181      	movs	r1, #129	; 0x81
 80065c6:	4813      	ldr	r0, [pc, #76]	; (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065c8:	f000 fd0d 	bl	8006fe6 <USBD_GetEpDesc>
 80065cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	2210      	movs	r2, #16
 80065d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d006      	beq.n	80065ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	2200      	movs	r2, #0
 80065e4:	711a      	strb	r2, [r3, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f042 0202 	orr.w	r2, r2, #2
 80065ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d006      	beq.n	8006602 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	711a      	strb	r2, [r3, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f042 0202 	orr.w	r2, r2, #2
 8006600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2243      	movs	r2, #67	; 0x43
 8006606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006608:	4b02      	ldr	r3, [pc, #8]	; (8006614 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000050 	.word	0x20000050

08006618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006620:	2182      	movs	r1, #130	; 0x82
 8006622:	4818      	ldr	r0, [pc, #96]	; (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006624:	f000 fcdf 	bl	8006fe6 <USBD_GetEpDesc>
 8006628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800662a:	2101      	movs	r1, #1
 800662c:	4815      	ldr	r0, [pc, #84]	; (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800662e:	f000 fcda 	bl	8006fe6 <USBD_GetEpDesc>
 8006632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006634:	2181      	movs	r1, #129	; 0x81
 8006636:	4813      	ldr	r0, [pc, #76]	; (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006638:	f000 fcd5 	bl	8006fe6 <USBD_GetEpDesc>
 800663c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2210      	movs	r2, #16
 8006648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d006      	beq.n	800665e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2200      	movs	r2, #0
 8006654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006658:	711a      	strb	r2, [r3, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d006      	beq.n	8006672 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800666c:	711a      	strb	r2, [r3, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2243      	movs	r2, #67	; 0x43
 8006676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006678:	4b02      	ldr	r3, [pc, #8]	; (8006684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000050 	.word	0x20000050

08006688 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	220a      	movs	r2, #10
 8006694:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006696:	4b03      	ldr	r3, [pc, #12]	; (80066a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006698:	4618      	mov	r0, r3
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	2000000c 	.word	0x2000000c

080066a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e009      	b.n	80066d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	33b0      	adds	r3, #176	; 0xb0
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	32b0      	adds	r2, #176	; 0xb0
 80066f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d101      	bne.n	8006702 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066fe:	2303      	movs	r3, #3
 8006700:	e008      	b.n	8006714 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	32b0      	adds	r2, #176	; 0xb0
 8006734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006738:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e004      	b.n	800674e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
	...

0800675c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32b0      	adds	r2, #176	; 0xb0
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	32b0      	adds	r2, #176	; 0xb0
 8006782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800678a:	2303      	movs	r3, #3
 800678c:	e025      	b.n	80067da <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11f      	bne.n	80067d8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2201      	movs	r2, #1
 800679c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <USBD_CDC_TransmitPacket+0x88>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4403      	add	r3, r0
 80067ba:	3318      	adds	r3, #24
 80067bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <USBD_CDC_TransmitPacket+0x88>)
 80067c0:	7819      	ldrb	r1, [r3, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f002 f82f 	bl	8008832 <USBD_LL_Transmit>

    ret = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000093 	.word	0x20000093

080067e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32b0      	adds	r2, #176	; 0xb0
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32b0      	adds	r2, #176	; 0xb0
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006812:	2303      	movs	r3, #3
 8006814:	e018      	b.n	8006848 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7c1b      	ldrb	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10a      	bne.n	8006834 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800681e:	4b0c      	ldr	r3, [pc, #48]	; (8006850 <USBD_CDC_ReceivePacket+0x68>)
 8006820:	7819      	ldrb	r1, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f002 f821 	bl	8008874 <USBD_LL_PrepareReceive>
 8006832:	e008      	b.n	8006846 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006834:	4b06      	ldr	r3, [pc, #24]	; (8006850 <USBD_CDC_ReceivePacket+0x68>)
 8006836:	7819      	ldrb	r1, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800683e:	2340      	movs	r3, #64	; 0x40
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f002 f817 	bl	8008874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20000094 	.word	0x20000094

08006854 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	4613      	mov	r3, r2
 8006860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e01f      	b.n	80068ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	79fa      	ldrb	r2, [r7, #7]
 800689e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f001 fe91 	bl	80085c8 <USBD_LL_Init>
 80068a6:	4603      	mov	r3, r0
 80068a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e025      	b.n	8006918 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32ae      	adds	r2, #174	; 0xae
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00f      	beq.n	8006908 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	32ae      	adds	r2, #174	; 0xae
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	f107 020e 	add.w	r2, r7, #14
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	4602      	mov	r2, r0
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fe99 	bl	8008660 <USBD_LL_Start>
 800692e:	4603      	mov	r3, r0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr

0800694e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	460b      	mov	r3, r1
 8006958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	4611      	mov	r1, r2
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b084      	sub	sp, #16
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	460b      	mov	r3, r1
 8006990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	4611      	mov	r1, r2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b084      	sub	sp, #16
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f001 f908 	bl	8007be2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d01a      	beq.n	8006a2c <USBD_LL_SetupStage+0x72>
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d822      	bhi.n	8006a40 <USBD_LL_SetupStage+0x86>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <USBD_LL_SetupStage+0x4a>
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d00a      	beq.n	8006a18 <USBD_LL_SetupStage+0x5e>
 8006a02:	e01d      	b.n	8006a40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb5f 	bl	80070d0 <USBD_StdDevReq>
 8006a12:	4603      	mov	r3, r0
 8006a14:	73fb      	strb	r3, [r7, #15]
      break;
 8006a16:	e020      	b.n	8006a5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fbc7 	bl	80071b4 <USBD_StdItfReq>
 8006a26:	4603      	mov	r3, r0
 8006a28:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2a:	e016      	b.n	8006a5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fc29 	bl	800728c <USBD_StdEPReq>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a3e:	e00c      	b.n	8006a5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fe66 	bl	8008720 <USBD_LL_StallEP>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	bf00      	nop
  }

  return ret;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d16e      	bne.n	8006b5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	f040 8098 	bne.w	8006bc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d913      	bls.n	8006ac4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	1ad2      	subs	r2, r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	68da      	ldr	r2, [r3, #12]
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	bf28      	it	cs
 8006ab6:	4613      	movcs	r3, r2
 8006ab8:	461a      	mov	r2, r3
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f001 f984 	bl	8007dca <USBD_CtlContinueRx>
 8006ac2:	e07d      	b.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d014      	beq.n	8006afc <USBD_LL_DataOutStage+0x98>
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d81d      	bhi.n	8006b12 <USBD_LL_DataOutStage+0xae>
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <USBD_LL_DataOutStage+0x7c>
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <USBD_LL_DataOutStage+0x82>
 8006ade:	e018      	b.n	8006b12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ae4:	e018      	b.n	8006b18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	4619      	mov	r1, r3
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f000 fa5e 	bl	8006fb2 <USBD_CoreFindIF>
 8006af6:	4603      	mov	r3, r0
 8006af8:	75bb      	strb	r3, [r7, #22]
            break;
 8006afa:	e00d      	b.n	8006b18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	4619      	mov	r1, r3
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fa60 	bl	8006fcc <USBD_CoreFindEP>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75bb      	strb	r3, [r7, #22]
            break;
 8006b10:	e002      	b.n	8006b18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	75bb      	strb	r3, [r7, #22]
            break;
 8006b16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b18:	7dbb      	ldrb	r3, [r7, #22]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d113      	bne.n	8006b52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b2a:	7dba      	ldrb	r2, [r7, #22]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	32ae      	adds	r2, #174	; 0xae
 8006b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00b      	beq.n	8006b52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b3a:	7dba      	ldrb	r2, [r7, #22]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b42:	7dba      	ldrb	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	32ae      	adds	r2, #174	; 0xae
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f001 f94a 	bl	8007dec <USBD_CtlSendStatus>
 8006b58:	e032      	b.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b5a:	7afb      	ldrb	r3, [r7, #11]
 8006b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fa31 	bl	8006fcc <USBD_CoreFindEP>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b6e:	7dbb      	ldrb	r3, [r7, #22]
 8006b70:	2bff      	cmp	r3, #255	; 0xff
 8006b72:	d025      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
 8006b74:	7dbb      	ldrb	r3, [r7, #22]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d122      	bne.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d117      	bne.n	8006bb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b86:	7dba      	ldrb	r2, [r7, #22]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	32ae      	adds	r2, #174	; 0xae
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00f      	beq.n	8006bb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006b96:	7dba      	ldrb	r2, [r7, #22]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006b9e:	7dba      	ldrb	r2, [r7, #22]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	32ae      	adds	r2, #174	; 0xae
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	7afa      	ldrb	r2, [r7, #11]
 8006bac:	4611      	mov	r1, r2
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	4798      	blx	r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
 8006bbe:	e000      	b.n	8006bc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b086      	sub	sp, #24
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	607a      	str	r2, [r7, #4]
 8006bd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bd8:	7afb      	ldrb	r3, [r7, #11]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d16f      	bne.n	8006cbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3314      	adds	r3, #20
 8006be2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d15a      	bne.n	8006ca4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d914      	bls.n	8006c24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f001 f8ac 	bl	8007d6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c16:	2300      	movs	r3, #0
 8006c18:	2200      	movs	r2, #0
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f001 fe29 	bl	8008874 <USBD_LL_PrepareReceive>
 8006c22:	e03f      	b.n	8006ca4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d11c      	bne.n	8006c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d316      	bcc.n	8006c6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d20f      	bcs.n	8006c6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f001 f88d 	bl	8007d6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f001 fe06 	bl	8008874 <USBD_LL_PrepareReceive>
 8006c68:	e01c      	b.n	8006ca4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d10f      	bne.n	8006c96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d009      	beq.n	8006c96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f001 fd41 	bl	8008720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f001 f8b7 	bl	8007e12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d03a      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fe42 	bl	8006938 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cbc:	e032      	b.n	8006d24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cbe:	7afb      	ldrb	r3, [r7, #11]
 8006cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f97f 	bl	8006fcc <USBD_CoreFindEP>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	2bff      	cmp	r3, #255	; 0xff
 8006cd6:	d025      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d122      	bne.n	8006d24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d11c      	bne.n	8006d24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006cea:	7dfa      	ldrb	r2, [r7, #23]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	32ae      	adds	r2, #174	; 0xae
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d014      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006cfa:	7dfa      	ldrb	r2, [r7, #23]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d02:	7dfa      	ldrb	r2, [r7, #23]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	32ae      	adds	r2, #174	; 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	7afa      	ldrb	r2, [r7, #11]
 8006d10:	4611      	mov	r1, r2
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	4798      	blx	r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d1a:	7dbb      	ldrb	r3, [r7, #22]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d20:	7dbb      	ldrb	r3, [r7, #22]
 8006d22:	e000      	b.n	8006d26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d014      	beq.n	8006d94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00e      	beq.n	8006d94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6852      	ldr	r2, [r2, #4]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	4611      	mov	r1, r2
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d94:	2340      	movs	r3, #64	; 0x40
 8006d96:	2200      	movs	r2, #0
 8006d98:	2100      	movs	r1, #0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fc7b 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2240      	movs	r2, #64	; 0x40
 8006dac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	2200      	movs	r2, #0
 8006db4:	2180      	movs	r1, #128	; 0x80
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fc6d 	bl	8008696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2240      	movs	r2, #64	; 0x40
 8006dc6:	621a      	str	r2, [r3, #32]

  return ret;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	78fa      	ldrb	r2, [r7, #3]
 8006de2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	370c      	adds	r7, #12
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d106      	bne.n	8006e40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b03      	cmp	r3, #3
 8006e60:	d110      	bne.n	8006e84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	32ae      	adds	r2, #174	; 0xae
 8006ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e01c      	b.n	8006eea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d115      	bne.n	8006ee8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32ae      	adds	r2, #174	; 0xae
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00b      	beq.n	8006ee8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	32ae      	adds	r2, #174	; 0xae
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	460b      	mov	r3, r1
 8006efc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	32ae      	adds	r2, #174	; 0xae
 8006f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e01c      	b.n	8006f4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d115      	bne.n	8006f4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	; 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32ae      	adds	r2, #174	; 0xae
 8006f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	4611      	mov	r1, r2
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b083      	sub	sp, #12
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00e      	beq.n	8006fa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	6852      	ldr	r2, [r2, #4]
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	4611      	mov	r1, r2
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b083      	sub	sp, #12
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b086      	sub	sp, #24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	429a      	cmp	r2, r3
 800700c:	d920      	bls.n	8007050 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	b29b      	uxth	r3, r3
 8007014:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007016:	e013      	b.n	8007040 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007018:	f107 030a 	add.w	r3, r7, #10
 800701c:	4619      	mov	r1, r3
 800701e:	6978      	ldr	r0, [r7, #20]
 8007020:	f000 f81b 	bl	800705a <USBD_GetNextDesc>
 8007024:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	785b      	ldrb	r3, [r3, #1]
 800702a:	2b05      	cmp	r3, #5
 800702c:	d108      	bne.n	8007040 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	789b      	ldrb	r3, [r3, #2]
 8007036:	78fa      	ldrb	r2, [r7, #3]
 8007038:	429a      	cmp	r2, r3
 800703a:	d008      	beq.n	800704e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	885b      	ldrh	r3, [r3, #2]
 8007044:	b29a      	uxth	r2, r3
 8007046:	897b      	ldrh	r3, [r7, #10]
 8007048:	429a      	cmp	r2, r3
 800704a:	d8e5      	bhi.n	8007018 <USBD_GetEpDesc+0x32>
 800704c:	e000      	b.n	8007050 <USBD_GetEpDesc+0x6a>
          break;
 800704e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007050:	693b      	ldr	r3, [r7, #16]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3718      	adds	r7, #24
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	881a      	ldrh	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	b29b      	uxth	r3, r3
 8007072:	4413      	add	r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4413      	add	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007086:	68fb      	ldr	r3, [r7, #12]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007094:	b480      	push	{r7}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	3301      	adds	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070b2:	8a3b      	ldrh	r3, [r7, #16]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	b21a      	sxth	r2, r3
 80070b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070bc:	4313      	orrs	r3, r2
 80070be:	b21b      	sxth	r3, r3
 80070c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070c2:	89fb      	ldrh	r3, [r7, #14]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070e6:	2b40      	cmp	r3, #64	; 0x40
 80070e8:	d005      	beq.n	80070f6 <USBD_StdDevReq+0x26>
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d857      	bhi.n	800719e <USBD_StdDevReq+0xce>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00f      	beq.n	8007112 <USBD_StdDevReq+0x42>
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d153      	bne.n	800719e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	32ae      	adds	r2, #174	; 0xae
 8007100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	4798      	blx	r3
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
      break;
 8007110:	e04a      	b.n	80071a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	785b      	ldrb	r3, [r3, #1]
 8007116:	2b09      	cmp	r3, #9
 8007118:	d83b      	bhi.n	8007192 <USBD_StdDevReq+0xc2>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USBD_StdDevReq+0x50>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007175 	.word	0x08007175
 8007124:	08007189 	.word	0x08007189
 8007128:	08007193 	.word	0x08007193
 800712c:	0800717f 	.word	0x0800717f
 8007130:	08007193 	.word	0x08007193
 8007134:	08007153 	.word	0x08007153
 8007138:	08007149 	.word	0x08007149
 800713c:	08007193 	.word	0x08007193
 8007140:	0800716b 	.word	0x0800716b
 8007144:	0800715d 	.word	0x0800715d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fa3c 	bl	80075c8 <USBD_GetDescriptor>
          break;
 8007150:	e024      	b.n	800719c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fba1 	bl	800789c <USBD_SetAddress>
          break;
 800715a:	e01f      	b.n	800719c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800715c:	6839      	ldr	r1, [r7, #0]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fbe0 	bl	8007924 <USBD_SetConfig>
 8007164:	4603      	mov	r3, r0
 8007166:	73fb      	strb	r3, [r7, #15]
          break;
 8007168:	e018      	b.n	800719c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc83 	bl	8007a78 <USBD_GetConfig>
          break;
 8007172:	e013      	b.n	800719c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fcb4 	bl	8007ae4 <USBD_GetStatus>
          break;
 800717c:	e00e      	b.n	800719c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fce3 	bl	8007b4c <USBD_SetFeature>
          break;
 8007186:	e009      	b.n	800719c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fd07 	bl	8007b9e <USBD_ClrFeature>
          break;
 8007190:	e004      	b.n	800719c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fd5e 	bl	8007c56 <USBD_CtlError>
          break;
 800719a:	bf00      	nop
      }
      break;
 800719c:	e004      	b.n	80071a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd58 	bl	8007c56 <USBD_CtlError>
      break;
 80071a6:	bf00      	nop
  }

  return ret;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d005      	beq.n	80071da <USBD_StdItfReq+0x26>
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d852      	bhi.n	8007278 <USBD_StdItfReq+0xc4>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <USBD_StdItfReq+0x26>
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	d14e      	bne.n	8007278 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d840      	bhi.n	800726a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	889b      	ldrh	r3, [r3, #4]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d836      	bhi.n	8007260 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	889b      	ldrh	r3, [r3, #4]
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f7ff fed9 	bl	8006fb2 <USBD_CoreFindIF>
 8007200:	4603      	mov	r3, r0
 8007202:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	2bff      	cmp	r3, #255	; 0xff
 8007208:	d01d      	beq.n	8007246 <USBD_StdItfReq+0x92>
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d11a      	bne.n	8007246 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007210:	7bba      	ldrb	r2, [r7, #14]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32ae      	adds	r2, #174	; 0xae
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00f      	beq.n	8007240 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007220:	7bba      	ldrb	r2, [r7, #14]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007228:	7bba      	ldrb	r2, [r7, #14]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32ae      	adds	r2, #174	; 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	4798      	blx	r3
 800723a:	4603      	mov	r3, r0
 800723c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800723e:	e004      	b.n	800724a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007244:	e001      	b.n	800724a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007246:	2303      	movs	r3, #3
 8007248:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	88db      	ldrh	r3, [r3, #6]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d110      	bne.n	8007274 <USBD_StdItfReq+0xc0>
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10d      	bne.n	8007274 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fdc7 	bl	8007dec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800725e:	e009      	b.n	8007274 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fcf7 	bl	8007c56 <USBD_CtlError>
          break;
 8007268:	e004      	b.n	8007274 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fcf2 	bl	8007c56 <USBD_CtlError>
          break;
 8007272:	e000      	b.n	8007276 <USBD_StdItfReq+0xc2>
          break;
 8007274:	bf00      	nop
      }
      break;
 8007276:	e004      	b.n	8007282 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fceb 	bl	8007c56 <USBD_CtlError>
      break;
 8007280:	bf00      	nop
  }

  return ret;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007296:	2300      	movs	r3, #0
 8007298:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	889b      	ldrh	r3, [r3, #4]
 800729e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072a8:	2b40      	cmp	r3, #64	; 0x40
 80072aa:	d007      	beq.n	80072bc <USBD_StdEPReq+0x30>
 80072ac:	2b40      	cmp	r3, #64	; 0x40
 80072ae:	f200 817f 	bhi.w	80075b0 <USBD_StdEPReq+0x324>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d02a      	beq.n	800730c <USBD_StdEPReq+0x80>
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	f040 817a 	bne.w	80075b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072bc:	7bbb      	ldrb	r3, [r7, #14]
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f7ff fe83 	bl	8006fcc <USBD_CoreFindEP>
 80072c6:	4603      	mov	r3, r0
 80072c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ca:	7b7b      	ldrb	r3, [r7, #13]
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	f000 8174 	beq.w	80075ba <USBD_StdEPReq+0x32e>
 80072d2:	7b7b      	ldrb	r3, [r7, #13]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f040 8170 	bne.w	80075ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072da:	7b7a      	ldrb	r2, [r7, #13]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072e2:	7b7a      	ldrb	r2, [r7, #13]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	32ae      	adds	r2, #174	; 0xae
 80072e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 8163 	beq.w	80075ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80072f4:	7b7a      	ldrb	r2, [r7, #13]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	32ae      	adds	r2, #174	; 0xae
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	6839      	ldr	r1, [r7, #0]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800730a:	e156      	b.n	80075ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	785b      	ldrb	r3, [r3, #1]
 8007310:	2b03      	cmp	r3, #3
 8007312:	d008      	beq.n	8007326 <USBD_StdEPReq+0x9a>
 8007314:	2b03      	cmp	r3, #3
 8007316:	f300 8145 	bgt.w	80075a4 <USBD_StdEPReq+0x318>
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 809b 	beq.w	8007456 <USBD_StdEPReq+0x1ca>
 8007320:	2b01      	cmp	r3, #1
 8007322:	d03c      	beq.n	800739e <USBD_StdEPReq+0x112>
 8007324:	e13e      	b.n	80075a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b02      	cmp	r3, #2
 8007330:	d002      	beq.n	8007338 <USBD_StdEPReq+0xac>
 8007332:	2b03      	cmp	r3, #3
 8007334:	d016      	beq.n	8007364 <USBD_StdEPReq+0xd8>
 8007336:	e02c      	b.n	8007392 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00d      	beq.n	800735a <USBD_StdEPReq+0xce>
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b80      	cmp	r3, #128	; 0x80
 8007342:	d00a      	beq.n	800735a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f001 f9e9 	bl	8008720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800734e:	2180      	movs	r1, #128	; 0x80
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f9e5 	bl	8008720 <USBD_LL_StallEP>
 8007356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007358:	e020      	b.n	800739c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fc7a 	bl	8007c56 <USBD_CtlError>
              break;
 8007362:	e01b      	b.n	800739c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10e      	bne.n	800738a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00b      	beq.n	800738a <USBD_StdEPReq+0xfe>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	2b80      	cmp	r3, #128	; 0x80
 8007376:	d008      	beq.n	800738a <USBD_StdEPReq+0xfe>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	88db      	ldrh	r3, [r3, #6]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f001 f9cb 	bl	8008720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fd2e 	bl	8007dec <USBD_CtlSendStatus>

              break;
 8007390:	e004      	b.n	800739c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007392:	6839      	ldr	r1, [r7, #0]
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fc5e 	bl	8007c56 <USBD_CtlError>
              break;
 800739a:	bf00      	nop
          }
          break;
 800739c:	e107      	b.n	80075ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d002      	beq.n	80073b0 <USBD_StdEPReq+0x124>
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d016      	beq.n	80073dc <USBD_StdEPReq+0x150>
 80073ae:	e04b      	b.n	8007448 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073b0:	7bbb      	ldrb	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00d      	beq.n	80073d2 <USBD_StdEPReq+0x146>
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b80      	cmp	r3, #128	; 0x80
 80073ba:	d00a      	beq.n	80073d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073bc:	7bbb      	ldrb	r3, [r7, #14]
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f001 f9ad 	bl	8008720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c6:	2180      	movs	r1, #128	; 0x80
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f001 f9a9 	bl	8008720 <USBD_LL_StallEP>
 80073ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073d0:	e040      	b.n	8007454 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fc3e 	bl	8007c56 <USBD_CtlError>
              break;
 80073da:	e03b      	b.n	8007454 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	885b      	ldrh	r3, [r3, #2]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d136      	bne.n	8007452 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 f9b3 	bl	800875e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fcf7 	bl	8007dec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff fde2 	bl	8006fcc <USBD_CoreFindEP>
 8007408:	4603      	mov	r3, r0
 800740a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800740c:	7b7b      	ldrb	r3, [r7, #13]
 800740e:	2bff      	cmp	r3, #255	; 0xff
 8007410:	d01f      	beq.n	8007452 <USBD_StdEPReq+0x1c6>
 8007412:	7b7b      	ldrb	r3, [r7, #13]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11c      	bne.n	8007452 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007418:	7b7a      	ldrb	r2, [r7, #13]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007420:	7b7a      	ldrb	r2, [r7, #13]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	32ae      	adds	r2, #174	; 0xae
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d010      	beq.n	8007452 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007430:	7b7a      	ldrb	r2, [r7, #13]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	32ae      	adds	r2, #174	; 0xae
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	4798      	blx	r3
 8007442:	4603      	mov	r3, r0
 8007444:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007446:	e004      	b.n	8007452 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fc03 	bl	8007c56 <USBD_CtlError>
              break;
 8007450:	e000      	b.n	8007454 <USBD_StdEPReq+0x1c8>
              break;
 8007452:	bf00      	nop
          }
          break;
 8007454:	e0ab      	b.n	80075ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b02      	cmp	r3, #2
 8007460:	d002      	beq.n	8007468 <USBD_StdEPReq+0x1dc>
 8007462:	2b03      	cmp	r3, #3
 8007464:	d032      	beq.n	80074cc <USBD_StdEPReq+0x240>
 8007466:	e097      	b.n	8007598 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <USBD_StdEPReq+0x1f2>
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d004      	beq.n	800747e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 fbed 	bl	8007c56 <USBD_CtlError>
                break;
 800747c:	e091      	b.n	80075a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800747e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	da0b      	bge.n	800749e <USBD_StdEPReq+0x212>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	3310      	adds	r3, #16
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	e00b      	b.n	80074b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	4413      	add	r3, r2
 80074b4:	3304      	adds	r3, #4
 80074b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2202      	movs	r2, #2
 80074c2:	4619      	mov	r1, r3
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fc37 	bl	8007d38 <USBD_CtlSendData>
              break;
 80074ca:	e06a      	b.n	80075a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da11      	bge.n	80074f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	f003 020f 	and.w	r2, r3, #15
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	3324      	adds	r3, #36	; 0x24
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d117      	bne.n	800751e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fbb0 	bl	8007c56 <USBD_CtlError>
                  break;
 80074f6:	e054      	b.n	80075a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	f003 020f 	and.w	r2, r3, #15
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	440b      	add	r3, r1
 800750a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800750e:	881b      	ldrh	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d104      	bne.n	800751e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fb9d 	bl	8007c56 <USBD_CtlError>
                  break;
 800751c:	e041      	b.n	80075a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800751e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007522:	2b00      	cmp	r3, #0
 8007524:	da0b      	bge.n	800753e <USBD_StdEPReq+0x2b2>
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	3310      	adds	r3, #16
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	4413      	add	r3, r2
 800753a:	3304      	adds	r3, #4
 800753c:	e00b      	b.n	8007556 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	4413      	add	r3, r2
 8007554:	3304      	adds	r3, #4
 8007556:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <USBD_StdEPReq+0x2d8>
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d103      	bne.n	800756c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
 800756a:	e00e      	b.n	800758a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800756c:	7bbb      	ldrb	r3, [r7, #14]
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f913 	bl	800879c <USBD_LL_IsStallEP>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d003      	beq.n	8007584 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2201      	movs	r2, #1
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e002      	b.n	800758a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2202      	movs	r2, #2
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbd1 	bl	8007d38 <USBD_CtlSendData>
              break;
 8007596:	e004      	b.n	80075a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fb5b 	bl	8007c56 <USBD_CtlError>
              break;
 80075a0:	bf00      	nop
          }
          break;
 80075a2:	e004      	b.n	80075ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fb55 	bl	8007c56 <USBD_CtlError>
          break;
 80075ac:	bf00      	nop
      }
      break;
 80075ae:	e005      	b.n	80075bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb4f 	bl	8007c56 <USBD_CtlError>
      break;
 80075b8:	e000      	b.n	80075bc <USBD_StdEPReq+0x330>
      break;
 80075ba:	bf00      	nop
  }

  return ret;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	885b      	ldrh	r3, [r3, #2]
 80075e2:	0a1b      	lsrs	r3, r3, #8
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	f200 8128 	bhi.w	800783e <USBD_GetDescriptor+0x276>
 80075ee:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <USBD_GetDescriptor+0x2c>)
 80075f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f4:	08007611 	.word	0x08007611
 80075f8:	08007629 	.word	0x08007629
 80075fc:	08007669 	.word	0x08007669
 8007600:	0800783f 	.word	0x0800783f
 8007604:	0800783f 	.word	0x0800783f
 8007608:	080077df 	.word	0x080077df
 800760c:	0800780b 	.word	0x0800780b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
      break;
 8007626:	e112      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7c1b      	ldrb	r3, [r3, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10d      	bne.n	800764c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	4610      	mov	r0, r2
 800763e:	4798      	blx	r3
 8007640:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3301      	adds	r3, #1
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800764a:	e100      	b.n	800784e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	f107 0208 	add.w	r2, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3301      	adds	r3, #1
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e0f2      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	885b      	ldrh	r3, [r3, #2]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b05      	cmp	r3, #5
 8007670:	f200 80ac 	bhi.w	80077cc <USBD_GetDescriptor+0x204>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <USBD_GetDescriptor+0xb4>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	08007695 	.word	0x08007695
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076fd 	.word	0x080076fd
 8007688:	08007731 	.word	0x08007731
 800768c:	08007765 	.word	0x08007765
 8007690:	08007799 	.word	0x08007799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	7c12      	ldrb	r2, [r2, #16]
 80076ac:	f107 0108 	add.w	r1, r7, #8
 80076b0:	4610      	mov	r0, r2
 80076b2:	4798      	blx	r3
 80076b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076b6:	e091      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 facb 	bl	8007c56 <USBD_CtlError>
            err++;
 80076c0:	7afb      	ldrb	r3, [r7, #11]
 80076c2:	3301      	adds	r3, #1
 80076c4:	72fb      	strb	r3, [r7, #11]
          break;
 80076c6:	e089      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	7c12      	ldrb	r2, [r2, #16]
 80076e0:	f107 0108 	add.w	r1, r7, #8
 80076e4:	4610      	mov	r0, r2
 80076e6:	4798      	blx	r3
 80076e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ea:	e077      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fab1 	bl	8007c56 <USBD_CtlError>
            err++;
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	3301      	adds	r3, #1
 80076f8:	72fb      	strb	r3, [r7, #11]
          break;
 80076fa:	e06f      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7c12      	ldrb	r2, [r2, #16]
 8007714:	f107 0108 	add.w	r1, r7, #8
 8007718:	4610      	mov	r0, r2
 800771a:	4798      	blx	r3
 800771c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800771e:	e05d      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa97 	bl	8007c56 <USBD_CtlError>
            err++;
 8007728:	7afb      	ldrb	r3, [r7, #11]
 800772a:	3301      	adds	r3, #1
 800772c:	72fb      	strb	r3, [r7, #11]
          break;
 800772e:	e055      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	7c12      	ldrb	r2, [r2, #16]
 8007748:	f107 0108 	add.w	r1, r7, #8
 800774c:	4610      	mov	r0, r2
 800774e:	4798      	blx	r3
 8007750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007752:	e043      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa7d 	bl	8007c56 <USBD_CtlError>
            err++;
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	3301      	adds	r3, #1
 8007760:	72fb      	strb	r3, [r7, #11]
          break;
 8007762:	e03b      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e029      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fa63 	bl	8007c56 <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e021      	b.n	80077dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e00f      	b.n	80077dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fa49 	bl	8007c56 <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e007      	b.n	80077dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa41 	bl	8007c56 <USBD_CtlError>
          err++;
 80077d4:	7afb      	ldrb	r3, [r7, #11]
 80077d6:	3301      	adds	r3, #1
 80077d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80077da:	bf00      	nop
      }
      break;
 80077dc:	e037      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7c1b      	ldrb	r3, [r3, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	f107 0208 	add.w	r2, r7, #8
 80077f2:	4610      	mov	r0, r2
 80077f4:	4798      	blx	r3
 80077f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077f8:	e029      	b.n	800784e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa2a 	bl	8007c56 <USBD_CtlError>
        err++;
 8007802:	7afb      	ldrb	r3, [r7, #11]
 8007804:	3301      	adds	r3, #1
 8007806:	72fb      	strb	r3, [r7, #11]
      break;
 8007808:	e021      	b.n	800784e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	7c1b      	ldrb	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10d      	bne.n	800782e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f107 0208 	add.w	r2, r7, #8
 800781e:	4610      	mov	r0, r2
 8007820:	4798      	blx	r3
 8007822:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	3301      	adds	r3, #1
 8007828:	2207      	movs	r2, #7
 800782a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800782c:	e00f      	b.n	800784e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fa10 	bl	8007c56 <USBD_CtlError>
        err++;
 8007836:	7afb      	ldrb	r3, [r7, #11]
 8007838:	3301      	adds	r3, #1
 800783a:	72fb      	strb	r3, [r7, #11]
      break;
 800783c:	e007      	b.n	800784e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fa08 	bl	8007c56 <USBD_CtlError>
      err++;
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	3301      	adds	r3, #1
 800784a:	72fb      	strb	r3, [r7, #11]
      break;
 800784c:	bf00      	nop
  }

  if (err != 0U)
 800784e:	7afb      	ldrb	r3, [r7, #11]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11e      	bne.n	8007892 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d016      	beq.n	800788a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00e      	beq.n	8007880 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	88da      	ldrh	r2, [r3, #6]
 8007866:	893b      	ldrh	r3, [r7, #8]
 8007868:	4293      	cmp	r3, r2
 800786a:	bf28      	it	cs
 800786c:	4613      	movcs	r3, r2
 800786e:	b29b      	uxth	r3, r3
 8007870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	461a      	mov	r2, r3
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fa5d 	bl	8007d38 <USBD_CtlSendData>
 800787e:	e009      	b.n	8007894 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f9e7 	bl	8007c56 <USBD_CtlError>
 8007888:	e004      	b.n	8007894 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 faae 	bl	8007dec <USBD_CtlSendStatus>
 8007890:	e000      	b.n	8007894 <USBD_GetDescriptor+0x2cc>
    return;
 8007892:	bf00      	nop
  }
}
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop

0800789c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	889b      	ldrh	r3, [r3, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d131      	bne.n	8007912 <USBD_SetAddress+0x76>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d12d      	bne.n	8007912 <USBD_SetAddress+0x76>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	885b      	ldrh	r3, [r3, #2]
 80078ba:	2b7f      	cmp	r3, #127	; 0x7f
 80078bc:	d829      	bhi.n	8007912 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	885b      	ldrh	r3, [r3, #2]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d104      	bne.n	80078e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9bc 	bl	8007c56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078de:	e01d      	b.n	800791c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7bfa      	ldrb	r2, [r7, #15]
 80078e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	4619      	mov	r1, r3
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 ff81 	bl	80087f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa7a 	bl	8007dec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078f8:	7bfb      	ldrb	r3, [r7, #15]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2202      	movs	r2, #2
 8007902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007906:	e009      	b.n	800791c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007910:	e004      	b.n	800791c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f99e 	bl	8007c56 <USBD_CtlError>
  }
}
 800791a:	bf00      	nop
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	885b      	ldrh	r3, [r3, #2]
 8007936:	b2da      	uxtb	r2, r3
 8007938:	4b4e      	ldr	r3, [pc, #312]	; (8007a74 <USBD_SetConfig+0x150>)
 800793a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800793c:	4b4d      	ldr	r3, [pc, #308]	; (8007a74 <USBD_SetConfig+0x150>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d905      	bls.n	8007950 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f985 	bl	8007c56 <USBD_CtlError>
    return USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	e08c      	b.n	8007a6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d002      	beq.n	8007962 <USBD_SetConfig+0x3e>
 800795c:	2b03      	cmp	r3, #3
 800795e:	d029      	beq.n	80079b4 <USBD_SetConfig+0x90>
 8007960:	e075      	b.n	8007a4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007962:	4b44      	ldr	r3, [pc, #272]	; (8007a74 <USBD_SetConfig+0x150>)
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d020      	beq.n	80079ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800796a:	4b42      	ldr	r3, [pc, #264]	; (8007a74 <USBD_SetConfig+0x150>)
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007974:	4b3f      	ldr	r3, [pc, #252]	; (8007a74 <USBD_SetConfig+0x150>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fe ffe7 	bl	800694e <USBD_SetClassConfig>
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007984:	7bfb      	ldrb	r3, [r7, #15]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f962 	bl	8007c56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800799a:	e065      	b.n	8007a68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa25 	bl	8007dec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2203      	movs	r2, #3
 80079a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80079aa:	e05d      	b.n	8007a68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 fa1d 	bl	8007dec <USBD_CtlSendStatus>
      break;
 80079b2:	e059      	b.n	8007a68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80079b4:	4b2f      	ldr	r3, [pc, #188]	; (8007a74 <USBD_SetConfig+0x150>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d112      	bne.n	80079e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80079c4:	4b2b      	ldr	r3, [pc, #172]	; (8007a74 <USBD_SetConfig+0x150>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079ce:	4b29      	ldr	r3, [pc, #164]	; (8007a74 <USBD_SetConfig+0x150>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fe ffd6 	bl	8006986 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa06 	bl	8007dec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80079e0:	e042      	b.n	8007a68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80079e2:	4b24      	ldr	r3, [pc, #144]	; (8007a74 <USBD_SetConfig+0x150>)
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d02a      	beq.n	8007a46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fe ffc4 	bl	8006986 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079fe:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <USBD_SetConfig+0x150>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a08:	4b1a      	ldr	r3, [pc, #104]	; (8007a74 <USBD_SetConfig+0x150>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fe ff9d 	bl	800694e <USBD_SetClassConfig>
 8007a14:	4603      	mov	r3, r0
 8007a16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00f      	beq.n	8007a3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f918 	bl	8007c56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7fe ffa9 	bl	8006986 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a3c:	e014      	b.n	8007a68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f9d4 	bl	8007dec <USBD_CtlSendStatus>
      break;
 8007a44:	e010      	b.n	8007a68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 f9d0 	bl	8007dec <USBD_CtlSendStatus>
      break;
 8007a4c:	e00c      	b.n	8007a68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007a4e:	6839      	ldr	r1, [r7, #0]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f900 	bl	8007c56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a56:	4b07      	ldr	r3, [pc, #28]	; (8007a74 <USBD_SetConfig+0x150>)
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f7fe ff92 	bl	8006986 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a62:	2303      	movs	r3, #3
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	bf00      	nop
  }

  return ret;
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	200001a8 	.word	0x200001a8

08007a78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	88db      	ldrh	r3, [r3, #6]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d004      	beq.n	8007a94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8e2 	bl	8007c56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a92:	e023      	b.n	8007adc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	dc02      	bgt.n	8007aa6 <USBD_GetConfig+0x2e>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc03      	bgt.n	8007aac <USBD_GetConfig+0x34>
 8007aa4:	e015      	b.n	8007ad2 <USBD_GetConfig+0x5a>
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d00b      	beq.n	8007ac2 <USBD_GetConfig+0x4a>
 8007aaa:	e012      	b.n	8007ad2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f93c 	bl	8007d38 <USBD_CtlSendData>
        break;
 8007ac0:	e00c      	b.n	8007adc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f934 	bl	8007d38 <USBD_CtlSendData>
        break;
 8007ad0:	e004      	b.n	8007adc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ad2:	6839      	ldr	r1, [r7, #0]
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8be 	bl	8007c56 <USBD_CtlError>
        break;
 8007ada:	bf00      	nop
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d81e      	bhi.n	8007b3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	88db      	ldrh	r3, [r3, #6]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d004      	beq.n	8007b0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f8a5 	bl	8007c56 <USBD_CtlError>
        break;
 8007b0c:	e01a      	b.n	8007b44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f043 0202 	orr.w	r2, r3, #2
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	2202      	movs	r2, #2
 8007b30:	4619      	mov	r1, r3
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f900 	bl	8007d38 <USBD_CtlSendData>
      break;
 8007b38:	e004      	b.n	8007b44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f88a 	bl	8007c56 <USBD_CtlError>
      break;
 8007b42:	bf00      	nop
  }
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	885b      	ldrh	r3, [r3, #2]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d107      	bne.n	8007b6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 f940 	bl	8007dec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b6c:	e013      	b.n	8007b96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	885b      	ldrh	r3, [r3, #2]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d10b      	bne.n	8007b8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	889b      	ldrh	r3, [r3, #4]
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f930 	bl	8007dec <USBD_CtlSendStatus>
}
 8007b8c:	e003      	b.n	8007b96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f860 	bl	8007c56 <USBD_CtlError>
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d80b      	bhi.n	8007bce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	885b      	ldrh	r3, [r3, #2]
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d10c      	bne.n	8007bd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f910 	bl	8007dec <USBD_CtlSendStatus>
      }
      break;
 8007bcc:	e004      	b.n	8007bd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f840 	bl	8007c56 <USBD_CtlError>
      break;
 8007bd6:	e000      	b.n	8007bda <USBD_ClrFeature+0x3c>
      break;
 8007bd8:	bf00      	nop
  }
}
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	781a      	ldrb	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f7ff fa41 	bl	8007094 <SWAPBYTE>
 8007c12:	4603      	mov	r3, r0
 8007c14:	461a      	mov	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff fa34 	bl	8007094 <SWAPBYTE>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	3301      	adds	r3, #1
 8007c38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff fa27 	bl	8007094 <SWAPBYTE>
 8007c46:	4603      	mov	r3, r0
 8007c48:	461a      	mov	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	80da      	strh	r2, [r3, #6]
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
 8007c5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c60:	2180      	movs	r1, #128	; 0x80
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd5c 	bl	8008720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c68:	2100      	movs	r1, #0
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fd58 	bl	8008720 <USBD_LL_StallEP>
}
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d036      	beq.n	8007cfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007c92:	6938      	ldr	r0, [r7, #16]
 8007c94:	f000 f836 	bl	8007d04 <USBD_GetLen>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	005b      	lsls	r3, r3, #1
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	4413      	add	r3, r2
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7812      	ldrb	r2, [r2, #0]
 8007cb0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	2203      	movs	r2, #3
 8007cc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8007cc2:	7dfb      	ldrb	r3, [r7, #23]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007cc8:	e013      	b.n	8007cf2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	4413      	add	r3, r2
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	7812      	ldrb	r2, [r2, #0]
 8007cd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	613b      	str	r3, [r7, #16]
    idx++;
 8007cdc:	7dfb      	ldrb	r3, [r7, #23]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e7      	bne.n	8007cca <USBD_GetString+0x52>
 8007cfa:	e000      	b.n	8007cfe <USBD_GetString+0x86>
    return;
 8007cfc:	bf00      	nop
  }
}
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d14:	e005      	b.n	8007d22 <USBD_GetLen+0x1e>
  {
    len++;
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f5      	bne.n	8007d16 <USBD_GetLen+0x12>
  }

  return len;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2202      	movs	r2, #2
 8007d48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fd67 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b084      	sub	sp, #16
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	60b9      	str	r1, [r7, #8]
 8007d78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	2100      	movs	r1, #0
 8007d80:	68f8      	ldr	r0, [r7, #12]
 8007d82:	f000 fd56 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3710      	adds	r7, #16
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2203      	movs	r2, #3
 8007da0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 fd5a 	bl	8008874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dc0:	2300      	movs	r3, #0
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b084      	sub	sp, #16
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	2100      	movs	r1, #0
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 fd49 	bl	8008874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2204      	movs	r2, #4
 8007df8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fd15 	bl	8008832 <USBD_LL_Transmit>

  return USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2205      	movs	r2, #5
 8007e1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e22:	2300      	movs	r3, #0
 8007e24:	2200      	movs	r2, #0
 8007e26:	2100      	movs	r1, #0
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fd23 	bl	8008874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4912      	ldr	r1, [pc, #72]	; (8007e88 <MX_USB_DEVICE_Init+0x50>)
 8007e40:	4812      	ldr	r0, [pc, #72]	; (8007e8c <MX_USB_DEVICE_Init+0x54>)
 8007e42:	f7fe fd07 	bl	8006854 <USBD_Init>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e4c:	f7f8 fc8a 	bl	8000764 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e50:	490f      	ldr	r1, [pc, #60]	; (8007e90 <MX_USB_DEVICE_Init+0x58>)
 8007e52:	480e      	ldr	r0, [pc, #56]	; (8007e8c <MX_USB_DEVICE_Init+0x54>)
 8007e54:	f7fe fd2e 	bl	80068b4 <USBD_RegisterClass>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e5e:	f7f8 fc81 	bl	8000764 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e62:	490c      	ldr	r1, [pc, #48]	; (8007e94 <MX_USB_DEVICE_Init+0x5c>)
 8007e64:	4809      	ldr	r0, [pc, #36]	; (8007e8c <MX_USB_DEVICE_Init+0x54>)
 8007e66:	f7fe fc1f 	bl	80066a8 <USBD_CDC_RegisterInterface>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d001      	beq.n	8007e74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e70:	f7f8 fc78 	bl	8000764 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e74:	4805      	ldr	r0, [pc, #20]	; (8007e8c <MX_USB_DEVICE_Init+0x54>)
 8007e76:	f7fe fd53 	bl	8006920 <USBD_Start>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e80:	f7f8 fc70 	bl	8000764 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200000ac 	.word	0x200000ac
 8007e8c:	200001ac 	.word	0x200001ac
 8007e90:	20000018 	.word	0x20000018
 8007e94:	20000098 	.word	0x20000098

08007e98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4905      	ldr	r1, [pc, #20]	; (8007eb4 <CDC_Init_FS+0x1c>)
 8007ea0:	4805      	ldr	r0, [pc, #20]	; (8007eb8 <CDC_Init_FS+0x20>)
 8007ea2:	f7fe fc1b 	bl	80066dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007ea6:	4905      	ldr	r1, [pc, #20]	; (8007ebc <CDC_Init_FS+0x24>)
 8007ea8:	4803      	ldr	r0, [pc, #12]	; (8007eb8 <CDC_Init_FS+0x20>)
 8007eaa:	f7fe fc39 	bl	8006720 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007eae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000c88 	.word	0x20000c88
 8007eb8:	200001ac 	.word	0x200001ac
 8007ebc:	20000488 	.word	0x20000488

08007ec0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ec4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	6039      	str	r1, [r7, #0]
 8007eda:	71fb      	strb	r3, [r7, #7]
 8007edc:	4613      	mov	r3, r2
 8007ede:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	2b23      	cmp	r3, #35	; 0x23
 8007ee4:	d84a      	bhi.n	8007f7c <CDC_Control_FS+0xac>
 8007ee6:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <CDC_Control_FS+0x1c>)
 8007ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eec:	08007f7d 	.word	0x08007f7d
 8007ef0:	08007f7d 	.word	0x08007f7d
 8007ef4:	08007f7d 	.word	0x08007f7d
 8007ef8:	08007f7d 	.word	0x08007f7d
 8007efc:	08007f7d 	.word	0x08007f7d
 8007f00:	08007f7d 	.word	0x08007f7d
 8007f04:	08007f7d 	.word	0x08007f7d
 8007f08:	08007f7d 	.word	0x08007f7d
 8007f0c:	08007f7d 	.word	0x08007f7d
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	08007f7d 	.word	0x08007f7d
 8007f18:	08007f7d 	.word	0x08007f7d
 8007f1c:	08007f7d 	.word	0x08007f7d
 8007f20:	08007f7d 	.word	0x08007f7d
 8007f24:	08007f7d 	.word	0x08007f7d
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f7d 	.word	0x08007f7d
 8007f38:	08007f7d 	.word	0x08007f7d
 8007f3c:	08007f7d 	.word	0x08007f7d
 8007f40:	08007f7d 	.word	0x08007f7d
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f7d 	.word	0x08007f7d
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f7d 	.word	0x08007f7d
 8007f5c:	08007f7d 	.word	0x08007f7d
 8007f60:	08007f7d 	.word	0x08007f7d
 8007f64:	08007f7d 	.word	0x08007f7d
 8007f68:	08007f7d 	.word	0x08007f7d
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007f7d 	.word	0x08007f7d
 8007f74:	08007f7d 	.word	0x08007f7d
 8007f78:	08007f7d 	.word	0x08007f7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f7c:	bf00      	nop
  }

  return (USBD_OK);
 8007f7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	483c      	ldr	r0, [pc, #240]	; (800808c <CDC_Receive_FS+0x100>)
 8007f9a:	f7fe fbc1 	bl	8006720 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f9e:	483b      	ldr	r0, [pc, #236]	; (800808c <CDC_Receive_FS+0x100>)
 8007fa0:	f7fe fc22 	bl	80067e8 <USBD_CDC_ReceivePacket>

    //Transmitting Back the value recieved;
    //CDC_Transmit_FS(Buf, *Len);

    // Define the string to compare
   	const char *g_string = "Green";
 8007fa4:	4b3a      	ldr	r3, [pc, #232]	; (8008090 <CDC_Receive_FS+0x104>)
 8007fa6:	617b      	str	r3, [r7, #20]
   	const char *b_string = "Blue";
 8007fa8:	4b3a      	ldr	r3, [pc, #232]	; (8008094 <CDC_Receive_FS+0x108>)
 8007faa:	613b      	str	r3, [r7, #16]
   	const char *o_string = "Orange";
 8007fac:	4b3a      	ldr	r3, [pc, #232]	; (8008098 <CDC_Receive_FS+0x10c>)
 8007fae:	60fb      	str	r3, [r7, #12]
   	const char *ldr_string = "LDR";
 8007fb0:	4b3a      	ldr	r3, [pc, #232]	; (800809c <CDC_Receive_FS+0x110>)
 8007fb2:	60bb      	str	r3, [r7, #8]


   	// Compare the received buffer with the LED string
   	if (strncmp((char*)Buf, g_string, strlen(g_string)) == 0)
 8007fb4:	6978      	ldr	r0, [r7, #20]
 8007fb6:	f7f8 f907 	bl	80001c8 <strlen>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fcd7 	bl	8008974 <strncmp>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d106      	bne.n	8007fda <CDC_Receive_FS+0x4e>
   	{
   	   // If the buffer matches the LED string, Turn on LEDs
   	   	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007fd2:	4833      	ldr	r0, [pc, #204]	; (80080a0 <CDC_Receive_FS+0x114>)
 8007fd4:	f7f9 fcd8 	bl	8001988 <HAL_GPIO_WritePin>
 8007fd8:	e053      	b.n	8008082 <CDC_Receive_FS+0xf6>

    }
   	else if(strncmp((char*)Buf, ldr_string, strlen(ldr_string)) == 0)
 8007fda:	68b8      	ldr	r0, [r7, #8]
 8007fdc:	f7f8 f8f4 	bl	80001c8 <strlen>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fcc4 	bl	8008974 <strncmp>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d11b      	bne.n	800802a <CDC_Receive_FS+0x9e>
   	{
   		//accepting value from ldr using ADC
   			  HAL_ADC_Start(&hadc1);
 8007ff2:	482c      	ldr	r0, [pc, #176]	; (80080a4 <CDC_Receive_FS+0x118>)
 8007ff4:	f7f8 fdcc 	bl	8000b90 <HAL_ADC_Start>
   			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8007ff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ffc:	4829      	ldr	r0, [pc, #164]	; (80080a4 <CDC_Receive_FS+0x118>)
 8007ffe:	f7f8 fecc 	bl	8000d9a <HAL_ADC_PollForConversion>
   			  value = HAL_ADC_GetValue(&hadc1);
 8008002:	4828      	ldr	r0, [pc, #160]	; (80080a4 <CDC_Receive_FS+0x118>)
 8008004:	f7f8 ff54 	bl	8000eb0 <HAL_ADC_GetValue>
 8008008:	4603      	mov	r3, r0
 800800a:	4a27      	ldr	r2, [pc, #156]	; (80080a8 <CDC_Receive_FS+0x11c>)
 800800c:	6013      	str	r3, [r2, #0]
   			  HAL_ADC_Stop(&hadc1);
 800800e:	4825      	ldr	r0, [pc, #148]	; (80080a4 <CDC_Receive_FS+0x118>)
 8008010:	f7f8 fe90 	bl	8000d34 <HAL_ADC_Stop>
   			  CDC_Transmit_FS((uint8_t *)value, *Len);
 8008014:	4b24      	ldr	r3, [pc, #144]	; (80080a8 <CDC_Receive_FS+0x11c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	461a      	mov	r2, r3
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	4619      	mov	r1, r3
 8008022:	4610      	mov	r0, r2
 8008024:	f000 f842 	bl	80080ac <CDC_Transmit_FS>
 8008028:	e02b      	b.n	8008082 <CDC_Receive_FS+0xf6>
   	}
    else if (strncmp((char*)Buf, b_string, strlen(b_string)) == 0)
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f7f8 f8cc 	bl	80001c8 <strlen>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	6939      	ldr	r1, [r7, #16]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fc9c 	bl	8008974 <strncmp>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <CDC_Receive_FS+0xc4>
    {
    	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8008042:	2201      	movs	r2, #1
 8008044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008048:	4815      	ldr	r0, [pc, #84]	; (80080a0 <CDC_Receive_FS+0x114>)
 800804a:	f7f9 fc9d 	bl	8001988 <HAL_GPIO_WritePin>
 800804e:	e018      	b.n	8008082 <CDC_Receive_FS+0xf6>
    }
    else if (strncmp((char*)Buf, o_string, strlen(o_string)) == 0)
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7f8 f8b9 	bl	80001c8 <strlen>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fc89 	bl	8008974 <strncmp>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d106      	bne.n	8008076 <CDC_Receive_FS+0xea>
    {
       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8008068:	2201      	movs	r2, #1
 800806a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800806e:	480c      	ldr	r0, [pc, #48]	; (80080a0 <CDC_Receive_FS+0x114>)
 8008070:	f7f9 fc8a 	bl	8001988 <HAL_GPIO_WritePin>
 8008074:	e005      	b.n	8008082 <CDC_Receive_FS+0xf6>
    }
    else
    {
       	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8008076:	2201      	movs	r2, #1
 8008078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800807c:	4808      	ldr	r0, [pc, #32]	; (80080a0 <CDC_Receive_FS+0x114>)
 800807e:	f7f9 fc83 	bl	8001988 <HAL_GPIO_WritePin>
    }


   	return (USBD_OK);
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	200001ac 	.word	0x200001ac
 8008090:	080089f8 	.word	0x080089f8
 8008094:	08008a00 	.word	0x08008a00
 8008098:	08008a08 	.word	0x08008a08
 800809c:	08008a10 	.word	0x08008a10
 80080a0:	40020c00 	.word	0x40020c00
 80080a4:	20000118 	.word	0x20000118
 80080a8:	20001488 	.word	0x20001488

080080ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080bc:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <CDC_Transmit_FS+0x48>)
 80080be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e00b      	b.n	80080ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080d2:	887b      	ldrh	r3, [r7, #2]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4806      	ldr	r0, [pc, #24]	; (80080f4 <CDC_Transmit_FS+0x48>)
 80080da:	f7fe faff 	bl	80066dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080de:	4805      	ldr	r0, [pc, #20]	; (80080f4 <CDC_Transmit_FS+0x48>)
 80080e0:	f7fe fb3c 	bl	800675c <USBD_CDC_TransmitPacket>
 80080e4:	4603      	mov	r3, r0
 80080e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200001ac 	.word	0x200001ac

080080f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800810a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800810e:	4618      	mov	r0, r3
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	6039      	str	r1, [r7, #0]
 8008126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2212      	movs	r2, #18
 800812c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800812e:	4b03      	ldr	r3, [pc, #12]	; (800813c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008130:	4618      	mov	r0, r3
 8008132:	370c      	adds	r7, #12
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	200000c8 	.word	0x200000c8

08008140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	4603      	mov	r3, r0
 8008148:	6039      	str	r1, [r7, #0]
 800814a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2204      	movs	r2, #4
 8008150:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008152:	4b03      	ldr	r3, [pc, #12]	; (8008160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	200000dc 	.word	0x200000dc

08008164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	6039      	str	r1, [r7, #0]
 800816e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d105      	bne.n	8008182 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4907      	ldr	r1, [pc, #28]	; (8008198 <USBD_FS_ProductStrDescriptor+0x34>)
 800817a:	4808      	ldr	r0, [pc, #32]	; (800819c <USBD_FS_ProductStrDescriptor+0x38>)
 800817c:	f7ff fd7c 	bl	8007c78 <USBD_GetString>
 8008180:	e004      	b.n	800818c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4904      	ldr	r1, [pc, #16]	; (8008198 <USBD_FS_ProductStrDescriptor+0x34>)
 8008186:	4805      	ldr	r0, [pc, #20]	; (800819c <USBD_FS_ProductStrDescriptor+0x38>)
 8008188:	f7ff fd76 	bl	8007c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	2000148c 	.word	0x2000148c
 800819c:	08008a14 	.word	0x08008a14

080081a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	6039      	str	r1, [r7, #0]
 80081aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	4904      	ldr	r1, [pc, #16]	; (80081c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081b0:	4804      	ldr	r0, [pc, #16]	; (80081c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081b2:	f7ff fd61 	bl	8007c78 <USBD_GetString>
  return USBD_StrDesc;
 80081b6:	4b02      	ldr	r3, [pc, #8]	; (80081c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	2000148c 	.word	0x2000148c
 80081c4:	08008a2c 	.word	0x08008a2c

080081c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	221a      	movs	r2, #26
 80081d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081da:	f000 f843 	bl	8008264 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081de:	4b02      	ldr	r3, [pc, #8]	; (80081e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	200000e0 	.word	0x200000e0

080081ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	6039      	str	r1, [r7, #0]
 80081f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081f8:	79fb      	ldrb	r3, [r7, #7]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d105      	bne.n	800820a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	4907      	ldr	r1, [pc, #28]	; (8008220 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008202:	4808      	ldr	r0, [pc, #32]	; (8008224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008204:	f7ff fd38 	bl	8007c78 <USBD_GetString>
 8008208:	e004      	b.n	8008214 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4904      	ldr	r1, [pc, #16]	; (8008220 <USBD_FS_ConfigStrDescriptor+0x34>)
 800820e:	4805      	ldr	r0, [pc, #20]	; (8008224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008210:	f7ff fd32 	bl	8007c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008214:	4b02      	ldr	r3, [pc, #8]	; (8008220 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	2000148c 	.word	0x2000148c
 8008224:	08008a44 	.word	0x08008a44

08008228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4907      	ldr	r1, [pc, #28]	; (800825c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800823e:	4808      	ldr	r0, [pc, #32]	; (8008260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008240:	f7ff fd1a 	bl	8007c78 <USBD_GetString>
 8008244:	e004      	b.n	8008250 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	4904      	ldr	r1, [pc, #16]	; (800825c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800824a:	4805      	ldr	r0, [pc, #20]	; (8008260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800824c:	f7ff fd14 	bl	8007c78 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008250:	4b02      	ldr	r3, [pc, #8]	; (800825c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008252:	4618      	mov	r0, r3
 8008254:	3708      	adds	r7, #8
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	2000148c 	.word	0x2000148c
 8008260:	08008a50 	.word	0x08008a50

08008264 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800826a:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <Get_SerialNum+0x44>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008270:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <Get_SerialNum+0x48>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008276:	4b0e      	ldr	r3, [pc, #56]	; (80082b0 <Get_SerialNum+0x4c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d009      	beq.n	800829e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800828a:	2208      	movs	r2, #8
 800828c:	4909      	ldr	r1, [pc, #36]	; (80082b4 <Get_SerialNum+0x50>)
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f814 	bl	80082bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008294:	2204      	movs	r2, #4
 8008296:	4908      	ldr	r1, [pc, #32]	; (80082b8 <Get_SerialNum+0x54>)
 8008298:	68b8      	ldr	r0, [r7, #8]
 800829a:	f000 f80f 	bl	80082bc <IntToUnicode>
  }
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	1fff7a10 	.word	0x1fff7a10
 80082ac:	1fff7a14 	.word	0x1fff7a14
 80082b0:	1fff7a18 	.word	0x1fff7a18
 80082b4:	200000e2 	.word	0x200000e2
 80082b8:	200000f2 	.word	0x200000f2

080082bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	4613      	mov	r3, r2
 80082c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]
 80082d2:	e027      	b.n	8008324 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	0f1b      	lsrs	r3, r3, #28
 80082d8:	2b09      	cmp	r3, #9
 80082da:	d80b      	bhi.n	80082f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	0f1b      	lsrs	r3, r3, #28
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	4619      	mov	r1, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	440b      	add	r3, r1
 80082ec:	3230      	adds	r2, #48	; 0x30
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	e00a      	b.n	800830a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	0f1b      	lsrs	r3, r3, #28
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4619      	mov	r1, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	440b      	add	r3, r1
 8008304:	3237      	adds	r2, #55	; 0x37
 8008306:	b2d2      	uxtb	r2, r2
 8008308:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	005b      	lsls	r3, r3, #1
 8008314:	3301      	adds	r3, #1
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	4413      	add	r3, r2
 800831a:	2200      	movs	r2, #0
 800831c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	3301      	adds	r3, #1
 8008322:	75fb      	strb	r3, [r7, #23]
 8008324:	7dfa      	ldrb	r2, [r7, #23]
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	429a      	cmp	r2, r3
 800832a:	d3d3      	bcc.n	80082d4 <IntToUnicode+0x18>
  }
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	371c      	adds	r7, #28
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	; 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	605a      	str	r2, [r3, #4]
 800834e:	609a      	str	r2, [r3, #8]
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800835c:	d13a      	bne.n	80083d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
 8008362:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	4a1d      	ldr	r2, [pc, #116]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	6313      	str	r3, [r2, #48]	; 0x30
 800836e:	4b1b      	ldr	r3, [pc, #108]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	613b      	str	r3, [r7, #16]
 8008378:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800837a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800837e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008380:	2302      	movs	r3, #2
 8008382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008384:	2300      	movs	r3, #0
 8008386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008388:	2303      	movs	r3, #3
 800838a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800838c:	230a      	movs	r3, #10
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008390:	f107 0314 	add.w	r3, r7, #20
 8008394:	4619      	mov	r1, r3
 8008396:	4812      	ldr	r0, [pc, #72]	; (80083e0 <HAL_PCD_MspInit+0xa4>)
 8008398:	f7f9 f95a 	bl	8001650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800839c:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	4a0e      	ldr	r2, [pc, #56]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	6353      	str	r3, [r2, #52]	; 0x34
 80083a8:	2300      	movs	r3, #0
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 80083ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b0:	4a0a      	ldr	r2, [pc, #40]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 80083b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083b6:	6453      	str	r3, [r2, #68]	; 0x44
 80083b8:	4b08      	ldr	r3, [pc, #32]	; (80083dc <HAL_PCD_MspInit+0xa0>)
 80083ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083c4:	2200      	movs	r2, #0
 80083c6:	2100      	movs	r1, #0
 80083c8:	2043      	movs	r0, #67	; 0x43
 80083ca:	f7f9 f878 	bl	80014be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083ce:	2043      	movs	r0, #67	; 0x43
 80083d0:	f7f9 f891 	bl	80014f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083d4:	bf00      	nop
 80083d6:	3728      	adds	r7, #40	; 0x28
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40020000 	.word	0x40020000

080083e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083f8:	4619      	mov	r1, r3
 80083fa:	4610      	mov	r0, r2
 80083fc:	f7fe fadd 	bl	80069ba <USBD_LL_SetupStage>
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	4613      	mov	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	440b      	add	r3, r1
 8008428:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	4619      	mov	r1, r3
 8008432:	f7fe fb17 	bl	8006a64 <USBD_LL_DataOutStage>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b082      	sub	sp, #8
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	460b      	mov	r3, r1
 8008448:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008450:	78fa      	ldrb	r2, [r7, #3]
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	334c      	adds	r3, #76	; 0x4c
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	4619      	mov	r1, r3
 8008466:	f7fe fbb0 	bl	8006bca <USBD_LL_DataInStage>
}
 800846a:	bf00      	nop
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fce4 	bl	8006e4e <USBD_LL_SOF>
}
 8008486:	bf00      	nop
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008496:	2301      	movs	r3, #1
 8008498:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d102      	bne.n	80084a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
 80084a6:	e008      	b.n	80084ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d102      	bne.n	80084b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
 80084b4:	e001      	b.n	80084ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084b6:	f7f8 f955 	bl	8000764 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084c0:	7bfa      	ldrb	r2, [r7, #15]
 80084c2:	4611      	mov	r1, r2
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fc84 	bl	8006dd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fc2c 	bl	8006d2e <USBD_LL_Reset>
}
 80084d6:	bf00      	nop
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fc7f 	bl	8006df2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	6812      	ldr	r2, [r2, #0]
 8008502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008506:	f043 0301 	orr.w	r3, r3, #1
 800850a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a1b      	ldr	r3, [r3, #32]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <HAL_PCD_SuspendCallback+0x48>)
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	4a03      	ldr	r2, [pc, #12]	; (8008528 <HAL_PCD_SuspendCallback+0x48>)
 800851a:	f043 0306 	orr.w	r3, r3, #6
 800851e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008520:	bf00      	nop
 8008522:	3708      	adds	r7, #8
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	e000ed00 	.word	0xe000ed00

0800852c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800853a:	4618      	mov	r0, r3
 800853c:	f7fe fc6f 	bl	8006e1e <USBD_LL_Resume>
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fe fcc7 	bl	8006ef2 <USBD_LL_IsoOUTIncomplete>
}
 8008564:	bf00      	nop
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	4611      	mov	r1, r2
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fc83 	bl	8006e8e <USBD_LL_IsoINIncomplete>
}
 8008588:	bf00      	nop
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fcd9 	bl	8006f56 <USBD_LL_DevConnected>
}
 80085a4:	bf00      	nop
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fcd6 	bl	8006f6c <USBD_LL_DevDisconnected>
}
 80085c0:	bf00      	nop
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d13c      	bne.n	8008652 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085d8:	4a20      	ldr	r2, [pc, #128]	; (800865c <USBD_LL_Init+0x94>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <USBD_LL_Init+0x94>)
 80085e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085e8:	4b1c      	ldr	r3, [pc, #112]	; (800865c <USBD_LL_Init+0x94>)
 80085ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085f0:	4b1a      	ldr	r3, [pc, #104]	; (800865c <USBD_LL_Init+0x94>)
 80085f2:	2204      	movs	r2, #4
 80085f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085f6:	4b19      	ldr	r3, [pc, #100]	; (800865c <USBD_LL_Init+0x94>)
 80085f8:	2202      	movs	r2, #2
 80085fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085fc:	4b17      	ldr	r3, [pc, #92]	; (800865c <USBD_LL_Init+0x94>)
 80085fe:	2200      	movs	r2, #0
 8008600:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008602:	4b16      	ldr	r3, [pc, #88]	; (800865c <USBD_LL_Init+0x94>)
 8008604:	2202      	movs	r2, #2
 8008606:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008608:	4b14      	ldr	r3, [pc, #80]	; (800865c <USBD_LL_Init+0x94>)
 800860a:	2200      	movs	r2, #0
 800860c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <USBD_LL_Init+0x94>)
 8008610:	2200      	movs	r2, #0
 8008612:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <USBD_LL_Init+0x94>)
 8008616:	2200      	movs	r2, #0
 8008618:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800861a:	4b10      	ldr	r3, [pc, #64]	; (800865c <USBD_LL_Init+0x94>)
 800861c:	2200      	movs	r2, #0
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008620:	4b0e      	ldr	r3, [pc, #56]	; (800865c <USBD_LL_Init+0x94>)
 8008622:	2200      	movs	r2, #0
 8008624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008626:	480d      	ldr	r0, [pc, #52]	; (800865c <USBD_LL_Init+0x94>)
 8008628:	f7f9 f9c7 	bl	80019ba <HAL_PCD_Init>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008632:	f7f8 f897 	bl	8000764 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	4808      	ldr	r0, [pc, #32]	; (800865c <USBD_LL_Init+0x94>)
 800863a:	f7fa fc1e 	bl	8002e7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800863e:	2240      	movs	r2, #64	; 0x40
 8008640:	2100      	movs	r1, #0
 8008642:	4806      	ldr	r0, [pc, #24]	; (800865c <USBD_LL_Init+0x94>)
 8008644:	f7fa fbd2 	bl	8002dec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008648:	2280      	movs	r2, #128	; 0x80
 800864a:	2101      	movs	r1, #1
 800864c:	4803      	ldr	r0, [pc, #12]	; (800865c <USBD_LL_Init+0x94>)
 800864e:	f7fa fbcd 	bl	8002dec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	2000168c 	.word	0x2000168c

08008660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008676:	4618      	mov	r0, r3
 8008678:	f7f9 fabc 	bl	8001bf4 <HAL_PCD_Start>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f942 	bl	800890c <USBD_Get_USB_Status>
 8008688:	4603      	mov	r3, r0
 800868a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800868c:	7bbb      	ldrb	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
 800869e:	4608      	mov	r0, r1
 80086a0:	4611      	mov	r1, r2
 80086a2:	461a      	mov	r2, r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	70fb      	strb	r3, [r7, #3]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70bb      	strb	r3, [r7, #2]
 80086ac:	4613      	mov	r3, r2
 80086ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086be:	78bb      	ldrb	r3, [r7, #2]
 80086c0:	883a      	ldrh	r2, [r7, #0]
 80086c2:	78f9      	ldrb	r1, [r7, #3]
 80086c4:	f7f9 ff8d 	bl	80025e2 <HAL_PCD_EP_Open>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f91c 	bl	800890c <USBD_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7f9 ffd6 	bl	80026b2 <HAL_PCD_EP_Close>
 8008706:	4603      	mov	r3, r0
 8008708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 f8fd 	bl	800890c <USBD_Get_USB_Status>
 8008712:	4603      	mov	r3, r0
 8008714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008716:	7bbb      	ldrb	r3, [r7, #14]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f7fa f8ae 	bl	80028a0 <HAL_PCD_EP_SetStall>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	4618      	mov	r0, r3
 800874c:	f000 f8de 	bl	800890c <USBD_Get_USB_Status>
 8008750:	4603      	mov	r3, r0
 8008752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008754:	7bbb      	ldrb	r3, [r7, #14]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800875e:	b580      	push	{r7, lr}
 8008760:	b084      	sub	sp, #16
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7fa f8f3 	bl	8002968 <HAL_PCD_EP_ClrStall>
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f8bf 	bl	800890c <USBD_Get_USB_Status>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008792:	7bbb      	ldrb	r3, [r7, #14]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	da0b      	bge.n	80087d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	4613      	mov	r3, r2
 80087c2:	00db      	lsls	r3, r3, #3
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	333e      	adds	r3, #62	; 0x3e
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	e00b      	b.n	80087e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80087e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	460b      	mov	r3, r1
 80087fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008800:	2300      	movs	r3, #0
 8008802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800880e:	78fa      	ldrb	r2, [r7, #3]
 8008810:	4611      	mov	r1, r2
 8008812:	4618      	mov	r0, r3
 8008814:	f7f9 fec0 	bl	8002598 <HAL_PCD_SetAddress>
 8008818:	4603      	mov	r3, r0
 800881a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	4618      	mov	r0, r3
 8008820:	f000 f874 	bl	800890c <USBD_Get_USB_Status>
 8008824:	4603      	mov	r3, r0
 8008826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008828:	7bbb      	ldrb	r3, [r7, #14]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b086      	sub	sp, #24
 8008836:	af00      	add	r7, sp, #0
 8008838:	60f8      	str	r0, [r7, #12]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
 800883e:	460b      	mov	r3, r1
 8008840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008842:	2300      	movs	r3, #0
 8008844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008850:	7af9      	ldrb	r1, [r7, #11]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	f7f9 ffd9 	bl	800280c <HAL_PCD_EP_Transmit>
 800885a:	4603      	mov	r3, r0
 800885c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800885e:	7dfb      	ldrb	r3, [r7, #23]
 8008860:	4618      	mov	r0, r3
 8008862:	f000 f853 	bl	800890c <USBD_Get_USB_Status>
 8008866:	4603      	mov	r3, r0
 8008868:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800886a:	7dbb      	ldrb	r3, [r7, #22]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	460b      	mov	r3, r1
 8008882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008892:	7af9      	ldrb	r1, [r7, #11]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	f7f9 ff55 	bl	8002746 <HAL_PCD_EP_Receive>
 800889c:	4603      	mov	r3, r0
 800889e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 f832 	bl	800890c <USBD_Get_USB_Status>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	4611      	mov	r1, r2
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7f9 ff85 	bl	80027dc <HAL_PCD_EP_GetRxCount>
 80088d2:	4603      	mov	r3, r0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088e4:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <USBD_static_malloc+0x18>)
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20001b98 	.word	0x20001b98

080088f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	4603      	mov	r3, r0
 8008914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	2b03      	cmp	r3, #3
 800891e:	d817      	bhi.n	8008950 <USBD_Get_USB_Status+0x44>
 8008920:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <USBD_Get_USB_Status+0x1c>)
 8008922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008926:	bf00      	nop
 8008928:	08008939 	.word	0x08008939
 800892c:	0800893f 	.word	0x0800893f
 8008930:	08008945 	.word	0x08008945
 8008934:	0800894b 	.word	0x0800894b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73fb      	strb	r3, [r7, #15]
    break;
 800893c:	e00b      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800893e:	2303      	movs	r3, #3
 8008940:	73fb      	strb	r3, [r7, #15]
    break;
 8008942:	e008      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
    break;
 8008948:	e005      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
    break;
 800894e:	e002      	b.n	8008956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008950:	2303      	movs	r3, #3
 8008952:	73fb      	strb	r3, [r7, #15]
    break;
 8008954:	bf00      	nop
  }
  return usb_status;
 8008956:	7bfb      	ldrb	r3, [r7, #15]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3714      	adds	r7, #20
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <memset>:
 8008964:	4402      	add	r2, r0
 8008966:	4603      	mov	r3, r0
 8008968:	4293      	cmp	r3, r2
 800896a:	d100      	bne.n	800896e <memset+0xa>
 800896c:	4770      	bx	lr
 800896e:	f803 1b01 	strb.w	r1, [r3], #1
 8008972:	e7f9      	b.n	8008968 <memset+0x4>

08008974 <strncmp>:
 8008974:	b510      	push	{r4, lr}
 8008976:	b16a      	cbz	r2, 8008994 <strncmp+0x20>
 8008978:	3901      	subs	r1, #1
 800897a:	1884      	adds	r4, r0, r2
 800897c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008980:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008984:	429a      	cmp	r2, r3
 8008986:	d103      	bne.n	8008990 <strncmp+0x1c>
 8008988:	42a0      	cmp	r0, r4
 800898a:	d001      	beq.n	8008990 <strncmp+0x1c>
 800898c:	2a00      	cmp	r2, #0
 800898e:	d1f5      	bne.n	800897c <strncmp+0x8>
 8008990:	1ad0      	subs	r0, r2, r3
 8008992:	bd10      	pop	{r4, pc}
 8008994:	4610      	mov	r0, r2
 8008996:	e7fc      	b.n	8008992 <strncmp+0x1e>

08008998 <__libc_init_array>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	4d0d      	ldr	r5, [pc, #52]	; (80089d0 <__libc_init_array+0x38>)
 800899c:	4c0d      	ldr	r4, [pc, #52]	; (80089d4 <__libc_init_array+0x3c>)
 800899e:	1b64      	subs	r4, r4, r5
 80089a0:	10a4      	asrs	r4, r4, #2
 80089a2:	2600      	movs	r6, #0
 80089a4:	42a6      	cmp	r6, r4
 80089a6:	d109      	bne.n	80089bc <__libc_init_array+0x24>
 80089a8:	4d0b      	ldr	r5, [pc, #44]	; (80089d8 <__libc_init_array+0x40>)
 80089aa:	4c0c      	ldr	r4, [pc, #48]	; (80089dc <__libc_init_array+0x44>)
 80089ac:	f000 f818 	bl	80089e0 <_init>
 80089b0:	1b64      	subs	r4, r4, r5
 80089b2:	10a4      	asrs	r4, r4, #2
 80089b4:	2600      	movs	r6, #0
 80089b6:	42a6      	cmp	r6, r4
 80089b8:	d105      	bne.n	80089c6 <__libc_init_array+0x2e>
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089c0:	4798      	blx	r3
 80089c2:	3601      	adds	r6, #1
 80089c4:	e7ee      	b.n	80089a4 <__libc_init_array+0xc>
 80089c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ca:	4798      	blx	r3
 80089cc:	3601      	adds	r6, #1
 80089ce:	e7f2      	b.n	80089b6 <__libc_init_array+0x1e>
 80089d0:	08008a80 	.word	0x08008a80
 80089d4:	08008a80 	.word	0x08008a80
 80089d8:	08008a80 	.word	0x08008a80
 80089dc:	08008a84 	.word	0x08008a84

080089e0 <_init>:
 80089e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e2:	bf00      	nop
 80089e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e6:	bc08      	pop	{r3}
 80089e8:	469e      	mov	lr, r3
 80089ea:	4770      	bx	lr

080089ec <_fini>:
 80089ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ee:	bf00      	nop
 80089f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f2:	bc08      	pop	{r3}
 80089f4:	469e      	mov	lr, r3
 80089f6:	4770      	bx	lr
